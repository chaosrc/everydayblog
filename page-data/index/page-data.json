{"componentChunkName":"component---src-pages-index-js","path":"/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新"}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"PostgreSQL 简单使用PostgreSQL 是开源、强大、且功能丰富的关系型数据库安装 PostgreSQL最简单的方式是使用 Docker 安装 环境变量用来设置数据库的密码， 用来设置数据库的用户名，然后将数据库数据映射到宿主机通过日志查看是否启动postgres…","fields":{"slug":"/database/PostgreSQL/"},"frontmatter":{"date":"July 20, 2019","title":"PostgreSQL 简单使用","description":null}}},{"node":{"excerpt":"Express Web 之创建 REST API在之前的基础上实现以下功能：设计一个让用户显示、提交和移除消息列表的 API添加基本认证实现路由通过 JSON 响应设计 API…","fields":{"slug":"/nodejs/express-rest-api/"},"frontmatter":{"date":"July 18, 2019","title":"Express Web 之创建 REST API","description":null}}},{"node":{"excerpt":"Express Web…","fields":{"slug":"/nodejs/express-login/"},"frontmatter":{"date":"July 17, 2019","title":"Express Web 之用户登录","description":null}}},{"node":{"excerpt":"Express Web 之用户注册上一篇中完成了用户的认证流程，在此基础上我们继续构建用户的注册流程需要完成以下功能：创建注册页面创建注册接口储存用户注册数据创建注册页面添加路由访问http://localhost:3000/users/register…","fields":{"slug":"/nodejs/express-register/"},"frontmatter":{"date":"July 16, 2019","title":"Express Web 之用户注册","description":null}}},{"node":{"excerpt":"Express Web 之用户认证使用 Express 从头开始创建一个认证系统，包括注册、登录、认证功能。创建用户模型调用  方法，先检查用户  是否纯存在，如果存在就调用  方法更新用户信息，如果不存在就创建新的用户给密码加哈希安装 测试用户模型逻辑在 redis…","fields":{"slug":"/nodejs/express-auth/"},"frontmatter":{"date":"July 15, 2019","title":"Express Web 之用户认证","description":null}}},{"node":{"excerpt":"Express Web 之使用中间件校验表单在校验表单之前，首先要实现表单提交功能，然后使用中间件校验表单创建表单模型安装 Redis借助 Redis 和 ES…","fields":{"slug":"/nodejs/express-redis/"},"frontmatter":{"date":"July 14, 2019","title":"Express Web 之使用中间件校验表单","description":null}}},{"node":{"excerpt":"express 环境配置与模版渲染上一篇中我们创建了 express web 程序并定义了路由，本篇我们继续配置 express 环境以及使用模版渲染环境配置express 自带了一个极简的环境配置系统，由以下几个方法组成：app.set()app.get()app…","fields":{"slug":"/nodejs/express-view-render/"},"frontmatter":{"date":"July 13, 2019","title":"Express 环境配置与模版渲染","description":null}}},{"node":{"excerpt":"Node.js Web 之深入了解 express 框架express 是 Node.js 中最流行的 Web 框架，使用起来很简单但是功能强大。生成 express 程序 是一个 express 程序生成器，安装完成后可通过  查看其功能生成 shoutbox…","fields":{"slug":"/nodejs/nodejs-understand-express/"},"frontmatter":{"date":"July 12, 2019","title":"Node.js Web 之深入了解 express 框架","description":null}}},{"node":{"excerpt":"Node.js Web 之深入了解 Connect 中间件（二）上一篇中介绍了 Connect 中间件的工作机制，本篇继续介绍如何组合中间件、中间件的顺序以及创建可配置的中间件组合中间件Connect 中使用 use…","fields":{"slug":"/nodejs/nodejs-understand-connect-2/"},"frontmatter":{"date":"July 10, 2019","title":"Node.js Web 之深入了解 Connect 中间件（二）","description":null}}},{"node":{"excerpt":"Node.js Web 之深入了解 Connect 中间件（一）connect 是一个基于 HTTP 服务器的工具集，它提供了一种新的组织代码的方式来与请求和响应对象进行交互，称为中间件（书上原话）。通俗的来说，http…","fields":{"slug":"/nodejs/nodejs-understand-connect/"},"frontmatter":{"date":"July 09, 2019","title":"Node.js Web 之深入了解 Connect 中间件（一）","description":null}}},{"node":{"excerpt":"Node.js Web 框架 NestNest 是一个用来构建高效、可扩展的 Node.js Web 服务的框架，使用 Typescript 编写并结合了OOP (面向对象), FP (函数式), and FRP (响应式编程)等编程范式Nest…","fields":{"slug":"/nodejs/nodejs-web-framework-nest/"},"frontmatter":{"date":"July 07, 2019","title":"Node.js Web 框架 Nest","description":null}}},{"node":{"excerpt":"Node.js Web 框架之 SailsSails 是 Node.js 中最流行的 MVC 框架，类似于 Ruby on Rails。使用 Sails 可以轻松构建企业级的 Node.js Web 服务特点Sails 内置强大的 ROM…","fields":{"slug":"/nodejs/nodejs-web-framework-sails/"},"frontmatter":{"date":"July 06, 2019","title":"Node.js Web 框架之 Sails","description":null}}},{"node":{"excerpt":"Node.js Web 框架之 RestifyRestify Web 服务框架，专门针对构建语义正确的 RESTful Web 服务进行了优化，可以大规模地用于生产安装创建 Web 服务curl 访问添加路由Restify 路由类似于 Express，用 HTTP…","fields":{"slug":"/nodejs/nodejs-web-framework-restify/"},"frontmatter":{"date":"July 05, 2019","title":"Node.js Web 框架之 Restify","description":null}}},{"node":{"excerpt":"Node.js Web 框架比较当我们开始构建 Web 服务器时，首先要选择一个适合的框架，各个框架有不同的优缺点以及应用场景，在选择之前最好了解一下常见的框架，以做出最好的选择。接下来会简单介绍以下几个 Web 框架：KoaHapiSailsRestifyNestKoaKoa…","fields":{"slug":"/nodejs/nodejs-web-framework/"},"frontmatter":{"date":"July 03, 2019","title":"Node.js Web 框架比较","description":"对比了几种常见的 Node.js Web 框架的优缺点以及使用场景"}}},{"node":{"excerpt":"在 Node.js 中使用模版渲染Node.js 中模版引擎有很多种，这里使用简单易学的EJS模版什么是 EJSEJS 中的 E 是 “Embedded”，即嵌入式 Javascript，是一个使用纯 Javascript 生成 HTML 的模版语言安装 EJS…","fields":{"slug":"/nodejs/what-is-nodejs-ejs/"},"frontmatter":{"date":"July 02, 2019","title":"在 Node.js 中使用模版渲染","description":null}}},{"node":{"excerpt":"在 Node.js Web 程序中添加数据库Node.js 支持多种常用的数据库，比如 MySQL、PostgreSQL、Redis、SQLite 等，这里使用非常简单的、适合入门的 SQLite 数据库定义数据模型 API安装 sqlite3 模块连接到 sqlite…","fields":{"slug":"/nodejs/what-is-node-js-sql/"},"frontmatter":{"date":"July 01, 2019","title":"在 Node.js Web 程序中添加数据库","description":"在 Node.js 使用 SQLite 作为数据库系统，实现对数据的查询、存储和删除"}}},{"node":{"excerpt":"搭建 RESTful Web 服务本文内容：创建一个 Node.js Web 程序搭建 RESTful 服务了解 Node.js Web 程序的结构通常 Node.js 程序的目录如下：package.json —— 包含程序的依赖列表和程序的运行脚本public…","fields":{"slug":"/nodejs/what-is-node-web/"},"frontmatter":{"date":"June 30, 2019","title":"Node.js Web程序之搭建 RESTful Web 服务","description":"搭建 RESTful Web 服务"}}},{"node":{"excerpt":"Node.js…","fields":{"slug":"/nodejs/async-parallel/"},"frontmatter":{"date":"June 29, 2019","title":"Node.js异步控制流程之并行流程","description":null}}},{"node":{"excerpt":"Node.js的异步流程控制以及串行流程的实现在异步程序的执行过程中，有些任务可能随时发生，根程序中其他部分在做什么没关系，什么时候做这些任务都不会出问题。但是也有一些任务只能在某些特定的任务之前或之后执行Node.js…","fields":{"slug":"/nodejs/async-flow/"},"frontmatter":{"date":"June 28, 2019","title":"Node.js的异步流程控制以及串行流程的实现","description":"Node.js的异步流程控制以及串行流程的实现"}}},{"node":{"excerpt":"Node.js 异步编程之事件监听在 Node.js 中通过在事件发射器(EventEmitter)中绑定事件监听函数来处理重复性事件。一些 Node.js 中的重要组件比如 HTTP、TCP 以及流模块都被做成了事件发射器。也可以定义自己的事件发射器。使用 net…","fields":{"slug":"/nodejs/aysnc-program-event/"},"frontmatter":{"date":"June 27, 2019","title":"Node.js异步编程之事件监听","description":"在 Node.js 中通过在事件发射器(EventEmitter)中绑定事件监听函数来处理重复性事件。一些 Node.js 中的重要组件比如 HTTP、TCP 以及流模块都被做成了事件发射器。也可以定义自己的事件发射器。"}}},{"node":{"excerpt":"Node.js 中的异步编程Node.js 中异步编程是通过事件触发响应逻辑，在 Node.js…","fields":{"slug":"/nodejs/async-program/"},"frontmatter":{"date":"June 26, 2019","title":"Node.js中的异步编程以及回调的使用","description":"Node.js中的两种异步编程方式回调、事件监听的介绍以及回调的使用"}}},{"node":{"excerpt":"Node.js编程基础Node.js核心模块对Javascript有一点了解的都知道，Javascript没有与操作系统互交的能力，比如文件I/O、TCP/IP网络等，Node.js中的核心模块为Javascript添加了这些功能，使它可以用来编写服务端程序文件系统模块：fs…","fields":{"slug":"/nodejs/node-fundamentals/"},"frontmatter":{"date":"June 25, 2019","title":"Node.js编程基础","description":"Node.js的核心模块简介，Node.js中的代码组织方式"}}},{"node":{"excerpt":"Node.js 的安装以及 npm 包管理工具的使用Node.js 的版本长期支持版 LTS，18 个月的更新支持，12 个月的维护支持当前发布版 Current，6 个月的更新支持，单数版（比如 9，11）6 个月后不再支持，双数版（比如 10，12）…","fields":{"slug":"/nodejs/install-project/"},"frontmatter":{"date":"June 24, 2019","title":"Node.js的安装以及npm包管理工具的使用","description":"Node.js的安装以及npm包管理工具的使用"}}},{"node":{"excerpt":"Node.js简介Node.js 不是一门语言也不是框架，它只是基于 Google V8 引擎的 JavaScript 运行时环境，同时扩展了 JavaScript 功能，使之支持 io、fs 等只有语言才有的特性。非阻塞 I/O 模型Node.js使用事件驱动（event…","fields":{"slug":"/nodejs/whynodejs/"},"frontmatter":{"date":"June 23, 2019","title":"Node.js简介","description":"什么是Node.js以及Node.js的非阻塞I/O模型、事件驱动、应用场景"}}},{"node":{"excerpt":"如何使用Github Pages搭建个人博客Github Pages是GitHub的上的一个功能，可以用来存放静态的网页，适合存放项目文档、博客等，最大的优势是可以结合git对文档、博客等做版本管理GitHub Pages的使用在GitHub…","fields":{"slug":"/other/createblog/"},"frontmatter":{"date":"June 22, 2019","title":"搭建个人博客","description":"如何使用github pages搭建自己的博客系统"}}},{"node":{"excerpt":"LeetCode初级算法题—最大子序和最大子序和问题描述给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。示例:分析最简单的情况数组长度为1数组长度为2时连续子数组有-2,-2, 1,1,对比长度为1时，增加了两个连续子数组-…","fields":{"slug":"/leetcode/maxsubarray/"},"frontmatter":{"date":"June 21, 2019","title":"LeetCode算法题--最大子序和","description":"给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和"}}},{"node":{"excerpt":"索引类型与映射类型索引类型通过keyof(索引类型查询操作符)关键词,可以拿到类型的所有属性即索引K的类型为T所有的属性的联合类型，这时K等同于再通过in关键词来索引其中TP是索引访问操作符，通过像索引一样查询T中对应的类型。M的类型为, M…","fields":{"slug":"/typescript/maptype/"},"frontmatter":{"date":"June 20, 2019","title":"Typescript系列(六)：索引类型与映射类型","description":"本篇介绍typescript中的索引类型与映射类型"}}},{"node":{"excerpt":"泛型及泛型的约束泛型是什么先从一个例子开始：对于log函数有了类型限定后message参数只能为string类型，那么函数的通用性不够，比如要打印一个数字，会报类型错误，一种方式是将message设置为any类型此时log…","fields":{"slug":"/typescript/generic/"},"frontmatter":{"date":"June 19, 2019","title":"Typescript系列(五)：泛型及泛型的约束","description":"本篇介绍typescript中的泛型及泛型的约束"}}},{"node":{"excerpt":"类型别名类型别名就是给类型起一个新的名字，可以作用于任意类型包括基本类型、class类型、接口类型等，但是相对于接口来说不能用于继承给基本类型定义别名：那么name的类型依然是string…","fields":{"slug":"/typescript/types/"},"frontmatter":{"date":"June 18, 2019","title":"Typescript系列(四)：类型别名以及交叉类型、联合类型","description":"本篇介绍typescript中的类型别名及交叉类型、联合类型的定义使用"}}},{"node":{"excerpt":"本篇为Typescript系列的第三篇，主要内容为Typescript的接口的实现和继承。阅读之前需要了解Typescript的接口，可以参考之前的文章 Typescript(二)：接口上一篇介绍了Typescript（以下简称ts…","fields":{"slug":"/typescript/inherit-and-type/"},"frontmatter":{"date":"June 17, 2019","title":"Typescript(三)：接口的实现和继承","description":"本篇为Typescript系列的第三篇，主要内容为Typescript的接口的实现和继承"}}},{"node":{"excerpt":"-本篇文章主要介绍Typescript接口，阅读之前需要了解Typescript的基本类型，可参考Typescript(一)：基本类型一门语言中的类型出了基本类型之外大部分都是自定义的类型，Typescript（以下简称ts）中提供两种定义类型的方式type…","fields":{"slug":"/typescript/interface/"},"frontmatter":{"date":"June 16, 2019","title":"Typescript(二)：接口","description":null}}},{"node":{"excerpt":".CodeMirror { height: auto; }\n.CodeMirror.cm-s-inner { background-image: inherit; background-size: inherit; background-attachment: inherit…","fields":{"slug":"/typescript/"},"frontmatter":{"date":"June 15, 2019","title":"Typescript(一)：基本类型","description":"本篇是Typescript系列的第一篇，介绍了什么是Typescript、为什么要用Typescript以及Typescript的基本类型"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}