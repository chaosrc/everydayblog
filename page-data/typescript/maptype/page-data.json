{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/maptype/","webpackCompilationHash":"ec0913081d1c10987813","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"8beeb067-0423-5aaa-b5af-d2bde5041437","excerpt":"索引类型与映射类型索引类型通过keyof(索引类型查询操作符)关键词,可以拿到类型的所有属性即索引K的类型为T所有的属性的联合类型，这时K等同于再通过in关键词来索引其中TP是索引访问操作符，通过像索引一样查询T中对应的类型。M的类型为, M…","html":"<h2>索引类型与映射类型</h2>\n<h3>索引类型</h3>\n<p>通过keyof(<strong>索引类型查询操作符</strong>)关键词,可以拿到类型的所有属性即索引</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n    phone<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">K</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span>\n<span class=\"token comment\">// K为'name|age|phone'类型</span></code></pre></div>\n<p>K的类型为T所有的属性的联合类型<code class=\"language-text\">name|age|phone</code>，这时K等同于</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token constant\">K</span> <span class=\"token operator\">=</span> <span class=\"token string\">'name'</span><span class=\"token operator\">|</span><span class=\"token string\">'age'</span><span class=\"token operator\">|</span><span class=\"token string\">'phone'</span></code></pre></div>\n<p>再通过in关键词来索引</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token constant\">M</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// M: {name: string, age: string, phone: string}</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">M2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// M2: {name: string, age: number, phone: string}</span></code></pre></div>\n<p>其中T[P]是<strong>索引访问操作符</strong>，通过像索引一样查询T中对应的类型。M的类型为<code class=\"language-text\">{name: string, age: string, phone: string}</code>, M2的类型为<code class=\"language-text\">{name: string, age: number, phone: string}</code></p>\n<p>索引类型非常强大可以创作出各种映射类型</p>\n<h3>映射类型</h3>\n<p>经常会出现一种情况是在旧的类型中创建一种新的类型但是保持类型的属性名不变而类型变化</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> DateRange <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    start<span class=\"token punctuation\">:</span> Date\n    end<span class=\"token punctuation\">:</span> Date\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>DateRange中的start和end的类型为Date，但是传输给后端的时候需要转换成string类型，当然也可以手动创建一个新的类型</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> DateRangeText <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    start<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n    end<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样会造成代码冗余不易维护，这时就可以使用映射类型</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> MapType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> DateRangeText <span class=\"token operator\">=</span> MapType<span class=\"token operator\">&lt;</span>DateRange<span class=\"token operator\">></span>\n\n<span class=\"token comment\">// DateRangeText = {start: string, end: string }</span></code></pre></div>\n<p>这时DateRangeText中start和end都为string类型</p>\n<p>更灵活的方式时通过泛型指定Map后的类型</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> MapType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">P</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">P</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> DateRangeText <span class=\"token operator\">=</span> MapType<span class=\"token operator\">&lt;</span>DateRange<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span>\n<span class=\"token comment\">// DateRangeText = {start: string, end: string }</span>\n\n<span class=\"token keyword\">type</span> DateRangeNumber <span class=\"token operator\">=</span> MapType<span class=\"token operator\">&lt;</span>DateRange<span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span>\n<span class=\"token comment\">// DateRangeText = {start: number, end: number }</span></code></pre></div>\n<p>ts中内置了一些映射类型，比如：</p>\n<ul>\n<li>Readonly<T> 将类型每一个属性映射为只读属性</li>\n<li>Partial<T> 将类型每一个属性映射为可选属性</li>\n<li>Pick&#x3C;T, P> 从T中选取出P在中存在的的属性，其中P继承自keyof T</li>\n</ul>\n<p>以下时他们的实现方式及用法</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 定义Reaonly映射类型</span>\n<span class=\"token keyword\">type</span> Reaonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 将DateRange映射为readonly</span>\n<span class=\"token keyword\">let</span> readonlyDate<span class=\"token punctuation\">:</span> Readonly<span class=\"token operator\">&lt;</span>DateRange<span class=\"token operator\">></span>\n<span class=\"token comment\">//修改readonlyDate属性会报错，Cannot assign to 'start' because it is a read-only property.</span>\n<span class=\"token comment\">//readonlyData.start = new Date()</span>\n\n<span class=\"token comment\">// 定义Partial映射类型</span>\n<span class=\"token keyword\">type</span> Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// start和end都成为了可选属性</span>\n<span class=\"token keyword\">let</span> partialDate<span class=\"token punctuation\">:</span> Partial<span class=\"token operator\">&lt;</span>DateRange<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>start<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 定义Pick映射类型</span>\n<span class=\"token keyword\">type</span> Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">P</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> StartDate <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>DateRange<span class=\"token punctuation\">,</span> <span class=\"token string\">'start'</span><span class=\"token operator\">></span>\n<span class=\"token comment\">//StartDate的类型为： {start: Date}</span>\n\n<span class=\"token keyword\">type</span> EndDate <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>DateRange<span class=\"token punctuation\">,</span> <span class=\"token string\">'end'</span><span class=\"token operator\">></span>\n<span class=\"token comment\">//EndDate的类型为： {end: Date}</span></code></pre></div>\n<p>通过使用索引类型与映射类型，能够很大的提高代码的可复用性和可维护性</p>","frontmatter":{"title":"Typescript系列(六)：索引类型与映射类型","date":"June 20, 2019","description":"本篇介绍typescript中的索引类型与映射类型"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/typescript/maptype/","previous":{"fields":{"slug":"/typescript/generic/"},"frontmatter":{"title":"Typescript系列(五)：泛型及泛型的约束"}},"next":{"fields":{"slug":"/leetcode/maxsubarray/"},"frontmatter":{"title":"LeetCode算法题--最大子序和"}}}}}