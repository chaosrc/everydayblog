{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/maxsubarray/","webpackCompilationHash":"692ee2b79c26dd6d5a8a","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"101ec5c2-0090-5a80-913c-9b8b2926aec1","excerpt":"LeetCode初级算法题—最大子序和最大子序和问题描述给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。示例:分析最简单的情况数组长度为1数组长度为2时连续子数组有-2,-2, 1,1,对比长度为1时，增加了两个连续子数组-2, 1,1，这是和最大的子数组为…","html":"<p>LeetCode初级算法题—最大子序和</p>\n<h3><a href=\"https://leetcode.com/problems/maximum-subarray/description/\">最大子序和</a></h3>\n<h4>问题描述</h4>\n<blockquote>\n<p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n</blockquote>\n<h4>示例:</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入: [-2,1,-3,4,-1,2,1,-5,4],\n输出: 6\n解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</code></pre></div>\n<h4>分析</h4>\n<ul>\n<li>\n<p>最简单的情况数组长度为1</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入: [-2]\n输出: -2</code></pre></div>\n</li>\n<li>\n<p>数组长度为2时</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入: [-2, 1]</code></pre></div>\n<p>连续子数组有[-2],[-2, 1],[1],对比长度为1时，增加了两个连续子数组[-2, 1],[1]，这是和最大的子数组为[1]，其和为1</p>\n</li>\n<li>\n<p>数组长度为3时</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入: [-2, 1, -3]</code></pre></div>\n<p>连续子数组有[-2],[-2, 1],[1]，[-2, 1, -3], [1,-3],[-3], 新增子数组为[-2, 1, -3], [1,-3],[-3]，可见增加第i个输入数组时，新增的连续子数组为i个，新增的连续子数组为第i个数往前的包括i的所有连续数组，比如新增第4个值时如图：</p>\n</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/06/22/ZpAuHP.jpg\"></p>\n<p>最大的子数组和在原来的最大值和新增的子数组中产生</p>\n<h4>伪代码</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入[1, 2, 3, ..., n]\n使用递归的方式将数组的前1到n-1个进行递归\n拿到n-1数组的最大子序和(lastMax)\n计算n对比n-1新增的子数组中的最大值(curMax)\n返回lastMax与curMax中的最大值</code></pre></div>\n<h4>实现</h4>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">func maxSubArray(nums []int) int {\n    // 长度为1时直接返回\n    if len(nums) == 1 {\n\t\treturn nums[0]\n    }\n    // 获取第1个到第n-1个数组值\n\tvar lastArray = nums[:len(nums)-1]\n    // 递归计算第1个到第n-1个的最大值\n\tvar lastMax = maxSubArray(lastArray)\n\n    // 获取数组的最后一个值\n    var curVal = nums[len(nums)-1]\n    // 设置默认的新增子数组的最大值\n    var curMax = curVal\n    // 计算新增子数组的最大值\n\tfor i := len(lastArray) - 1; i &gt;= 0; i-- {\n\t\tcurMax = curMax + lastArray[i]\n\t\tif curMax &gt; curVal {\n\t\t\tcurVal = curMax\n\t\t}\n\t}\n\tif curVal &gt; lastMax {\n\t\treturn curVal\n\t}\n\treturn lastMax\n}</code></pre></div>\n<h4>执行结果</h4>\n<p><img src=\"https://s2.ax1x.com/2019/06/22/ZpAogH.png\"></p>\n<p>只是完成了功能的实现，对算法的性能、内存占用等没有考虑</p>","frontmatter":{"title":"LeetCode算法题--最大子序和","date":"June 21, 2019","description":"给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/typescript/maxsubarray/","previous":{"fields":{"slug":"/typescript/maptype/"},"frontmatter":{"title":"Typescript系列(六)：索引类型与映射类型"}},"next":{"fields":{"slug":"/other/createblog/"},"frontmatter":{"title":"搭建个人博客"}}}}}