{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/inherit-and-type/","webpackCompilationHash":"ec0913081d1c10987813","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"91f9b894-3ddd-5708-8b42-b03d8bc84213","excerpt":"本篇为Typescript系列的第三篇，主要内容为Typescript的接口的实现和继承。阅读之前需要了解Typescript的接口，可以参考之前的文章 Typescript(二)：接口上一篇介绍了Typescript（以下简称ts…","html":"<blockquote>\n<p>本篇为Typescript系列的第三篇，主要内容为Typescript的接口的实现和继承。阅读之前需要了解Typescript的接口，可以参考之前的文章 <a href=\"https://chaosrc.github.io/everydayblog/typescript/interface/\">Typescript(二)：接口</a></p>\n</blockquote>\n<p>上一篇介绍了Typescript（以下简称ts）中的接口的定义，本篇来讲如何来实现接口以及接口的继承</p>\n<h2>接口的实现</h2>\n<h4>使用字面量对象实现接口</h4>\n<p>由于ts是鸭子类型，所以只要字面量对象满足接口属性，就是对接口进行了实现，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Man</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n    <span class=\"token function-variable function\">eat</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">food<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> student<span class=\"token punctuation\">:</span> Man <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> \n    age<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> \n    <span class=\"token function-variable function\">eat</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">food</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>food<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>使用Class继承接口来实现</h4>\n<p>和Java中的接口类似，在class中使用implements关键词来对接口进行实现</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Man</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n    <span class=\"token function-variable function\">eat</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">food<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 如果Student类没有满足Man接口无法编译通过</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Man</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span>\n    age <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n    school <span class=\"token operator\">=</span> ‘’\n    <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">food<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>food<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>接口之间的继承</h4>\n<p>接口之间使用extends关键词可以相互继承，而且接口之间可以多重继承</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Man</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n    <span class=\"token function-variable function\">eat</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">food<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    child<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Man</span> <span class=\"token punctuation\">{</span>\n    school<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Teacher 同时拥有Parent 和 Man的属性</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Teacher</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">,</span> Man <span class=\"token punctuation\">{</span>\n    teach<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>接口继承类</h4>\n<p>对于一些使用过Java的同学来说，可能会决定奇怪，接口抽象程度其实更高，接口如何继承类？其实ts中接口继承类是只是继承了类的属性而不是其实现，可以看做是于把类的属性提取出来形成一个接口，然后接口之间进行继承。因为类可以创建出类型所以类也可以当作接口来使用</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 先定义一个类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Man</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span>\n    age <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n    <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">food<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>food<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Student接口继承类Man，Student拥有了Man的属性 </span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Man</span> <span class=\"token punctuation\">{</span>\n    school<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>总结</h3>\n<p>接口是ts类型中非常重要的内容，是ts对js类型做出的扩展和抽象，在js基础上构建出类型系统，同时又有接口之间的多重继承以及从类创建接口这样的灵活性</p>","frontmatter":{"title":"Typescript(三)：接口的实现和继承","date":"June 17, 2019","description":"本篇为Typescript系列的第三篇，主要内容为Typescript的接口的实现和继承"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/typescript/inherit-and-type/","previous":{"fields":{"slug":"/typescript/interface/"},"frontmatter":{"title":"Typescript(二)：接口"}},"next":{"fields":{"slug":"/typescript/types/"},"frontmatter":{"title":"Typescript系列(四)：类型别名以及交叉类型、联合类型"}}}}}