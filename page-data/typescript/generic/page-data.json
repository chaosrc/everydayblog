{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/generic/","webpackCompilationHash":"88278c0eb8d4f0c0f64c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"fa23fad5-1f74-5a60-9e33-e1bf6fe6df36","excerpt":"泛型及泛型的约束泛型是什么先从一个例子开始：对于log函数有了类型限定后message参数只能为string类型，那么函数的通用性不够，比如要打印一个数字，会报类型错误，一种方式是将message设置为any类型此时log函数可以可以传人任意值，虽然解决了通用性问题，但是同时也丢失了类型信息，比如需要打印message…","html":"<h1>泛型及泛型的约束</h1>\n<h3>泛型是什么</h3>\n<p>先从一个例子开始：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>对于log函数有了类型限定后message参数只能为string类型，那么函数的通用性不够，比如要打印一个数字<code class=\"language-text\">log(123)</code>，会报类型错误，一种方式是将message设置为any类型</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>此时log函数可以可以传人任意值，虽然解决了通用性问题，但是同时也丢失了类型信息，比如需要打印message的长度</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>message可能没有length属性，甚至如果message为null，在运行的时候会直接报错，那么有么有一种更好的方式来解决这个问题呢？</p>\n<h4>ts中泛型的定义</h4>\n<p>在ts中可以使用类型变量来定义泛型</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> map<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span>\n    <span class=\"token comment\">// 做一些操作</span>\n    <span class=\"token keyword\">return</span> a\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> map<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> map<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// b的类型为string</span>\n<span class=\"token comment\">// b的类型为number</span></code></pre></div>\n<p>其中T称作类型变量，是一种特殊的变量，只能用来表示类型不能表示值，在使用map方法的时候，b的类型为string,返回值c为number类型</p>\n<p>如果不使用泛型</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span>\n    <span class=\"token comment\">// 做一些操作</span>\n    <span class=\"token keyword\">return</span> a\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// b和c都为any</span></code></pre></div>\n<p>b和c的都为any类型</p>\n<p>在很多情况下ts编译器可以自动推导类型, 比如T的类型可以通过参数o推导</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> map<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span>\n    <span class=\"token comment\">// 做一些操作</span>\n    <span class=\"token keyword\">return</span> a\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// b的类型为string</span>\n<span class=\"token comment\">// b的类型为number</span></code></pre></div>\n<p>当编译器可以推导出类型的时候可以省略对类型变量的指定</p>\n<p>回到最初的问题，使用泛型定义log函数</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> log<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">//error: Property 'length' does not exist on type 'T'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这时候编译器会报错message中没有length属性。在定义log方法的时候编译器依然无非确定类型T中是否有length属性，于是就有了泛型的约束</p>\n<h4>泛型的约束</h4>\n<p>通过extends关键字来对泛型实现约束，extends后面的类型就是对泛型的约束，泛型在没有约束的情况下可以是任意的类型，通过约束后使得泛型必须是满足约束的类型</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Length <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    length<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> log<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Length</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'222'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// error: Argument of type '111' is not assignable to parameter of type 'Length'.</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>length<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这是由于number类型没有length属性所以会报错。只要满足Length类型的都能使用log方法</p>\n<p>ts中泛型使得类型有了更大的灵活性和可扩展性，同时能够保留类型信息</p>","frontmatter":{"title":"Typescript系列(五)：泛型及泛型的约束","date":"June 19, 2019","description":"本篇介绍typescript中的泛型及泛型的约束"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/typescript/generic/","previous":{"fields":{"slug":"/typescript/types/"},"frontmatter":{"title":"Typescript系列(四)：类型别名以及交叉类型、联合类型"}},"next":{"fields":{"slug":"/typescript/maptype/"},"frontmatter":{"title":"Typescript系列(六)：索引类型与映射类型"}}}}}