{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/interface/","webpackCompilationHash":"eb9b7fa042d48e7c3b06","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"66110e3c-5860-5a3c-80da-55954eb4c051","excerpt":"-本篇文章主要介绍Typescript接口，阅读之前需要了解Typescript的基本类型，可参考Typescript(一)：基本类型一门语言中的类型出了基本类型之外大部分都是自定义的类型，Typescript（以下简称ts）中提供两种定义类型的方式type（类型别名）和interface（接口）。ts…","html":"<p>-</p>\n<blockquote>\n<p>本篇文章主要介绍Typescript接口，阅读之前需要了解Typescript的基本类型，可参考<a href=\"https://chaosrc.github.io/everydayblog/typescript/\">Typescript(一)：基本类型</a></p>\n</blockquote>\n<p>一门语言中的类型出了基本类型之外大部分都是自定义的类型，Typescript（以下简称ts）中提供两种定义类型的方式type（类型别名）和interface（接口）。[ts文档][https://www.typescriptlang.org/docs/handbook/interfaces.html]中是这样介绍的’TypeScript的核心原则之一是对值所具有的结构进行类型检查’，也就是鸭子类型。</p>\n<h2>interface</h2>\n<p>如果了解过其他的一些静态语言比如Java里面也有interface，和ts中的interface比较相似，在js里面的对象没有限制可以动态的添加任意的属性和值，interface的作用就是对对象做出限制，在编译时给出提示不能随意的添加属性，先看一个简单的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 定义接口</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Rect</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n    y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 指定变量类型</span>\n<span class=\"token keyword\">let</span> rect<span class=\"token punctuation\">:</span> Rect <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 如果类型不满足也会报错</span>\n<span class=\"token keyword\">let</span> rect2<span class=\"token punctuation\">:</span> Rect <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// Property 'y' is missing in type '{ x: number; }' but required in type 'Rect'.</span>\n\nrect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nrect<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">// error: Property 'z' does not exist on type 'Position'</span></code></pre></div>\n<h4>可选属性</h4>\n<p>interface对对象做出了限制，默认interface中的属性是必须的，但在使用的过程中时某个是配必须的，ts中可设置某个属性为可选属性,如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 可选属性是在属性后面加？号</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Rect</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n    y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n    z<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> rect<span class=\"token punctuation\">:</span> Rect <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\nrect<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">let</span> rect2<span class=\"token punctuation\">:</span> Rect <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>可选属性给了ts类型更多的灵活性</p>\n<h4>只读属性</h4>\n<p>在一些情况下不希望interface里面的属性的值在申明后被修改，这时就可以用到只读属性了</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 在属性前面加readonly关键词设置只读属性</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">readonly</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> friend<span class=\"token punctuation\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">}</span>\nfriend<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'小张'</span> <span class=\"token comment\">//error: Cannot assign to 'name' because it is a read-only</span></code></pre></div>\n<h4>用interface来定义函数</h4>\n<p>interface除了能给对象定义类型，也可以定义函数的类型即函数的参数、返回值</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 定义</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Sum</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 括号里面函数的参数，冒号后面为函数的返回值的类型</span>\n    <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 使用</span>\n<span class=\"token keyword\">let</span> sum<span class=\"token punctuation\">:</span> Sum\n\n<span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> y <span class=\"token comment\">// ts会做类型推断，x、y多会认为是number类型</span>\n\n<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//error: Argument of type '\"1\"' is not assignable to parameter of type 'number'.</span></code></pre></div>\n<h4>可索引类型</h4>\n<p>在js中对象可以动态添加任意多的属性，如果在ts中每个属性都先申明才能使用，那么就失去了js动态类型的灵活性，而可索引类型给予了动态添加属性的能力同时又有类型限制</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Map</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> map<span class=\"token punctuation\">:</span> Map <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// map 中可以随意添加属性，但是类型必须是string</span>\nmap<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span> <span class=\"token comment\">//error: Type '1' is not assignable to type 'string'.ts</span></code></pre></div>\n<p>interface 的基本介绍就到这里了，下一步写interface的实现和继承以及类型别名</p>","frontmatter":{"title":"Typescript(二)：接口","date":"June 16, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/typescript/interface/","previous":{"fields":{"slug":"/typescript/"},"frontmatter":{"title":"Typescript(一)：基本类型"}},"next":{"fields":{"slug":"/typescript/inherit-and-type/"},"frontmatter":{"title":"Typescript(三)：接口的实现和继承"}}}}}