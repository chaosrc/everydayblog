{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/types/","webpackCompilationHash":"692ee2b79c26dd6d5a8a","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"d7e05cd1-d322-5309-828b-23d977977832","excerpt":"类型别名类型别名就是给类型起一个新的名字，可以作用于任意类型包括基本类型、class类型、接口类型等，但是相对于接口来说不能用于继承给基本类型定义别名：那么name的类型依然是string…","html":"<h3>类型别名</h3>\n<p>类型别名就是给类型起一个新的名字，可以作用于任意类型包括基本类型、class类型、接口类型等，但是相对于接口来说不能用于继承</p>\n<h4>给基本类型定义别名：</h4>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Name <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span>\n<span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span></code></pre></div>\n<p>那么name的类型依然是string，单独给基本类型定义别名一般没有什么意义，最常用的是给类、接口定义别名，定义别名的意义在于可以生成交叉类型和联合类型</p>\n<h4>给接口定义别名：</h4>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> Pupil <span class=\"token operator\">=</span> Student</code></pre></div>\n<p>Student和Pupil会被当做同一个类型</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> student<span class=\"token punctuation\">:</span> Student <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> pupil<span class=\"token punctuation\">:</span> Pupil <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">}</span>\npupil <span class=\"token operator\">=</span> student</code></pre></div>\n<p>type还可以像接口一样进行定义</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Pupil <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>相对于定义了一个匿名的接口再给它定义一个别名，右边属性的定义完全和接口一致</p>\n<h4>交叉类型</h4>\n<p>交叉类型可以把多个类型合并为一个类型，类似于接口中的多重继承。交叉类型是使用&#x26;符号链接多个类型</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">B</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">ABC</span> <span class=\"token operator\">=</span> <span class=\"token constant\">A</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">B</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">C</span></code></pre></div>\n<p>ABC中同时拥有a、b、c三个属性\n由于js的灵活性，经常会出现这种需要合并多个类型的情况</p>\n<h4>联合类型</h4>\n<p>如果说交叉类型是and的关系，那么联合类型就是或的关系。联合类型使用|符合链接多个类型，联合的后类型可以是其中几个类型中某的一个。同样由于js的灵活性，一个方法中的某个参数可能会是多种类型，这是就需要用到联合类型，而且这种场景非常常见。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Value <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">:</span> Value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span>length\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>count函数中的value即可以是number类型也可以是number数组。</p>\n<p>交叉类型和联合类型在ts中的使用非常常见，对比接口的继承有很大的灵活性</p>","frontmatter":{"title":"Typescript系列(四)：类型别名以及交叉类型、联合类型","date":"June 18, 2019","description":"本篇介绍typescript中的类型别名及交叉类型、联合类型的定义使用"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/typescript/types/","previous":{"fields":{"slug":"/typescript/inherit-and-type/"},"frontmatter":{"title":"Typescript(三)：接口的实现和继承"}},"next":{"fields":{"slug":"/typescript/generic/"},"frontmatter":{"title":"Typescript系列(五)：泛型及泛型的约束"}}}}}