{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/types-100/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"cc793daf-899b-5438-821e-41d26fd6e465","excerpt":"Typescript 及其基本类型Typescript 是 Javascript 的超集，可以编译成纯 Javascript。Typescript 中的 type 表示指类型，在 Javascript 语言的基础上增加了可选的类型系统、类以及接口等静态语言特性。使用 Typescript…","html":"<h2>Typescript 及其基本类型</h2>\n<p>Typescript 是 Javascript 的超集，可以编译成纯 Javascript。Typescript 中的 type 表示指类型，在 Javascript 语言的基础上增加了可选的类型系统、类以及接口等静态语言特性。</p>\n<p>使用 Typescript 类型系统带来的静态语言特性，结合 IDE 类型推断、代码提示能够大大提高开发效率，可以对代码做静态检查。由于其完全兼容 Javascript 语法，可以逐步添加类型，进行平滑迁移，甚至与 Javascript 代码共存。Typescript 已经逐渐成为前端开发的趋势</p>\n<p>Typescript 与 Javascript 的关系</p>\n<img src=\"https://raw.githubusercontent.com/basarat/typescript-book/master/images/venn.png\" style=\"width:350px;text-algin:center\">\n<h4>Typescript 基础类型</h4>\n<p>Typescript 支持与 Javascript 相同的数据类型，同时提供了一些额外的类型</p>\n<ul>\n<li>\n<p>布尔值\n最基本的数据类型值为 true/false，和 Javascript 一样用 boolean 类型表示</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> isRight<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></code></pre></div>\n</li>\n<li>\n<p>数值\n和 Javascript 一样，所以数值都为浮点数，用 number 类型表示</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 十进制</span>\n<span class=\"token keyword\">let</span> dec <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n<span class=\"token comment\">// 十六进制</span>\n<span class=\"token keyword\">let</span> hex <span class=\"token operator\">=</span> <span class=\"token number\">0x1dbdb1</span>\n<span class=\"token comment\">// 八进制</span>\n<span class=\"token keyword\">let</span> oct <span class=\"token operator\">=</span> <span class=\"token number\">0o677</span>\n<span class=\"token comment\">// 二进制</span>\n<span class=\"token keyword\">let</span> bin <span class=\"token operator\">=</span> <span class=\"token number\">0b010101</span></code></pre></div>\n<ul>\n<li>字符串\n和 Javascript 中的一样表示文本数据，可用单引号或双引号表示，其类型为 string</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'bob'</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">\"sam\"</span></code></pre></div>\n<ul>\n<li>\n<p>数组\n数组有两种定义方式，一种是在元素后面加 <code class=\"language-text\">[]</code>，表示由此元素组成的数组</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> list<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> names<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sam'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>另一种是使用数组泛型</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> list<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> names<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sam'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>\n<p>元组 Tuple\n元组类型可以用来表示一个已知数量和类型的数组，数组元素的类型可以不一样</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> foo<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bob'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// 如果类型不匹配则会报错</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'bob'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 报错，类型不匹配</span></code></pre></div>\n</li>\n<li>\n<p>any\n有时候在编程阶段还不知道变量的类型，有可能是第三方库传人或者用户输入的动态内容，这时我们不希望编译器对此进行类型检查，那么可以用 any 类型来表示</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">'bob'</span>\nname <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\nname <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></code></pre></div>\n<ul>\n<li>void\nvoid 与 any 相反，它表示没有任何值，一般在函数的返回为空时用 void 表示。void 一般不用于变量的类型声明</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">postUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>null 和 undefined</li>\n</ul>\n<p>在 Typescript 中，null 和 undefined 值，分别对应两种类型 null、undefined。默认情况下 null 和 undefined 是所有类型的子类型，比如可以将 null 或 undefined 赋值给 number 类型</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nage <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\nage <span class=\"token operator\">=</span> undefined</code></pre></div>\n<ul>\n<li>never</li>\n</ul>\n<p>neber 类型表示永不存在的值的类型，比如抛出异常或者没有返回值的函数表达式</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 抛出异常</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 没有返回值</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>never 类型是任何类型的子类型，可以赋值给任何类型, 但是没有类型是 never 的子类型，即没有类型可以赋值给never类型（除了never本身之外）</p>\n<ul>\n<li>object</li>\n</ul>\n<p>object 表示非原始类型，即除了 boolen, number, string, symbol, null 和 undefined 之外的类型</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> obj<span class=\"token punctuation\">:</span> object\nobj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">'sam'</span><span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Typescript 及其基本类型","date":"September 23, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/typescript/types-100/","previous":{"fields":{"slug":"/sql/sql-views-1/"},"frontmatter":{"title":"使用视图（一）"}},"next":{"fields":{"slug":"/sql/sql-create-table-2/"},"frontmatter":{"title":"创建和操控表（二）"}}}}}