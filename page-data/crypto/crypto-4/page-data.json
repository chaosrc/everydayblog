{"componentChunkName":"component---src-templates-blog-post-js","path":"/crypto/crypto-4/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"8927b545-a40b-524f-bbc4-ecd28f6bd486","excerpt":"现代密码学：古典密码及其分析（二）单字母替换位移密码将每个明文字符映射成不同的的密文字符，但是每个字符都是做相同的位移。单字母替换的想法是对每个明文字符做不同的映射，为了能够解密必须对每个字符做一对一的映射。key 空间的组成是字母表的所有排列方式，因此 key 空间的大小是 26!(接近 288)对这种加密的 key…","html":"<h2>现代密码学：古典密码及其分析（二）</h2>\n<h4>单字母替换</h4>\n<p>位移密码将每个明文字符映射成不同的的密文字符，但是每个字符都是做相同的位移。单字母替换的想法是对每个明文字符做不同的映射，为了能够解密必须对每个字符做一对一的映射。key 空间的组成是字母表的所有排列方式，因此 key 空间的大小是 26!(接近 2<sup>88</sup>)</p>\n<p>对这种加密的 key 空间进行暴力破解，即使使用现在最强的计算机也需要发费大于几十年的时间。但是也不意味着这个密码是安全的，</p>\n<p>假设英文文本被加密，那么就有可能利用英文的统计原则攻击单字母替换。在对这个密码的攻击中下面两个属性：</p>\n<ol>\n<li>在本算法中每个字符的映射是固定的，所以如果 e 映射为 D，那么明文中每一个出现 e 的地方在密文中都为 D。</li>\n<li>在英语中每个独立字母的分布是已知的。因此不同的文本中每个字母的平均统计频率是不变的，文本越长平均统计频率越接近。</li>\n</ol>\n<p>通过列出密文的可能分布，比较英文文本字母的可能分布来进行攻击。首先对加密文本的每个字母出现频率进行统计，然后基于统计频率定义的 key 映射做一个初始猜测。除非加密文本很长，否则有些猜测可能是错误。但是，即使对很短的加密文本，这种猜测也足够快速解密。</p>\n<p>英语中字母的平均出现频率</p>\n<p><img src=\"https://s2.ax1x.com/2020/01/04/ldG8SS.png\" alt=\"ldG8SS.png\"></p>\n<p>通过统计频率对下面的密文进行解密</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">JGRMQOYGHMVBJWRWQFPWHGFFDQGFPFZRKBEEBJIZQQOCIBZKLFAFGQVFZFWWE OGWOPFGFHWOLPHLRLOLFDMFGQWBLWBWQOLKFWBYLBLYLFSFLJGRMQBOLWJVFP FWQVHQWFFPQOQVFPQOCFPOGFWFJIGFQVHLHLROQVFGWJVFPFOLFHGQVQVFILE OGQILHQFQGIQVVOSFAFGBWQVHQWIJVWJVFPFWHGFIWIHZZRQGBABHZQOCGFHX</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"unicode\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">letterCounter</span><span class=\"token punctuation\">(</span>text <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">rune</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\tcount <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">rune</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> text <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> unicode<span class=\"token punctuation\">.</span><span class=\"token function\">IsLetter</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tcount<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> count\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ttext <span class=\"token operator\">:=</span> <span class=\"token string\">`\n\tJGRMQOYGHMVBJWRWQFPWHGFFDQGFPFZRKBEEBJIZQQOCIBZKLFAFGQVFZFWWE \n\tOGWOPFGFHWOLPHLRLOLFDMFGQWBLWBWQOLKFWBYLBLYLFSFLJGRMQBOLWJVFP \n\tFWQVHQWFFPQOQVFPQOCFPOGFWFJIGFQVHLHLROQVFGWJVFPFOLFHGQVQVFILE \n\tOGQILHQFQGIQVVOSFAFGBWQVHQWIJVWJVFPFWHGFIWIHZZRQGBABHZQOCGFHX`</span>\n\n\tcounter <span class=\"token operator\">:=</span> <span class=\"token function\">letterCounter</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\n\n\t<span class=\"token keyword\">for</span> c<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> counter <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c, %d\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>输出统计结果</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">go run <span class=\"token keyword\">.</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> -k 2 -n -r\nF, 37\nQ, 26\nW, 21\nG, 19\nL, 17\nO, 16\nV, 15\nH, 14\nB, 12\nP, 10\nJ, 9\nI, 9\nZ, 7\nR, 7\nM, 4\nE, 4\nY, 3\nK, 3\nC, 3\nA, 3\nS, 2\nD, 2\nX, 1</code></pre></div>","frontmatter":{"title":"现代密码学：古典密码及其分析（二）","date":"January 03, 2020","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/crypto/crypto-4/","previous":{"fields":{"slug":"/crypto/crypto-3/"},"frontmatter":{"title":"现代密码学：古典密码及其分析（一）"}},"next":{"fields":{"slug":"/crypto/crypto-5/"},"frontmatter":{"title":"现代密码学：古典密码及其分析（三）"}}}}}