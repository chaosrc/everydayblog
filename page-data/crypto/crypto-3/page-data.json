{"componentChunkName":"component---src-templates-blog-post-js","path":"/crypto/crypto-3/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"a999d972-f88d-5b3b-ae73-0a4ba825fdef","excerpt":"古典密码及其分析（一）凯撒密码凯撒密码是最古老的密码之一。凯撒密码通过将字母表中的字母旋转 3 个位置来加密，用 D 替代 a，E 替代 b，依次类推，在字母表的结尾字母环绕，所以 A 替代 x，B 替代 y，C 替代 z。位移密码和充分的 key…","html":"<h2>古典密码及其分析（一）</h2>\n<h4>凯撒密码</h4>\n<p>凯撒密码是最古老的密码之一。凯撒密码通过将字母表中的字母旋转 3 个位置来加密，用 D 替代 a，E 替代 b，依次类推，在字母表的结尾字母环绕，所以 A 替代 x，B 替代 y，C 替代 z。</p>\n<h3>位移密码和充分的 key 空间原则</h3>\n<p>凯撒密码面临的问题是，加密总是以相同的方法进行，而且没有私密 key。位移密码和凯撒密码相似，但是使用一个私密的 key。位移加密使用一个 0 到 25 的数字 k 做为 key，字母位移 k 个位置。用加密语法来描述为：算法 Gen 生成一个 {0,…,25} 的随机数字；Enc 算法使用 k 和原始文本，将文本每个字母向前位移 k 个位置；Dec 算法使用 k 和加密文本，对加密文本向后移动 k 个位置。</p>\n<p>使用更数学一点的描述为：使用 k 和 字符 m<sub>i</sub> 生成加密字符[(c<sub>i</sub>+k) mod 26]，解密一个被加密的文本字符定义为 [(c<sub>i</sub>-k) mod 26]。</p>\n<p>位移加密并不安全，因为一共只有 26 种可能的 key，很容易的通过尝试所有 key 来进行破解。这种攻击也被称作暴力攻击或者穷举搜索。这给我们带来的一个重要的原则“充分的 key 空间原则”（sufficient key space principle）:</p>\n<blockquote>\n<p>任何安全的加密方案必须有一个不能被轻易穷举的 key 空间</p>\n</blockquote>\n<p>现在一个安全的 key 空间数量至少为 2<sup>60</sup> 或者 2<sup>70</sup> </p>\n<p>简单的代码实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"unicode\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> Caesar <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tk <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Caesar<span class=\"token punctuation\">)</span> <span class=\"token function\">Enc</span><span class=\"token punctuation\">(</span>str <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> re <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">rune</span>\n\t<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> str <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> unicode<span class=\"token punctuation\">.</span><span class=\"token function\">IsLetter</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\ts <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">-</span>a<span class=\"token operator\">+</span><span class=\"token function\">rune</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">26</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tre <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Caesar<span class=\"token punctuation\">)</span> <span class=\"token function\">Dec</span><span class=\"token punctuation\">(</span>str <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> re <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">rune</span>\n\t<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> str <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> unicode<span class=\"token punctuation\">.</span><span class=\"token function\">IsLetter</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\ts <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">-</span>a<span class=\"token operator\">-</span><span class=\"token function\">rune</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">26</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tre <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewCaesar</span><span class=\"token punctuation\">(</span>k <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> Caesar <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> Caesar<span class=\"token punctuation\">{</span>k<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tcaesar <span class=\"token operator\">:=</span> <span class=\"token function\">NewCaesar</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\ttext <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello world\"</span>\n\ten <span class=\"token operator\">:=</span> caesar<span class=\"token punctuation\">.</span><span class=\"token function\">Enc</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"plaintext:  \"</span><span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key:        \"</span><span class=\"token punctuation\">,</span> caesar<span class=\"token punctuation\">.</span>k<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ciphertext: \"</span><span class=\"token punctuation\">,</span> en<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"decrypt:    \"</span><span class=\"token punctuation\">,</span> caesar<span class=\"token punctuation\">.</span><span class=\"token function\">Dec</span><span class=\"token punctuation\">(</span>en<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>输出</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ go run <span class=\"token keyword\">.</span>\nplaintext:   hello world\nkey:         3\nciphertext:  khoor zruog\ndecrypt:     hello world</code></pre></div>","frontmatter":{"title":"现代密码学：古典密码及其分析（一）","date":"January 02, 2020","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/crypto/crypto-3/","previous":{"fields":{"slug":"/crypto/crypto-2/"},"frontmatter":{"title":"现代密码学：简介（二）"}},"next":{"fields":{"slug":"/go-rpc/go-rpc-5/"},"frontmatter":{"title":"Go RPC (五)"}}}}}