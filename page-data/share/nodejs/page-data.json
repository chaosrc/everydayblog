{"componentChunkName":"component---src-templates-blog-post-js","path":"/share/nodejs/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"c11aa91f-be05-5139-bac3-4b4b24956010","excerpt":"Node.js 简介以及使用起源Ryan Dahl 2009 年创建2012 年离开 Node.js 社区, 2018年创建 DenoNode.js 组成\n\n\n\nV8\n由 Google 为 Chrome 开发的Javascript 引擎，核心工程师 Lars Bak 之前在 Sun公司研究Java…","html":"<h2>Node.js 简介以及使用</h2>\n<h4>起源</h4>\n<p>Ryan Dahl 2009 年创建</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/b2/Ryan_Dahl.jpg/440px-Ryan_Dahl.jpg\"></p>\n<p>2012 年离开 Node.js 社区, 2018年创建 <a href=\"https://github.com/denoland/deno\">Deno</a></p>\n<h4>Node.js 组成</h4>\n<p><img src=\"https://image.slidesharecdn.com/nodejs-140507132306-phpapp02/95/nodejs-code-tracing-2-638.jpg?cb=1427946166\">\n<span style=\"display: none\">\n<img src=\"https://www.researchgate.net/profile/Rainer_Poeschl/publication/282847216/figure/fig5/AS:606912362061826@1521710591440/Architecture-of-Nodejs.png\">\n<img src=\"https://imelgrat.me/wp-content/uploads/2018/12/Node-Application-Runtime.png\">\n</span></p>\n<ul>\n<li>V8\n由 Google 为 Chrome 开发的Javascript 引擎，核心工程师 Lars Bak 之前在 Sun公司研究Java 虚拟机，产出了 HotSpot </li>\n</ul>\n<p>Javascript 引擎的执行速度</p>\n<p><img src=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/02/01-01-perf_graph05.png\"></p>\n<p>V8特点</p>\n<ol>\n<li>JIT（Just-In-Time）编译，也就是即时编译，通过监听高频运行的代码，保存编译其结果进行优化，大大提供 Javascript 的运行速度 （后来的 Javascript 都支持了 JIT） </li>\n<li>垃圾回收， V8的垃圾回收借鉴了 Java VM 的精确垃圾回收管理，垃圾回收的效率远远高于其他引擎</li>\n<li>其他优化，内联缓存提高属性访问、隐藏类对动态添加类属性的优化</li>\n<li>遵循 ECMAScript，紧根 ECMAScript 最新标准，支持最新的语法</li>\n</ol>\n<ul>\n<li>libuv\n<img src=\"https://raw.githubusercontent.com/libuv/libuv/master/img/banner.png\">\nlibuv 是一个专注与异步 I/O 的跨平台库，由 Ryan Dahl 为 Node.js 编写，libuv 由事件循环和线程池组成，负责所有 I/O 任务的分发与，也用于Luvit, Julia, pyuv等平台。</li>\n</ul>\n<h4>Node.js 的特点</h4>\n<ul>\n<li>非阻塞异步 I/O 模型</li>\n<li>事件驱动</li>\n</ul>\n<p>比如读取文件</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./package.json'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>回调的问题，回调地狱</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">step1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span>value2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">step4</span><span class=\"token punctuation\">(</span>value3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Do something with value4</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>使用 async/await</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> value1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> value2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> value3 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span>value2<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> value4 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span>value3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用事件监听</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 文件index.js</span>\n\n<span class=\"token comment\">// 引入net模块</span>\n<span class=\"token keyword\">const</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"net\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//监听data事件</span>\n  socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> handleDataReceive<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">//处理data事件的方法</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleDataReceive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`server: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8801</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>socket 是一个事件发射器，当用户发送数据时会触发socket的data事件，在data事件中注册了函数handleDataReceive来处理data事件</p>\n<h4>Node.js 应用场景</h4>\n<ul>\n<li>跨平台桌面应用：使用electron/nw.js等框架, Node.js与操作系统互交提供统一的api，浏览器作为UI展示</li>\n<li>前端工程化：React\\Vue\\Angular等主流框架使用的webpack/gulp等打包编译</li>\n<li>打包工具，使用Node.js构建\nWeb应用开发：io密集型web应用，为前端提供Api接口</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/i5ting/How-to-learn-node-correctly/master/media/14912707129964/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-17%2007.25.05.png\"></p>\n<h4>使用 Node.js</h4>\n<p>创建一个 index.js 文件</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello node'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>运行 node index.js 运行</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node index.js\n\n$ <span class=\"token function\">curl</span> http://localhost:8080\nhello node</code></pre></div>\n<ul>\n<li>安装依赖</li>\n</ul>\n<p>Node.js 中自带包管理工具 npm</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> -v\n6.9.0</code></pre></div>\n<p>安装 express</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$ npm install express</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">8800</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world \\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Server start at localhost:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> start\nServer start at localhost:8800</code></pre></div>","frontmatter":{"title":"Node.js 分享","date":"August 04, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/share/nodejs/","previous":{"fields":{"slug":"/deploy/nodejs-cluster/"},"frontmatter":{"title":"Node.js 的 集群（Cluster） 和 线程（Worker Threads）"}},"next":{"fields":{"slug":"/command/command-1/"},"frontmatter":{"title":"使用 Node.js 编写命令行程序（—）"}}}}}