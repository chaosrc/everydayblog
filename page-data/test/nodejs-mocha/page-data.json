{"componentChunkName":"component---src-templates-blog-post-js","path":"/test/nodejs-mocha/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"640d6610-1016-5f07-90a8-81e7c5f44142","excerpt":"Node.js 测试框架 MochaMocha 是一个功能丰富的 Javascript 测试框架，能够运行在 Node.js 和浏览器中，能够简单方便的对异步流程进行测试 安装 Mocha创建 test 目录，在 package.json 里面添加执行脚步执行  mocha 会默认运行 test…","html":"<h2>Node.js 测试框架 Mocha</h2>\n<p>Mocha 是一个功能丰富的 Javascript 测试框架，能够运行在 Node.js 和浏览器中，能够简单方便的对异步流程进行测试 <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<h4>安装 Mocha</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> mocha</code></pre></div>\n<p>创建 test 目录，在 package.json 里面添加执行脚步</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mocha\"</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>执行 <code class=\"language-text\">npm test</code> mocha 会默认运行 test 目录下的所有测试</p>\n<h4>使用 Mocha 进行测试</h4>\n<p>Mocha 默认使用 BDD 风格的 API，提供了<code class=\"language-text\">descript()</code>, <code class=\"language-text\">it()</code>、<code class=\"language-text\">before()</code>、 <code class=\"language-text\">after()</code>、<code class=\"language-text\">beforeEach</code> 和 <code class=\"language-text\">afterEach</code> 等函数</p>\n<p>Mocha 测试的基本结构</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> assert <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'assert'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Test todo model'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should be true'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        assert<span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'run test'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">describe()</code> 方法用来定义一个测试集，第一参数为测试集的标题，第二个参数为回调函数里面用来运行具体的测试案例</p>\n<p><code class=\"language-text\">it()</code> 方法用来定义一个测试案例，第一个参数为测试案例的标题，第二个参数为回调函数，里面运行具体的测试代码</p>\n<h4>钩子函数</h4>\n<p>Mocha 提供了 <code class=\"language-text\">before()</code>、 <code class=\"language-text\">after()</code>、<code class=\"language-text\">beforeEach</code> 和 <code class=\"language-text\">afterEach</code> 四个钩子函数。<code class=\"language-text\">before()</code> 和 <code class=\"language-text\">after()</code> 在测试集运行之前和之后运行，<code class=\"language-text\">beforeEach</code> 和 <code class=\"language-text\">afterEach</code> 在每个测试案例运行之前和之后运行</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Test todo model'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'before all test'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'after all test'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'before each test'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'after each'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should be true'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        assert<span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'run test'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should be false'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        assert<span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'run test'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>断言</h4>\n<p>Mocha 允许使用任意断言库，包括Node.js 自带的 assert 库。只要能够抛出错误（Error）对象 Mocha 就能正常工作</p>\n<p>常用的断言库：</p>\n<ul>\n<li>shuold.js</li>\n<li>chai</li>\n<li>expect.js</li>\n<li>better-assert</li>\n</ul>\n<h4>测试异步代码</h4>\n<p>在 <code class=\"language-text\">it()</code> 方法的回调函数中添加一个参数，一般命名这个参数为 <code class=\"language-text\">done</code>，<code class=\"language-text\">done</code> 是一个回调函数，Mocha 会等待 <code class=\"language-text\">done</code> 被调用，在执行异步代码时如果失败则调用 <code class=\"language-text\">done</code> 并传人 Error 对象，本次测试案例失败，如果成功直接调用 <code class=\"language-text\">done</code> 方法无需传人任何参数，本次测试案例成功，如果没有调用 <code class=\"language-text\">done</code> 方法 Mocha 会抛出错误</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should call after 1 second'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">done</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should fail after 1 seccond'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">done</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'time out'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://mochajs.org/\">https://mochajs.org/</a></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"Node.js 测试框架 Mocha","date":"July 28, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/test/nodejs-mocha/","previous":{"fields":{"slug":"/test/nodejs-unit-test/"},"frontmatter":{"title":"Node.js 单元测试"}},"next":null}}}