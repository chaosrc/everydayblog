{"componentChunkName":"component---src-templates-blog-post-js","path":"/test/nodejs-sinon/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"ee5afc25-10aa-54ff-b963-f640dc6a7d3e","excerpt":"Sinon.js 的探测器和存根Sinon.js 是用来编写测试探测器(spies)、存根(stubs)和模拟对象(mocks)的 Javascript 库，能够运行在任何 Node.js…","html":"<h2>Sinon.js 的探测器和存根</h2>\n<p>Sinon.js 是用来编写测试探测器(spies)、存根(stubs)和模拟对象(mocks)的 Javascript 库，能够运行在任何 Node.js 测试框架中</p>\n<p>模拟对象和存根库是测试工具箱里的终极工具<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>, 在写单元测试的时候有一些依赖比如文件读取、网络请求等依赖想要避开是就可以使用<strong>存根</strong>（stubs)来替代这些依赖，有助于更好的进行测试</p>\n<h4>创建项目并安装 sinon</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> sinon-demo\n$ <span class=\"token function\">cd</span> sinon-demo/\n$ <span class=\"token function\">npm</span> init -y\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> sinon</code></pre></div>\n<p>接下来编写一个 Database 类将键/值对保存在本地文件中，使用 Sinon 进行测试</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 文件： db.js</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Database</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fileName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fileName <span class=\"token operator\">=</span> fileName\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fileName<span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> Database</code></pre></div>\n<h4>探测器(spies)</h4>\n<p>测试探测器是一个方法当它被调用的时候可以记录传人的参数、返回值、调用次数和异常等。下面使用 sinon.spy() 方法来模拟 fs writeFile 方法，这样就可以不用真实调用文件系统</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> sinon <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sinon'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> assert <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'assert'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> Database <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./db'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> spyWriteFile <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">spy</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">,</span> <span class=\"token string\">'writeFile'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> spySaveDone <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">spy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Database</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./data.json'</span><span class=\"token punctuation\">)</span>\n\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\n\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>spySaveDone<span class=\"token punctuation\">)</span>\n\nsinon<span class=\"token punctuation\">.</span>assert<span class=\"token punctuation\">.</span><span class=\"token function\">calledOnce</span><span class=\"token punctuation\">(</span>spyWriteFile<span class=\"token punctuation\">)</span>\n\nspyWriteFile<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>spy 方法在不传人任何参数时会生成一个匿名的探测器方法，这个方法只会记录调用信息不会做任何其他操作</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> spySaveDone <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">spy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>spy 方法传人一个对象以及它上面的已存在的方法时，spy 会对这个方法进行包装然后记录调用信息，但在使用上来看和原来的方法一样</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> spyWriteFile <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">spy</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">,</span> <span class=\"token string\">'writeFile'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>然后断言判断 spyWriteFile 方法是否被调用了一次</p>\n<p>最后再调用<code class=\"language-text\">spyWriteFile.restore()</code>恢复 fs 的 writeFile 方法</p>\n<h4>存根(stubs)</h4>\n<p>上面的测试中使用 spy 方法来仅仅是包装 writeFile 方法记录其调用信息，但是 writeFile 的 cb 没有执行，但是我们又不希望真实的调用 writeFile 方法，这时候就可以使用存根(stubs)来替换原来的writeFile 方法</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> sinon <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sinon'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> Database <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./db'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// const spyWriteFile = sinon.spy(fs, 'writeFile')</span>\n<span class=\"token keyword\">const</span> subWriteFile <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">stub</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">,</span> <span class=\"token string\">'writeFile'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">callsFake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> spySaveDone <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">spy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Database</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./data.json'</span><span class=\"token punctuation\">)</span>\n\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\n\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>spySaveDone<span class=\"token punctuation\">)</span>\n\nsinon<span class=\"token punctuation\">.</span>assert<span class=\"token punctuation\">.</span><span class=\"token function\">calledOnce</span><span class=\"token punctuation\">(</span>subWriteFile<span class=\"token punctuation\">)</span>\nsinon<span class=\"token punctuation\">.</span>assert<span class=\"token punctuation\">.</span><span class=\"token function\">calledOnce</span><span class=\"token punctuation\">(</span>spySaveDone<span class=\"token punctuation\">)</span>\n\nsubWriteFile<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>使用 stub 方法先传人需要替换的对象 fs 及其方法名 writeFile ，然后 callsFake 中定义一个方法来替换 writeFile 从而改变了 writeFile 的行为</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>《Node.js 实战(第二版)》第9章测试 Node.js 程序</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"Node.js 测试之 Sinon.js 的探测器和存根","date":"July 30, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/test/nodejs-sinon/","previous":{"fields":{"slug":"/test/nodejs-chai/"},"frontmatter":{"title":"Node.js 断言库 chai"}},"next":{"fields":{"slug":"/test/nodejs-cypress/"},"frontmatter":{"title":"Node.js 端到端测试框架 Cypress"}}}}}