{"componentChunkName":"component---src-templates-blog-post-js","path":"/command/command-1/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"7e4bfa96-cfc8-5bad-bb4e-6c9a893c338a","excerpt":"使用 Node.js 编写命令行程序（一）Node.js 命令行工具应用非常广泛，比如前端框架的脚手架 Angular CLI、 Vue CLI 、Create React App, 以及打包编译工具webpack、babel等，下面将介绍如何开始创建一个 Node.js 命令行程序Shebangshebang…","html":"<h2>使用 Node.js 编写命令行程序（一）</h2>\n<p>Node.js 命令行工具应用非常广泛，比如前端框架的脚手架 Angular CLI、 Vue CLI 、Create React App, 以及打包编译工具webpack、babel等，下面将介绍如何开始创建一个 Node.js 命令行程序</p>\n<h4>Shebang</h4>\n<blockquote>\n<p>shebang是由脚本开头的字符数字符号和感叹号（＃！）组成的字符序列</p>\n</blockquote>\n<p>通过 Shebang 告诉系统应该使用什么解释器来运行脚步，比如使用 sh 或 python</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#!/usr/bin/env sh</span>\n\n<span class=\"token comment\">#!/usr/bin/env python -c</span></code></pre></div>\n<p>同样也可以使用 Shebang 的方式来运行 Node.js 程序</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">#<span class=\"token operator\">!</span><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>env node\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>在系统中安装 Node.js 后，创建一个 hello 文件，添加上面的内容以及可执行权限</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">touch</span> hello\n$ <span class=\"token function\">chmod</span> +x hello</code></pre></div>\n<p>运行</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./hello \nhello</code></pre></div>\n<h4>命令行的理念和惯例</h4>\n<p>了解现有程序的理念和惯例，有助于创建出更加方便使用的命令行程序</p>\n<p>以 tsc 为例</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ tsc\nVersion 2.9.2\nSyntax:   tsc [options] [file ...]\n\nExamples: tsc hello.ts\n          tsc --outFile file.js file.ts\n          tsc @args.txt\n\nOptions:\n -h, --help          Print this message.\n --all               Show all compiler options.\n -v, --version       Print the compiler&#39;s version.\n--init               Initializes a TypeScript project and creates a tsconfig.json file.\n -w, --watch         Watch input files.</code></pre></div>\n<p>通过 -h 和 —help 输出帮助信息，使用 -v 和 —version 来输出版本信息，这些都是一些通用的惯例</p>\n<p>使用 —init 来创建新的项目</p>\n<p>使用 -w 或者 —watch 来监听文件的变化</p>\n<p>通过了解现有的一些命令行程序，能够学习到很多命令行程序的设计理念</p>\n<p>注：tsc 是 Typescript 编译器</p>\n<h4>使用命令行参数</h4>\n<p>命令行程序大多数都会接受参数，在 Node.js 中可以通过 process.argv 来获取</p>\n<p>创建 argvs 文件</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">#<span class=\"token operator\">!</span><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>env node\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span></code></pre></div>\n<p>运行</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./argv -a 1 -b 2\n<span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'/usr/local/bin/node'</span>,\n  <span class=\"token string\">'/Users/chao/workspace/node/node-demo/command-demo/argvs'</span>,\n  <span class=\"token string\">'-a'</span>,\n  <span class=\"token string\">'1'</span>,\n  <span class=\"token string\">'-b'</span>,\n  <span class=\"token string\">'2'</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>process.argv 返回的是一个包含命令行参数的数组，第一个参数是 Node.js 程序的路径，第二个参数 JavaScript 执行文件的路径，后面是执行是传人的参数</p>","frontmatter":{"title":"使用 Node.js 编写命令行程序（—）","date":"August 05, 2019","description":"Node.js 命令行程序简介以及命令行参数的使用"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/command/command-1/","previous":{"fields":{"slug":"/share/nodejs/"},"frontmatter":{"title":"Node.js 分享"}},"next":{"fields":{"slug":"/command/nodejs-command-todo/"},"frontmatter":{"title":"使用 Node.js 编写命令行程序（二）"}}}}}