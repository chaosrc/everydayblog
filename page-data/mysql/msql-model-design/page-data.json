{"componentChunkName":"component---src-templates-blog-post-js","path":"/mysql/msql-model-design/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"067231bc-21a1-5910-9b02-474cbf66cc3b","excerpt":"数据库模型和设计在创建数据库时，很容易落入快速开发而没有投入足够的时间和努力去做设计的陷阱。这样会导致频繁的重新设计和实现成本错误的实现方式想象一下我们想要创建一个数据库去存储学生的成绩，我们可以创建一个 Student_Grades 表，表中有每个学生的姓名、别名、课程名称以及分数（Pctg…","html":"<h2>数据库模型和设计</h2>\n<p>在创建数据库时，很容易落入快速开发而没有投入足够的时间和努力去做设计的陷阱。这样会导致频繁的重新设计和实现成本</p>\n<h4>错误的实现方式</h4>\n<p>想象一下我们想要创建一个数据库去存储学生的成绩，我们可以创建一个 Student_Grades 表，表中有每个学生的姓名、别名、课程名称以及分数（Pctg）</p>\n<table>\n<thead>\n<tr>\n<th>GivenNames</th>\n<th>Surname</th>\n<th>CourseName</th>\n<th>Pctg</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>John Paul</td>\n<td>Bloggs</td>\n<td>Web Database</td>\n<td>72</td>\n</tr>\n<tr>\n<td>John Paul</td>\n<td>Bloggs</td>\n<td>Mathematics</td>\n<td>43</td>\n</tr>\n<tr>\n<td>John Paul</td>\n<td>Bloggs</td>\n<td>Mathematics</td>\n<td>65</td>\n</tr>\n<tr>\n<td>Sarah</td>\n<td>Doe</td>\n<td>Programing 1</td>\n<td>87</td>\n</tr>\n<tr>\n<td>Sarah</td>\n<td>Smith</td>\n<td>Programing 1</td>\n<td>55</td>\n</tr>\n</tbody>\n</table>\n<p>很容易获取到任意学生任意课程的分数，然而可能会有两个姓名相同的学生都叫 Sarah Smith，因此需要为每个学生添加添加一个唯一的 ID\n|StudentID| GivenNames | Surname | CourseName | Pctg|\n|------------|------------|------------|------------| ------------|\n|123454| John Paul  | Bloggs | Web Database | 72|\n|123454| John Paul  | Bloggs | Mathematics  | 43|\n|123454| John Paul  | Bloggs | Mathematics  | 65|\n|123456| Sarah     | Doe | Programing 1 | 87|\n|123457| Sarah     | Smith | Programing 1 | 55|</p>\n<p>这里还有另一问题，John Paul 的课程 Mathematics 第一次考了 43 分不及格，而第二次考了 65 分通过。在上面的表中没有展示它们直接的顺序，因此需要添加年份和学期字段（Sem）</p>\n<table>\n<thead>\n<tr>\n<th>StudentID</th>\n<th>GivenNames</th>\n<th>Surname</th>\n<th>CourseName</th>\n<th>Year</th>\n<th>Sem</th>\n<th>Pctg</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>123454</td>\n<td>John Paul</td>\n<td>Bloggs</td>\n<td>Web Database</td>\n<td>2018</td>\n<td>2</td>\n<td>72</td>\n</tr>\n<tr>\n<td>123454</td>\n<td>John Paul</td>\n<td>Bloggs</td>\n<td>Mathematics</td>\n<td>2018</td>\n<td>2</td>\n<td>43</td>\n</tr>\n<tr>\n<td>123454</td>\n<td>John Paul</td>\n<td>Bloggs</td>\n<td>Mathematics</td>\n<td>2019</td>\n<td>3</td>\n<td>65</td>\n</tr>\n<tr>\n<td>123456</td>\n<td>Sarah</td>\n<td>Doe</td>\n<td>Programing 1</td>\n<td>2018</td>\n<td>1</td>\n<td>87</td>\n</tr>\n<tr>\n<td>123457</td>\n<td>Sarah</td>\n<td>Smith</td>\n<td>Programing 1</td>\n<td>2019</td>\n<td>2</td>\n<td>55</td>\n</tr>\n</tbody>\n</table>\n<p>此时 Stuend<em>Grades 表已经变得非常臃肿了。我们可以将学生信息单独拆分为一个表 Student</em>Details:</p>\n<table>\n<thead>\n<tr>\n<th>StudentID</th>\n<th>GivenNames</th>\n<th>Surname</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>123454</td>\n<td>John Paul</td>\n<td>Bloggs</td>\n</tr>\n<tr>\n<td>123456</td>\n<td>Sarah</td>\n<td>Doe</td>\n</tr>\n<tr>\n<td>123457</td>\n<td>Sarah</td>\n<td>Smith</td>\n</tr>\n</tbody>\n</table>\n<p>Student_Grades 表：</p>\n<table>\n<thead>\n<tr>\n<th>StudentID</th>\n<th>CourseName</th>\n<th>Year</th>\n<th>Sem</th>\n<th>Pctg</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>123454</td>\n<td>Web Database</td>\n<td>2018</td>\n<td>2</td>\n<td>72</td>\n</tr>\n<tr>\n<td>123454</td>\n<td>Mathematics</td>\n<td>2018</td>\n<td>2</td>\n<td>43</td>\n</tr>\n<tr>\n<td>123454</td>\n<td>Mathematics</td>\n<td>2019</td>\n<td>3</td>\n<td>65</td>\n</tr>\n<tr>\n<td>123456</td>\n<td>Programing 1</td>\n<td>2018</td>\n<td>1</td>\n<td>87</td>\n</tr>\n<tr>\n<td>123457</td>\n<td>Programing 1</td>\n<td>2019</td>\n<td>2</td>\n<td>55</td>\n</tr>\n</tbody>\n</table>\n<p>如果要查询学生的成绩，我们首先在 Student<em>Details 表中查询StudentID，通过 StudentID 在 Student</em>Grades 表中查询成绩</p>\n<p>还有很多问题没有考虑，比如学生的邮箱、手机号、考勤等。这样的实现方式的问题在于，不断的遇到没有考虑到的问题，需要不断地改变数据库结构。</p>\n<h4>数据库设计的过程</h4>\n<p>在数据库设计中有三个重要的阶段，每一个过程都产生一个渐进的低层次描述：</p>\n<ul>\n<li>\n<p>需求分析\n首先确定并记录数据库的确切用途，将存储什么样的数据以及数据之间如何关联。可能需要对需求进行仔细的研究，和各种与数据库交互的人员进行沟通</p>\n</li>\n<li>\n<p>概念设计\n一但我们知道了数据库的需求是什么，就可以将其提取为数据库设计的正式描述，比如使用建模来进行概念设计</p>\n</li>\n<li>\n<p>逻辑设计\n最后，将数据库设计映射为真实的数据库系统和表</p>\n</li>\n</ul>","frontmatter":{"title":"数据库模型和设计","date":"October 01, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/mysql/msql-model-design/","previous":{"fields":{"slug":"/sql/sql-index/"},"frontmatter":{"title":"使用索引"}},"next":{"fields":{"slug":"/mysql/mysql-entity-model/"},"frontmatter":{"title":"实体关系模型"}}}}}