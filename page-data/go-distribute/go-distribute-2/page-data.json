{"componentChunkName":"component---src-templates-blog-post-js","path":"/go-distribute/go-distribute-2/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"c4db7366-b74d-5464-9e30-753f7885408a","excerpt":"分布式锁（一）trylock某些场景下，我们希望一个任务有单一的执行者，后来的 goroutine 在抢锁失败后，需要放弃其流程，这时就可以使用 trylocktrylock 的意思是，尝试加锁，如果成功继续执行后续流程，如果失败也不阻塞流程，而是直接返回加锁的结果。在 Go 语言中我们可以使用缓冲…","html":"<h2>分布式锁（一）</h2>\n<h4>trylock</h4>\n<p>某些场景下，我们希望一个任务有单一的执行者，后来的 goroutine 在抢锁失败后，需要放弃其流程，这时就可以使用 trylock</p>\n<p>trylock 的意思是，尝试加锁，如果成功继续执行后续流程，如果失败也不阻塞流程，而是直接返回加锁的结果。</p>\n<p>在 Go 语言中我们可以使用缓冲 1 的 channel 来模拟 trylock</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"sync\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> Lock <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tc <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewLlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Lock <span class=\"token punctuation\">{</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\tc <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Lock<span class=\"token punctuation\">{</span>c<span class=\"token punctuation\">:</span> c<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">*</span>Lock<span class=\"token punctuation\">)</span> <span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\tresult <span class=\"token operator\">:=</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>l<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">:</span>\n\t\tresult <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">*</span>Lock<span class=\"token punctuation\">)</span> <span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tl<span class=\"token punctuation\">.</span>c <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tlock <span class=\"token operator\">:=</span> <span class=\"token function\">NewLlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">var</span> counter <span class=\"token builtin\">int</span>\n\n\t<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lock failed\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">return</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tcounter<span class=\"token operator\">++</span>\n\t\t\tlock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Counter: %d\\n\"</span><span class=\"token punctuation\">,</span> counter<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>运行结果</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ go run <span class=\"token keyword\">.</span>\nlock failed\nlock failed\nlock failed\nlock failed\nlock failed\nlock failed\nlock failed\nlock failed\nCounter: 992</code></pre></div>\n<p>在单机系统中，trylock 并不是一个好的选择，因为大量的 goroutine 抢锁可能会导致 CPU 无意义的浪费。这种抢锁场景也被称为活锁。</p>\n<h4>基于 Redis 的 setnx</h4>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"log\"</span>\n\t<span class=\"token string\">\"sync\"</span>\n\t<span class=\"token string\">\"time\"</span>\n\n\t<span class=\"token string\">\"github.com/go-redis/redis\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> lockKey <span class=\"token operator\">=</span> <span class=\"token string\">\"lock_counter\"</span>\n<span class=\"token keyword\">var</span> counterKey <span class=\"token operator\">=</span> <span class=\"token string\">\"counter\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">incr</span><span class=\"token punctuation\">(</span>client <span class=\"token operator\">*</span>redis<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// 加锁</span>\n\tres <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">SetNX</span><span class=\"token punctuation\">(</span>lockKey<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token operator\">*</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\tsuccess<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>success <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lock failed\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// counter 加 1</span>\n\tcounterRes <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Incr</span><span class=\"token punctuation\">(</span>counterKey<span class=\"token punctuation\">)</span>\n\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> counterRes<span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tdelRes <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Del</span><span class=\"token punctuation\">(</span>lockKey<span class=\"token punctuation\">)</span>\n\tunlockSuccess<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> delRes<span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> unlockSuccess <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tclient <span class=\"token operator\">:=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">NewClient</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>redis<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">{</span>\n\t\tAddr<span class=\"token punctuation\">:</span>     <span class=\"token string\">\"localhost:6379\"</span><span class=\"token punctuation\">,</span>\n\t\tPassword<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\t\tDB<span class=\"token punctuation\">:</span>       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 使用默认 DB</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">incr</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tres <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>counterKey<span class=\"token punctuation\">)</span>\n\tresult<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Counter: %s\\n\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>调用 SetNX 方法和 trylock 非常相似，如果获取锁失败那么后面流程不执行</p>","frontmatter":{"title":"分布式锁（一）","date":"December 29, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go-distribute/go-distribute-2/","previous":{"fields":{"slug":"/go-distribute/go-distribute-1/"},"frontmatter":{"title":"分布式 ID 生成器"}},"next":{"fields":{"slug":"/go-distribute/go-distribute-3/"},"frontmatter":{"title":"负载均衡"}}}}}