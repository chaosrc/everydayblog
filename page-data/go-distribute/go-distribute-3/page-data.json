{"componentChunkName":"component---src-templates-blog-post-js","path":"/go-distribute/go-distribute-3/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"074be0f9-679d-5b91-b94d-d02e0bcef77a","excerpt":"负载均衡现在有 n 个服务节点，需要从这 n…","html":"<h2>负载均衡</h2>\n<p>现在有 n 个服务节点，需要从这 n 个服务中挑出一个来完成业务流程。每次随机选择一个服务节点，同时遇到下游返回错误时更换其他节点重试。</p>\n<p>我们设计一个大小和节点数组相同的索引数组，每次新的请求过来，先对索引进行‘洗牌’，然后取第一个元素为服务节点，如果请求失败者选择下一个节点重试。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"math/rand\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> endPoints <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"192.168.1.1\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"192.168.1.23\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"192.168.1.45\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"192.168.1.30\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"192.168.1.49\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"192.168.1.7\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"192.168.1.72\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span>slice <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tl <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\ta <span class=\"token operator\">:=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>\n\t\tb <span class=\"token operator\">:=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>\n\t\tslice<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> slice<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> slice<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> slice<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> indexs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span>indexs<span class=\"token punctuation\">)</span>\n\n\tretryTimes <span class=\"token operator\">:=</span> <span class=\"token number\">3</span>\n\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> retryTimes<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\terr <span class=\"token operator\">:=</span> <span class=\"token function\">apiRequest</span><span class=\"token punctuation\">(</span>indexs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 模拟请求</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">apiRequest</span><span class=\"token punctuation\">(</span>index <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\tcounter<span class=\"token punctuation\">[</span>endPoints<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> val <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> counter <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>运行结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ go run <span class=\"token keyword\">.</span>\n数量   地址\n1281   192.168.1.23\n1331   192.168.1.7\n1290   192.168.1.30\n1252   192.168.1.45\n1255   192.168.1.49\n2292   192.168.1.1\n1299   192.168.1.72</code></pre></div>\n<p>可以看到上面的负载并不均匀，是因为洗牌不均匀导致第一个节点的选中概率较大。</p>\n<h4>修正洗牌算法</h4>\n<p>在数学上的得到证明的还是经典的 fisher-yates 算法，每次随机挑选一个值，放在数组末尾，然后在剩下的 n-1 个数里面再随机挑选一个值，放在数组末尾，以此类推。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span>slice <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tl <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span> <span class=\"token punctuation\">{</span>\n\t\tlastIdx <span class=\"token operator\">:=</span> l <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\t\tidx <span class=\"token operator\">:=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\t\tslice<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> slice<span class=\"token punctuation\">[</span>lastIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> slice<span class=\"token punctuation\">[</span>lastIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> slice<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Go 中也内置这个算法</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">shuffle3</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Perm</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>调用 rand.Perm 就可以获取我们想要的数组</p>","frontmatter":{"title":"负载均衡","date":"December 30, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go-distribute/go-distribute-3/","previous":{"fields":{"slug":"/go-distribute/go-distribute-2/"},"frontmatter":{"title":"分布式锁（一）"}},"next":{"fields":{"slug":"/crypto/crypto-1/"},"frontmatter":{"title":"现代密码学：简介（一）"}}}}}