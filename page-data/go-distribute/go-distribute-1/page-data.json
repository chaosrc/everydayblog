{"componentChunkName":"component---src-templates-blog-post-js","path":"/go-distribute/go-distribute-1/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"eb6cf859-3eb9-563f-b46d-3ef781e788d3","excerpt":"分布式 ID 生成器有时我们需要生成类似 MySQL 自增 ID 这样不断增大，同时有不会重复的 ID，以支持业务中高并发的场景。Twitter 的 snowflake 算法是这种场景的一个典型解法首先确定一个 64 位的数字，类型位 int64，划分为四个部分，不包含第一个bit，因为这个 bit…","html":"<h2>分布式 ID 生成器</h2>\n<p>有时我们需要生成类似 MySQL 自增 ID 这样不断增大，同时有不会重复的 ID，以支持业务中高并发的场景。</p>\n<p>Twitter 的 snowflake 算法是这种场景的一个典型解法</p>\n<p><img src=\"https://chai2010.cn/advanced-go-programming-book/images/ch6-snowflake.png\"></p>\n<p>首先确定一个 64 位的数字，类型位 int64，划分为四个部分，不包含第一个bit，因为这个 bit 为符号位。第一部分 41 位，表示时间戳，单位为毫秒，然后 5 位表示数据中心 id，然后再 5 位表示机器示例 id，最后 12 位为 循环自增 id（达到 111111111111 后会归 0 ）。</p>\n<p>这样可以支持同一台机器上同一毫秒内产生 2^12 = 4096 个 id，1秒内 409.6 万个 id。</p>\n<p>数据中心和示例 id 一共 10 位，可以支持 1024 台机器。</p>\n<p>时间戳 41 位可以支持使用 69 年，时间戳可以是相对于某个时间的增量。</p>\n<h4>worker_id 分配</h4>\n<p>timestamp 和 sequence<em>id 由程序运行时生成，而 datacenter</em>id 和\nworker_id 需要在部署阶段获取，并且程序一旦启动后就不可更改。</p>\n<p>datacenter<em>id 一般会有对应的 id，可以在部署阶段获取。而 worker</em>id 是逻辑上给机器分配的 id，可以通过自增 id 的工具生成，比如 MySQL：</p>\n<div class=\"gatsby-highlight\" data-language=\"mysql\"><pre class=\"language-mysql\"><code class=\"language-mysql\">&gt;insert into work_id(ip) values(&quot;129.1.1.1&quot;);\nQuery OK, 1 row affected (0.02 sec)\n&gt; select last_insert_id();\n+------------------+\n| last_insert_id() |\n+------------------+\n|                2 |\n+------------------+\n1 row in set (0.00 sec)</code></pre></div>\n<p>然后将 MySQL 生成的 id 持久化到本地，让实例 id 保持不变。</p>\n<h4>使用 snowflake</h4>\n<p>github.com/bwmarrin/snowflake 是轻量化的 snowflake 的 go 语言实现，其格式为:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">+--------------------------------------------------------------------------+\n| 1 Bit Unused | 41 Bit Timestamp |  10 Bit NodeID  |   12 Bit Sequence ID |\n+--------------------------------------------------------------------------+</code></pre></div>\n<p>使用</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\n\t<span class=\"token string\">\"github.com/bwmarrin/snowflake\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\tnode<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> snowflake<span class=\"token punctuation\">.</span><span class=\"token function\">NewNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 生成 snowflake ID</span>\n\tid <span class=\"token operator\">:=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">Generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Int64    %d\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"String   %s\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Base2    %s\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Base64   %s\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">Base64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Time     %d\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">Time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Node     %d\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sequence  %d\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">Step</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>输出结果</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ go run <span class=\"token keyword\">.</span>\nInt64    1210963827558977536\nString   1210963827558977536\nBase2    1000011001110001101010010111101101001100000000001000000000000\nBase64   MTIxMDk2MzgyNzU1ODk3NzUzNg<span class=\"token operator\">==</span>\nTime     1577551249767\nNode     1\nSequence  0</code></pre></div>","frontmatter":{"title":"分布式 ID 生成器","date":"December 28, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go-distribute/go-distribute-1/","previous":{"fields":{"slug":"/go-rpc/go-rpc-8/"},"frontmatter":{"title":"Go RCP (八)"}},"next":{"fields":{"slug":"/go-distribute/go-distribute-2/"},"frontmatter":{"title":"分布式锁（一）"}}}}}