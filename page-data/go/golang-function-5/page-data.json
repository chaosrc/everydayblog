{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-function-5/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"a2941425-03f3-5566-a31b-fd0cd436ea0c","excerpt":"Golang 函数（五）Panic在 Go 的类型系统中很多错误在编译时就能捕获，但是其他的，比如数组越界或者 nil 指针引用，需要运行时检查。当 Go 运行时检测到错误，它将发生 painc。在一个典型的 painc 中，正常的执行停止，所有在当前 goroutine 的延迟（defered…","html":"<h2>Golang 函数（五）</h2>\n<h4>Panic</h4>\n<p>在 Go 的类型系统中很多错误在编译时就能捕获，但是其他的，比如数组越界或者 nil 指针引用，需要运行时检查。当 Go 运行时检测到错误，它将发生 painc。</p>\n<p>在一个典型的 painc 中，正常的执行停止，所有在当前 goroutine 的延迟（defered）函数将会被执行，程序崩溃并输出一条日志信息。输出的日志信息包括 painc 值，通常是某种类型的错误（error）信息，对于每一个 goroutine，会输出发生 panic 的函数调用栈。</p>\n<p>并不是所有 painc 都来自于运行时。内置的 panic 函数能够被直接调用，它能够接受任何值做为参数。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">switch</span> i <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">//...</span>\n<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">//...</span>\n<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当 panic 发生，所有的 defer 函数按照相反的顺序执行，开始于栈中最顶端的函数进行至 main 函数</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f(%d)\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token operator\">/</span>x<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"defer f(%d)\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>输出</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">defer</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">defer</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">defer</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">panic</span><span class=\"token punctuation\">:</span> runtime <span class=\"token builtin\">error</span><span class=\"token punctuation\">:</span> integer divide by zero\n\ngoroutine <span class=\"token number\">1</span> <span class=\"token punctuation\">[</span>running<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\nmain<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>chao<span class=\"token operator\">/</span>workspace<span class=\"token operator\">/</span><span class=\"token keyword\">go</span><span class=\"token operator\">/</span>gostart<span class=\"token operator\">/</span>functions<span class=\"token operator\">/</span><span class=\"token builtin\">panic</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span><span class=\"token punctuation\">:</span><span class=\"token number\">18</span> <span class=\"token operator\">+</span><span class=\"token number\">0x1be</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>上面的函数 f 在参数 x 为 0 时会发生 panic，defer 函数依次调用，程序终止，输出错误信息</p>\n<h4>Recover</h4>\n<p>终止程序通常是对 panic 的正确反应，但也不总是。可能需要使用某些方式恢复程序，或者至少在放弃之前做一些清理工作。这时可以使用 recover 内置的函数</p>\n<p>如果 recover 函数在 defer 函数中被调用，并且这个包含 defer 语句的函数发生 panic，recover 结束当前的 panic 状态并且返回 panic 值。发生 panic 的函数不会在其停留的地方继续而是正常返回。如果 recover 函数在其他任何时候调用，不会产生任何影响并且返回 nil。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">re</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">recover</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">re</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>输出</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">1\nerror\n2</code></pre></div>\n<p>因为在 re 方法使用中 reover 恢复程序执行，所以 fmt.Println(2) 能正常执行</p>\n<p>通常在同一个包中使用 recover 能够简化复杂或者不可预期的错误，但是通常的原则是，不要尝试 recover 其他包抛出的 panic。</p>","frontmatter":{"title":"Golang 函数（五）","date":"November 01, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-function-5/","previous":{"fields":{"slug":"/go/golang-function-4/"},"frontmatter":{"title":"Golang 函数（四）"}},"next":{"fields":{"slug":"/go/golang-method-1/"},"frontmatter":{"title":"Golang 方法（一）"}}}}}