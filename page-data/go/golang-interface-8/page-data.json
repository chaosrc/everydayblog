{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-interface-8/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"70b0343c-5745-5c95-87e5-835bb0fd47be","excerpt":"Golang 接口（八）类型 Switch类型有两种不同的使用方式。第一种，像前面示例的 io.Writer、io.Reader、http.Handler…","html":"<h2>Golang 接口（八）</h2>\n<h4>类型 Switch</h4>\n<p>类型有两种不同的使用方式。第一种，像前面示例的 io.Writer、io.Reader、http.Handler，一个接口表达具体类型之间的相似性，具体类型满足接口但是隐藏实现细节。这时，重点是方法而不是具体类型\n。</p>\n<p>第二种，利用接口值的能力来持有多种具体类型的值，可以认为接口是这些类型的联合。类型断言通常用来区别这些动态类型，然后分别处理每种情况。这时，重点是满足接口的具体类型，而不是接口方法，没有信息隐藏。接口的这种使用方式叫做<em>区别联合</em>(discriminated unions)。</p>\n<p>这两种方式也就是面向对象语言中的<em>子类型多态</em>和<em>即时多态</em>。</p>\n<p>Go 中查询 SQL 数据库的 API，像其他语言一样，我们分离查询语句中固定的部分和变量部分，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"database/sql\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">listTrack</span><span class=\"token punctuation\">(</span>db sql<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">,</span> artist <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> minYear<span class=\"token punctuation\">,</span> maxYear <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tresult<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM track WHERE artist = ? and year > ? and year &lt; ? \"</span><span class=\"token punctuation\">,</span>\n\t\tartist<span class=\"token punctuation\">,</span> minYear<span class=\"token punctuation\">,</span> maxYear<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Exec 方法将查询语句中的 ’?’ 替换为相应的参数值，有可能是布尔值、数字、字符串或者 nil。</p>\n<p>Exec 的实现方式可能是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">sqlQuote</span><span class=\"token punctuation\">(</span>x <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"NULL\"</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> x<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> x<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span> \n\t<span class=\"token operator\">...</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>通过 if-else 链执行一系列的断言测试。</p>\n<p>type switch 语句能够简化 if-else 的链式断言操作：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">switch</span> x <span class=\"token operator\">:=</span> x<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span> \n    <span class=\"token comment\">//...</span>\n<span class=\"token keyword\">case</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> \n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>x.(type) 中的 type 为关键词，每一个 case 可以有多个类型。如果 case 的条件只有一个类型，那么 x 的类型和 case 的类型相同，比如 case string 里面的 x 为 string 类型， case bool 里面的 x 为 bool 类型。其他情况的 case 条件下的 x 为 switch 操作对象的接口类型，这个例子里面为 interface{}。</p>","frontmatter":{"title":"Golang 接口（八）","date":"November 13, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-interface-8/","previous":{"fields":{"slug":"/go/golang-interface-7/"},"frontmatter":{"title":"Golang 接口（七）"}},"next":null}}}