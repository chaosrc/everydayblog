{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-function-1/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"ee356ae7-740e-517c-8e0e-58da5f360cf7","excerpt":"Golang 函数（一）函数声明一个函数的声明包括函数名称、参数列表、可选的返回列表和函数主体：参数列表指定了函数参数的名称和类型，返回列表指定了函数返回值的类型。下面定义了一个 hypot…","html":"<h2>Golang 函数（一）</h2>\n<h4>函数声明</h4>\n<p>一个函数的声明包括函数名称、参数列表、可选的返回列表和函数主体：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span>parameter<span class=\"token operator\">-</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">return</span><span class=\"token operator\">-</span>list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    body\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>参数列表指定了函数参数的名称和类型，返回列表指定了函数返回值的类型。下面定义了一个 hypot 函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">hypot</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>函数可以有多个返回值</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">LenAndCap</span><span class=\"token punctuation\">(</span>list <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 调用函数</span>\n\tl<span class=\"token punctuation\">,</span> c <span class=\"token operator\">:=</span> <span class=\"token function\">LenAndCap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0, 0</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当有多个返回值时，调用者必须明确的将所有返回值赋值。如果要忽略某个返回值可以将它赋值给空白标志符</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">a <span class=\"token operator\">:=</span> <span class=\"token function\">LenAndCap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//cannot initialize 1 variables with 2 valuesLSP</span>\n\n<span class=\"token comment\">// 忽略第二个返回值</span>\nb<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> <span class=\"token function\">LenAndCap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>和参数一样，返回值也可以命名，这时每一个返回值名称声明了一个本地变量并且初始化为零</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">namedReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ts <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span>\n\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">,</span> s\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ti<span class=\"token punctuation\">,</span> s <span class=\"token operator\">:=</span> <span class=\"token function\">namedReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0 foo</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>函数的参数通过值传递，因此函数接受的是每个参数的拷贝。对拷贝数据的修改不会影响调用者，然而如果参数包含引用类型比如指针、slice、map、function 或者 channel，那么函数对这些间接引用变量的任何修改都可能影响到调用者</p>","frontmatter":{"title":"Golang 函数（一）","date":"October 28, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-function-1/","previous":{"fields":{"slug":"/go/golang-composite-type-7/"},"frontmatter":{"title":"Golang 复合类型（七）"}},"next":{"fields":{"slug":"/go/golang-function-2/"},"frontmatter":{"title":"Golang 函数（二）"}}}}}