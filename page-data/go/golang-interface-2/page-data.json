{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-interface-2/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"835a6f55-d2e9-5764-a8a3-974dc7c57ffa","excerpt":"Golang 接口（二）接口类型接口类型指定一组方法，具体的类型必须拥这些方法才能被视为该接口的实例。io.Writer 类型是使用最广泛的接口之一，它提供了所有能够写入字节的类型的抽象，包括文件、内存缓冲、网络连接、压缩器等。一个 Reader 表示任何能够读取字节的类型，一个 Closer…","html":"<h2>Golang 接口（二）</h2>\n<h4>接口类型</h4>\n<p>接口类型指定一组方法，具体的类型必须拥这些方法才能被视为该接口的实例。</p>\n<p>io.Writer 类型是使用最广泛的接口之一，它提供了所有能够写入字节的类型的抽象，包括文件、内存缓冲、网络连接、压缩器等。一个 Reader 表示任何能够读取字节的类型，一个 Closer 是能够关闭的任何值。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Reader <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> Closer <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>多个接口进行组合 </p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> ReadWriter <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\tReader\n\tWriter\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> ReadWriteCloser <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\tReadWriter\n\tCloser\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>同时进行组合和方法声明</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> ReadWriter <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\tReader\n\t<span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>接口满足</h4>\n<p>一个类型如果拥有接口的所有方法则满足这个接口。Go 语言中如果一个具体类型是（is a）一个特定的接口类型，那么这个具体类型满足这个接口，比如 *os.File 是一个 io.ReadWriter.</p>\n<p>接口的赋值规则很简单：只有在其类型满足接口时，表达式才可以赋值给接口</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> w io<span class=\"token punctuation\">.</span>Writer\n\nw <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>Stdout         <span class=\"token comment\">// Stdout 中有 Write 方法</span>\nw <span class=\"token operator\">=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span> <span class=\"token comment\">//Buffer 中有 Write 方法</span></code></pre></div>\n<p>具体类型赋值给接口类型后，只有接口中声明的方法才能被调用。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nos<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> w Writer\nw <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>Stdout\nw<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nw<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//error： w.Close undefined (type Writer has no field or method Close)</span></code></pre></div>\n<p>os.Stdout 中有 Write 和 Close 方法，但是赋值给 Writer 接口类型的 w 后，w 不能调用 Close 方法 </p>\n<p>空的接口类型为 <code class=\"language-text\">interface{}</code>。因为空的接口对满足它的类型没有要求， 所以任何值都能赋值给它</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> a <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\na <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\na <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span>\na <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>Stdout</code></pre></div>","frontmatter":{"title":"Golang 接口（二）","date":"November 07, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-interface-2/","previous":{"fields":{"slug":"/go/golang-interface-1/"},"frontmatter":{"title":"Golang 接口（一）"}},"next":{"fields":{"slug":"/go/golang-interface-3/"},"frontmatter":{"title":"Golang 接口（三）"}}}}}