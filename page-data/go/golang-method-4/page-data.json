{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-method-4/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"137c6c89-ae39-54ac-8b16-bf4d6702cce5","excerpt":"Golang 方法（四）Struct 嵌入的组合类型考虑下面的 ColoredPoint 类型在 ColoredPoint struct 中我们嵌入一个 Point 来提供 X、Y 值，而不是去定义 X、Y、Color 三个字段。这种嵌入方式使用简短的语法来定义一个包含所有 Point…","html":"<h2>Golang 方法（四）</h2>\n<h4>Struct 嵌入的组合类型</h4>\n<p>考虑下面的 ColoredPoint 类型</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Point <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tX<span class=\"token punctuation\">,</span> Y <span class=\"token builtin\">float64</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> ColoredPoint <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tPoint\n\tColor color<span class=\"token punctuation\">.</span>RGBA\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在 ColoredPoint struct 中我们嵌入一个 Point 来提供 X、Y 值，而不是去定义 X、Y、Color 三个字段。这种嵌入方式使用简短的语法来定义一个包含所有 Point 字段以及其他字段的 ColoredPoint 类型。如果我们想要，我们可以在不提及 Point 的情况下选择 ColoredPoint 中 Point 提供的字段，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">cp <span class=\"token operator\">:=</span> geometry<span class=\"token punctuation\">.</span>ColoredPoint<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 通过 Point 获取字段</span>\ncp<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">.</span>X <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>cp<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n\n<span class=\"token comment\">// 直接获取字段</span>\ncp<span class=\"token punctuation\">.</span>X <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>cp<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 20</span></code></pre></div>\n<p>方法调用也是相同的机制</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 调用 Point 的 Distance 方法</span>\ndistance <span class=\"token operator\">:=</span> cp<span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>geometry<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">)</span></code></pre></div>\n<p>通过这种嵌入方式，允许通过多个字段的组合构建具有很多方法的复杂类型。</p>\n<p>嵌入的匿名字段也可以是指向命名类型的指针，这种情况下字段和方法间接的从指针对象引用</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> ColoredPoint <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">*</span>Point\n\tColor color<span class=\"token punctuation\">.</span>RGBA\n<span class=\"token punctuation\">}</span>\n\ncp <span class=\"token operator\">:=</span> geometry<span class=\"token punctuation\">.</span>ColoredPoint<span class=\"token punctuation\">{</span><span class=\"token operator\">&amp;</span>geometry<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\ndistance <span class=\"token operator\">:=</span> cp<span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>geometry<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 17.11724276862369</span></code></pre></div>\n<p>一个 struct 可以有多个嵌入的匿名字段，ColoredPoint 可以声明为：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> ColoredPoint <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tPoint\n\tcolor<span class=\"token punctuation\">.</span>RGBA\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后 ColoredPoint 将会拥有 Point 和 RGBA 的所有方法，以及其他直接声明在 ColoredPoint 上面的方法。</p>\n<p>通常方法只能定义在命名类型和它们的指针上，但是由于嵌入字段的存在，使得未命名的 struct 也能够有方法</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tsync<span class=\"token punctuation\">.</span>Mutex\n\tmapping <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>\n\tmapping<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\tcache<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span>mapping<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的 cache 是未命名 struct 类型，由于嵌入了 sync.Mutex 字段，其 Lock 和 Unlock 方法提升到了未命名的 struct 类型，于是 cache 变量可以自己调用这些方法</p>","frontmatter":{"title":"Golang 方法（四）","date":"November 05, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-method-4/","previous":{"fields":{"slug":"/go/golang-method-3/"},"frontmatter":{"title":"Golang 方法（三）"}},"next":{"fields":{"slug":"/go/golang-interface-1/"},"frontmatter":{"title":"Golang 接口（一）"}}}}}