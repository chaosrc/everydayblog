{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-interface-3/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"adddb27c-bc7e-54d3-b364-695a22479b0d","excerpt":"Golang 接口（三）接口值从概念上讲，一个接口类型的值由两个部分组成：具体类型和此类型的值，它们被称为接口的动态类型和动态值。对于像 Go 这样的静态类型的语言，类型是编译时概念，因此类型不是一个值。在 Go…","html":"<h2>Golang 接口（三）</h2>\n<h4>接口值</h4>\n<p>从概念上讲，一个接口类型的值由两个部分组成：具体类型和此类型的值，它们被称为接口的动态类型和动态值。</p>\n<p>对于像 Go 这样的静态类型的语言，类型是编译时概念，因此类型不是一个值。在 Go 的概念模型中，一组称为类型描述符的值，提供每个类型的信息，比如名字和方法。接口值中，类型由适当的类型描述符表示</p>\n<p>下面的变量 w 有三种不同类型的值</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> w io<span class=\"token punctuation\">.</span>Writer\nw <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>Stdout\nw <span class=\"token operator\">=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span>\nw <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span></code></pre></div>\n<p>接口为零值时它的类型和值都为 nil，因此在 w 声明语句中 w 的接口值为：</p>\n<p><img src=\"https://s2.ax1x.com/2019/11/08/MePOsK.png\" alt=\"MePOsK.png\"></p>\n<p>第二个语句赋值了一个 *os.File 类型的值：</p>\n<p><img src=\"https://s2.ax1x.com/2019/11/08/MePLM6.png\" alt=\"MePLM6.png\"></p>\n<p>第三个语句赋值了一个 *bytes.Buffer 类型的值：\n<img src=\"https://s2.ax1x.com/2019/11/08/MePHR1.png\" alt=\"MePHR1.png\"></p>\n<p>一个接口值可以容纳任意大的动态值，比如 time.Time:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> x <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>其结果可能是这样：</p>\n<p><img src=\"https://s2.ax1x.com/2019/11/08/MeiYo4.png\" alt=\"MeiYo4.png\"></p>\n<p>接口值可以使用 == 和 = 比较，如果两个接口值都为 nil 那么它们相等，或者它们的动态类型相同而且动态值使用 == 比较相等。因为接口值可以比较，所以可以用于 map 的 key，或者 switch 语句。</p>\n<p>然而如果两个相同动态类型的接口值比较，但是类型是不可比较的（slice等），则比较失败并且发生 panic</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> b <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> c <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">//panic: runtime error: comparing uncomparable type []int</span></code></pre></div>","frontmatter":{"title":"Golang 接口（三）","date":"November 08, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-interface-3/","previous":{"fields":{"slug":"/go/golang-interface-2/"},"frontmatter":{"title":"Golang 接口（二）"}},"next":null}}}