{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-testing-2/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"b55f53e6-5d5f-5c12-929b-b555675df8bf","excerpt":"Golang 测试（二）测试命令go test 工具对于测试库包很有用，但是我们也可以用它来测试命令。一个命名为 main 的包产生一个可执行程序，但是也能做为一个库导入。下面是一个 echo 命令程序：在测试中，我们可以使用多种参数和 flag 设置来检查每一种情况是否打印正确的结果。通过改变全局变量 out…","html":"<h2>Golang 测试（二）</h2>\n<h4>测试命令</h4>\n<p>go test 工具对于测试库包很有用，但是我们也可以用它来测试命令。一个命名为 main 的包产生一个可执行程序，但是也能做为一个库导入。</p>\n<p>下面是一个 echo 命令程序：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"flag\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"io\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\tn <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">Bool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"省略换行符\"</span><span class=\"token punctuation\">)</span>\n\ts <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"分割符\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> out io<span class=\"token punctuation\">.</span>Writer <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>Stdout\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tflag<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">Args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"echo: %v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> s <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> arg <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprint</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>n <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintln</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在测试中，我们可以使用多种参数和 flag 设置来检查每一种情况是否打印正确的结果。通过改变全局变量 out ，将结果输出到一个替代的 writer，而不是标准输出 stdout。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"bytes\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"testing\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestEcho</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> tests <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\t\tnewline <span class=\"token builtin\">bool</span>\n\t\tsep     <span class=\"token builtin\">string</span>\n\t\targs    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n\t\twant    <span class=\"token builtin\">string</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\\t2\\n\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a,b,c\\n\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1:2:3\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> test <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> tests <span class=\"token punctuation\">{</span>\n\t\tdesc <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"echo(%v, %q, %q)\"</span><span class=\"token punctuation\">,</span> test<span class=\"token punctuation\">.</span>newline<span class=\"token punctuation\">,</span> test<span class=\"token punctuation\">.</span>sep<span class=\"token punctuation\">,</span> test<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span>\n\n\t\tout <span class=\"token operator\">=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>test<span class=\"token punctuation\">.</span>newline<span class=\"token punctuation\">,</span> test<span class=\"token punctuation\">.</span>sep<span class=\"token punctuation\">,</span> test<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s faild: %v\"</span><span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">continue</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tgot <span class=\"token operator\">:=</span> out<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>bytes<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token keyword\">if</span> got <span class=\"token operator\">!=</span> test<span class=\"token punctuation\">.</span>want <span class=\"token punctuation\">{</span>\n\t\t\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s = %s, want: %s\"</span><span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">,</span> got<span class=\"token punctuation\">,</span> test<span class=\"token punctuation\">.</span>want<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>测试是包中的 main 函数不会被调用，而是像库一样暴露 TestEcho 方法给测试驱动</p>","frontmatter":{"title":"Golang 测试（二）","date":"December 03, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-testing-2/","previous":{"fields":{"slug":"/go/golang-testing-1/"},"frontmatter":{"title":"Golang 测试（一）"}},"next":{"fields":{"slug":"/go/golang-testing-6/"},"frontmatter":{"title":"Golang 测试（六）"}}}}}