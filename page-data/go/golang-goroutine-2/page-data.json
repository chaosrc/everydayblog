{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-goroutine-2/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"039a0981-4abd-5663-9d3d-fdf3970a5f5c","excerpt":"Golang 并发（二）示例：并发时钟服务网络是使用并发的常见领域，因为服务器通常一次处理多个客户端请求，每个客服端本质上相互独立。下面的例子中使用 net 包来建立网络服务。首先创建一个顺序时钟服务，每秒钟将当前时间发送给客户端Listen 方法创建一个 net.Listener…","html":"<h2>Golang 并发（二）</h2>\n<h4>示例：并发时钟服务</h4>\n<p>网络是使用并发的常见领域，因为服务器通常一次处理多个客户端请求，每个客服端本质上相互独立。下面的例子中使用 net 包来建立网络服务。</p>\n<p>首先创建一个顺序时钟服务，每秒钟将当前时间发送给客户端</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">clockServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tserver<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">Listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tcp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\":8090\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalln</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"create server error\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\tconn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">Accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Panicln</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">continue</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token function\">handleConn</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">handleConn</span><span class=\"token punctuation\">(</span>conn net<span class=\"token punctuation\">.</span>Conn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">defer</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"15:04:05\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Listen 方法创建一个 net.Listener, 监听网络端口的请求连接，这个例子中监听 8090 TCP 端口。监听器的 Accept 方法会阻塞，直到有请求连接，然后返回一个 net.Conn 对象。在 handleConn 中每隔一秒向 conn 写入一次当前时间，发送给客户端。</p>\n<p>因为服务是顺序执行，每次只能处理一个客户端，所以两个客户端连接时第二个必须等第一个结束才会有响应。</p>\n<p><img src=\"https://s2.ax1x.com/2019/11/15/MwpA3j.gif\" alt=\"MwpA3j.gif\"></p>\n<p>只需要做一点小的改变就能使服务并发：在 handleConn 前面添加关键词 go ，使每一次 handleConn 调用都在自己的 goroutine 上</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n    conn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">Accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Panicln</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">continue</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">handleConn</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p><img src=\"https://s2.ax1x.com/2019/11/15/MdzeRs.gif\" alt=\"MdzeRs.gif\"></p>","frontmatter":{"title":"Golang 并发（二）","date":"November 15, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-goroutine-2/","previous":{"fields":{"slug":"/go/golang-goroutine-1/"},"frontmatter":{"title":"Golang 并发（一）"}},"next":{"fields":{"slug":"/go/golang-goroutine-3/"},"frontmatter":{"title":"Golang 并发（三）"}}}}}