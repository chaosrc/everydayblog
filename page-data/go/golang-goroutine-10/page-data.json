{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-goroutine-10/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"bbb6f9bc-4a5e-5e52-b66b-f75bfb3fbb66","excerpt":"Golang 并发（十）多路传输和 select下面是一个倒计时程序，time.Tick 函数返回一个 channel，定时发送事件现在添加中断倒计时的功能，在倒计时过程中按下一个按键中断倒计时。首先定义一个 abord channel ，在一个 goroutine 中读取用户输入，如果成功则给 abord…","html":"<h2>Golang 并发（十）</h2>\n<h4>多路传输和 select</h4>\n<p>下面是一个倒计时程序，time.Tick 函数返回一个 channel，定时发送事件</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ttick <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> num <span class=\"token operator\">:=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> num <span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> num<span class=\"token operator\">--</span><span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">&lt;-</span> tick\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>现在添加中断倒计时的功能，在倒计时过程中按下一个按键中断倒计时。首先定义一个 abord channel ，在一个 goroutine 中读取用户输入，如果成功则给 abord 发送值</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">abord <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    key <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    os<span class=\"token punctuation\">.</span>Stdin<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n    abord <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>此时每次倒计时需要等待两个时间：tick 和 abord。我们不能直接从两个 channel 接收，因为无论我们先尝试那一个操作都会阻塞，直到完成。我们需要 multiplex（多路传输）这些操作，需要使用 select 语句</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span> ch1<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">case</span> x <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span> ch2<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">case</span> ch3 <span class=\"token operator\">&lt;-</span> y<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>和 switch 语句一样 select 可以有多个 case 和 可选的 default。每个 case 指定一个<em>通信</em>（发送或接收）操作以及相关的语句块。</p>\n<p>select 等待直到某个 case 的通信准备执行，然后执行这个通信操作以及这个 case 下面的语句，其他 case 的通信将不会发生。一个没有 case 的 select 语句（select {}）会永远等待。</p>\n<p>添加中断功能后的 count 程序</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tabord <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tkey <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\tos<span class=\"token punctuation\">.</span>Stdin<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\n\t\tabord <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\ttick <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> num <span class=\"token operator\">:=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> num<span class=\"token operator\">--</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>tick<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>abord<span class=\"token punctuation\">:</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Abord\"</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果有多个 case 已经准备好，select 会随机选择一个执行，保证每个 channel 有相同的选择机会。</p>\n<p>下面的 select 语句从 abord channel接收一个值，如果有则接收，没有则什么都不做。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">select</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span> abord<span class=\"token punctuation\">:</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abord\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这是一个非阻塞（non-blocking）接收操作。重复这这种的操作被称为轮询通道（polling channel）</p>\n<p>channel 的零值为 nil。nil channel 有时候非常有用，因为它发送和接收操作会永远阻塞，select 语句中 channel 为 nil 的 case 永远不会被选择。这让我们可以使用 nil 启用或禁用 case 通信来处理超时或取消操作。</p>","frontmatter":{"title":"Golang 并发（十）","date":"November 23, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-goroutine-10/","previous":{"fields":{"slug":"/go/golang-goroutine-9/"},"frontmatter":{"title":"Golang 并发（九）"}},"next":{"fields":{"slug":"/go/golang-goroutine-11/"},"frontmatter":{"title":"Golang 并发（十一）"}}}}}