{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-low-level-2/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"000da53a-9662-580d-9def-d85bcdc9a770","excerpt":"Golang 底层编程（二）unsafe.Pointer大部分指针类型写做 ，意思是 T 类型变量的一个指针，unsafe.Pointer 类型是一种特殊种类的指针，能够保存任意变量的地址。当然我们不能对 unsafe.Pointer 使用 ，因为我们不知道表达式的类型。和普通的指针一样 unsafe.Pointer…","html":"<h2>Golang 底层编程（二）</h2>\n<h4>unsafe.Pointer</h4>\n<p>大部分指针类型写做 <code class=\"language-text\">*T</code>，意思是 T 类型变量的一个指针，unsafe.Pointer 类型是一种特殊种类的指针，能够保存任意变量的地址。当然我们不能对 unsafe.Pointer 使用 <code class=\"language-text\">*p</code>，因为我们不知道表达式的类型。和普通的指针一样 unsafe.Pointer 是可比较的，可以是 nil。</p>\n<p>一个普通的 <code class=\"language-text\">*T</code> 指针可以转换为 unsafe.Pointer，一个 unsafe.Pointer 也可以转换为普通的指针。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Float64bits</span><span class=\"token punctuation\">(</span>f <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span><span class=\"token builtin\">uint64</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#016x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Float64bits</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 输出: 0x3ff0000000000000</span></code></pre></div>\n<p>unsafe.Pointer 也可以转换为 uintptr 保存指针的数值，使我们可以对指针进行数值运算。</p>\n<p>很多 unsafe.Pointer 值是转换普通指针为原始指针数值再转回来的中间值，比如下面的例子:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> x <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    a <span class=\"token builtin\">bool</span>\n    b <span class=\"token builtin\">int16</span>\n    c <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 相当于 &amp;x.b</span>\npb <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token builtin\">int16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Offsetof</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n<span class=\"token operator\">*</span>pb <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span></code></pre></div>\n<p>虽然上面的语法繁琐，但是不要尝试使用临时变量保存 uintptr 类型。下面的写法是错误的</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 错误写法</span>\ntmp <span class=\"token operator\">:=</span> <span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Offsetof</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span>\npb <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token builtin\">int16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n<span class=\"token operator\">*</span>pb <span class=\"token operator\">=</span> <span class=\"token number\">42</span></code></pre></div>\n<p>原因很微妙，一些垃圾回收器会移动内存中的变量来减少碎片化或者计数。当一个变量被移动，所有保存这个地址的指针必须更新为新的地址。unsafe.Pointer 是一个指针，因此当变量移动时也必须更新，但是 uintptr 只是一个数字所以不会改变。上面的第二个语句执行后，变量 x 可能会被移动，tmp 不再指向 &#x26;x.b ，第三个语句可能将 42 重写到一个任意的地址。</p>\n<p>当前对 unsafe.Pointer 转换的 uintptr 的使用原则是：把 uintptr 值当作它是变量的前一个地址，最小化 unsafe.Pointer 和 uintptr 转换操作的数量以及 uintptr 的使用。</p>","frontmatter":{"title":"Golang 底层编程（二）","date":"December 14, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-low-level-2/","previous":{"fields":{"slug":"/go/golang-reflect-6/"},"frontmatter":{"title":"Golang 反射（六）"}},"next":{"fields":{"slug":"/go/golang-low-level-1/"},"frontmatter":{"title":"Golang 底层编程（一）"}}}}}