{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-composite-type-3/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"322be0d8-45f5-533b-bdc2-25aa8cbdd138","excerpt":"Golang 复合类型（三）append 函数内置的 append 函数将元素添加到 slice 上理解 slice 对于 append 函数十分重要。下面是 appendInt 函数用来追加 int 类型的 slice每次 appendInt…","html":"<h2>Golang 复合类型（三）</h2>\n<h4>append 函数</h4>\n<p>内置的 append 函数将元素添加到 slice 上</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> s <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">rune</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> item <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token string\">\"hello 世界\"</span> <span class=\"token punctuation\">{</span>\n    s <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%q\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['h' 'e' 'l' 'l' 'o' ' ' '世' '界']</span></code></pre></div>\n<p>理解 slice 对于 append 函数十分重要。下面是 appendInt 函数用来追加 int 类型的 slice</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">appendInt</span><span class=\"token punctuation\">(</span>src <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> val <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> dist <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n\n\tzlen <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n\t<span class=\"token keyword\">if</span> zlen <span class=\"token operator\">&lt;=</span> <span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 有增长空间，则扩展 slice</span>\n\t\tdist <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>zlen<span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 空间不足，创建新的数组，容量扩大一倍</span>\n\t\tzcap <span class=\"token operator\">:=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span>\n\t\tdist <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> zlen<span class=\"token punctuation\">,</span> zcap<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tdist<span class=\"token punctuation\">[</span>zlen<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n\t<span class=\"token keyword\">return</span> dist\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>每次 appendInt 方法调用时都会检查是否有足够的容量来储存新的元素。如果有则扩展原有的 slice ，追加新的元素 y，输入的 src 和 返回的 dist 共享同一个底层数组。</p>\n<p>如果空间不够，则创建一个新的足够大的数组，将原有的值拷贝至新的数组，然后追加新的元素 y，输入的 src 和 返回的 dist 引用不同的底层数组</p>\n<p>内置的 append 函数可能使用类似的，但是更加复杂的增长策略。通常我们无法确定调用 append 函数是否会导致重新分配，因此也不能假定原来的 slice 和 返回的 slice 是否引用同一个底层数组</p>\n<p>append 函数也可以同时追加多个元素</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">s <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\ns <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\ns <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1 2 3 4 5 6]</span></code></pre></div>\n<h4>In-Place Slice</h4>\n<p>就地修改 slice 元素。给定一个字符串列表，noempty 方法返回非空的字符串列表</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">noempty</span><span class=\"token punctuation\">(</span>str <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> i <span class=\"token builtin\">int</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> str <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> s <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\t\tstr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s\n\t\t\ti<span class=\"token operator\">++</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> str<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>输入和输出的 slice 共享了同一个底层数组，避免了重新分配数组，但同时也修改了输入的数组</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">data <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">}</span>\ndata2 <span class=\"token operator\">:=</span> <span class=\"token function\">noempty</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// [one three three]</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>data2<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [one three]</span></code></pre></div>\n<p>使用 append 函数来重写 noempty 函数</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">noempty2</span><span class=\"token punctuation\">(</span>str <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> r <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token comment\">// 长度为 0 的 slice</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> str <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> s <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\t\tr <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>每次 noempty2 调用会创建一个长度为 0 的新数组，然后将非空元素追加至新的数组。返回值 r 和输入值 str 不再引用同一个底层数组</p>","frontmatter":{"title":"Golang 复合类型（三）","date":"October 23, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-composite-type-3/","previous":{"fields":{"slug":"/go/golang-composite-type-2/"},"frontmatter":{"title":"Golang 复合类型（二）"}},"next":null}}}