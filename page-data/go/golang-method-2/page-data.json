{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-method-2/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"ae770213-0629-5c04-8965-02cd3a10e347","excerpt":"Golang 方法（二）指针 receiver 方法调用一个函数会拷贝每一个参数值，如果一个函数需要更新一个变量，或者如果参数很大我们需要避免拷贝它，这时我们需要通过变量的指针来传递地址。对于方法也是一样如果需要更新 receiver 变量，应该附加类型的指针，比如 *Point这个方法的名字是 (*Point…","html":"<h2>Golang 方法（二）</h2>\n<h4>指针 receiver 方法</h4>\n<p>调用一个函数会拷贝每一个参数值，如果一个函数需要更新一个变量，或者如果参数很大我们需要避免拷贝它，这时我们需要通过变量的指针来传递地址。对于方法也是一样如果需要更新 receiver 变量，应该附加类型的指针，比如 *Point</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// ScaleBy 放大</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Point<span class=\"token punctuation\">)</span> <span class=\"token function\">ScaleBy</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tp<span class=\"token punctuation\">.</span>X <span class=\"token operator\">*=</span> i\n\tp<span class=\"token punctuation\">.</span>Y <span class=\"token operator\">*=</span> i\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个方法的名字是 (*Point).ScaleBy ，括号不能省略，因为没有括号表达式会解析为 *(Point.ScaleBy).</p>\n<p>在实际的编程中，一般约定如果任何一个 Point 方法有指针 receiver，那么 Point 所有方法都应该有一个指针 recevier，即使有些方法不需要指针。下面会同时使用指针和值的 receiver 来阐述它们之间的不同。</p>\n<p>命名类型（Point）和它们的指针（*Point）是出现在 recevier 声明中的唯一类型。为了避免歧义，方法声明中不允许指针类型的命名类型：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> P <span class=\"token operator\">*</span>Point \n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p P<span class=\"token punctuation\">)</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// error: invalid receiver P (pointer or interface type)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(*Point).ScaleBy 可以通过提供 *Point 指针来调用，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">:=</span> geometry<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">{</span>X<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 获取变量指针赋值给新的变量</span>\n\tpx <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>x\n\tpx<span class=\"token punctuation\">.</span><span class=\"token function\">ScaleBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>px<span class=\"token punctuation\">)</span> <span class=\"token comment\">// &amp;{0.8 3.2}</span>\n    \n    <span class=\"token comment\">// 获取变量指针直接调用指针 reveicer 方法</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ScaleBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//{0.96 3.84}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的这两种方式都不太优雅，还好有语言的帮助，如果 receiver p 是一个类型为 Point 的变量，但是需要一个 *Point 的 receiver，我们可以使用下面的简写：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">p<span class=\"token punctuation\">.</span><span class=\"token function\">ScaleBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>编译器将会对变量进行隐式 &#x26;p 操作。这种方式仅仅对变量有效，包括 struct 字段比如 p.X 和数组元素 perim[0]。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// package geometry</span>\n<span class=\"token keyword\">type</span> Line <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tStart Point\n\tEnd Point\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// pakcage main</span>\n\n<span class=\"token comment\">// struct 字段</span>\nline <span class=\"token operator\">:=</span> geometry<span class=\"token punctuation\">.</span>Line<span class=\"token punctuation\">{</span>\n    geometry<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    geometry<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nline<span class=\"token punctuation\">.</span>Start<span class=\"token punctuation\">.</span><span class=\"token function\">ScaleBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line\"</span><span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Line {{2 4} {3 4}}</span>\n\n<span class=\"token comment\">// 数组元素</span>\npoints <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>geometry<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\npoints<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">ScaleBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">)</span>\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Points\"</span><span class=\"token punctuation\">,</span> points<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [{0.8 1.6} {3 4}]</span></code></pre></div>\n<p>上面的 <code class=\"language-text\">line.Start.ScaleBy(2)</code> 等同于 <code class=\"language-text\">(&amp;line.Start).ScaleBy(2)</code>，<code class=\"language-text\">points[0].ScaleBy(0.8)</code> 等同于 <code class=\"language-text\">(&amp;points[0]).ScaleBy(0.8)</code>。</p>\n<p>不能在不能寻址的 Point receiver 上面调用 *Point 方法，因为无法获取到临时地址。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">geometry<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">ScaleBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//cannot take the address of geometry.Point literal</span></code></pre></div>\n<p>但是使用 *Point receiver 可以调用 Point 方法，因为可以通过地址获取值，同样编译器会插入一个隐式的 * 操作：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">pptr <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>geometry<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 下面两种方法调用是相同的</span>\npptr<span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span> </code></pre></div>\n<p>如果一个命名类型 T 的所有方法都是 T 类型的 receiver，那么复制这个类型的实例是安全的，调用它的任何方法都必然会产生一份副本。但是如果 T 有任何方法是指针 reveiver，应该避免复制 T 的实例，因为这样做可能会侵犯内部的不变性，比如复制一个 bytes.Buffer 实例，可能会导致原本的实例和复制的实例使用同一个底层 bytes 数组</p>","frontmatter":{"title":"Golang 方法（二）","date":"November 03, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-method-2/","previous":{"fields":{"slug":"/go/golang-method-1/"},"frontmatter":{"title":"Golang 方法（一）"}},"next":{"fields":{"slug":"/go/golang-method-3/"},"frontmatter":{"title":"Golang 方法（三）"}}}}}