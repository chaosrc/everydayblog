{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-goroutine-12/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"18fd7c5d-6dbf-5308-ace4-80fa50d86700","excerpt":"Golang 并发（十二）示例：聊天服务器创建一个聊天服务器，让几个用户之间广播文本信息。这个程序有 4 种 goroutine，一个 main goroutine 和 广播 goroutine 实例，每个用户连接有一个 handleConn goroutine 和 clientWriter goroutinemain…","html":"<h2>Golang 并发（十二）</h2>\n<h4>示例：聊天服务器</h4>\n<p>创建一个聊天服务器，让几个用户之间广播文本信息。这个程序有 4 种 goroutine，一个 main goroutine 和 广播 goroutine 实例，每个用户连接有一个 handleConn goroutine 和 clientWriter goroutine</p>\n<p>main goroutine 的主要工作是监听和接收客户端的网络连接</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tlisten<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">Listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tcp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\":9900\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// 运行广播</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">createBroadcaster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\tconn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> listen<span class=\"token punctuation\">.</span><span class=\"token function\">Accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token function\">handleConn</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后是广播 goroutine，它的本地变量 clients 记录当前连接的客户端集合</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> client <span class=\"token keyword\">chan</span><span class=\"token operator\">&lt;-</span> <span class=\"token builtin\">string</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\tentering <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> client<span class=\"token punctuation\">)</span>\n\tleaveing <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> client<span class=\"token punctuation\">)</span>\n\tmessage  <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">broadcaster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tclients <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>client<span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> cli <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>entering<span class=\"token punctuation\">:</span>\n\t\t\tclients<span class=\"token punctuation\">[</span>cli<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\t<span class=\"token keyword\">case</span> cli <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>leaveing<span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>clients<span class=\"token punctuation\">,</span> cli<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">case</span> msg <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>message<span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">for</span> cli <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> clients <span class=\"token punctuation\">{</span>\n\t\t\t\tcli <span class=\"token operator\">&lt;-</span> msg\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>广播 goroutine 监听全局的进出 channel，当监听到这些事件时更新 clients 集合。当监听到 message 事件时，给每个客户端发送这条消息。</p>\n<p>handleConn 方法创建一个消息 channel 通过 entering channel 通知广播器有新的连接进入。然后读取客户端发送的每一行文本并发送给广播器。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">handleConn</span><span class=\"token punctuation\">(</span>conn net<span class=\"token punctuation\">.</span>Conn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tname <span class=\"token operator\">:=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">RemoteAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\tentering <span class=\"token operator\">&lt;-</span> ch\n\tmessage <span class=\"token operator\">&lt;-</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s join\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n\n\tscanner <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewScanner</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 监听 ch 事件将广播的 message 输出给客户端</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> msg <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> ch <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintln</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 读取客户端文本信息</span>\n\t<span class=\"token keyword\">for</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstr <span class=\"token operator\">:=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tmessage <span class=\"token operator\">&lt;-</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: %s\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tleaveing <span class=\"token operator\">&lt;-</span> ch\n\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>运行</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ go build <span class=\"token keyword\">.</span>\n$ ./chat</code></pre></div>\n<p><img src=\"https://s2.ax1x.com/2019/11/26/MxJWJf.png\" alt=\"MxJWJf.png\"></p>","frontmatter":{"title":"Golang 并发（十二）","date":"November 25, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-goroutine-12/","previous":{"fields":{"slug":"/go/golang-goroutine-11/"},"frontmatter":{"title":"Golang 并发（十一）"}},"next":{"fields":{"slug":"/go/golang-concurrency-1/"},"frontmatter":{"title":"Golang 共享变量并发（一）"}}}}}