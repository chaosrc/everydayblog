{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-composite-type-4/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"e2e9a686-71e3-5cdf-8527-11048b2c2a7f","excerpt":"Golang 复合类型（四）Maps哈希表是最灵活和通用的数据结构之一。它是一个无序的 key/value 键值对集合，所有的 key 都是唯一的，对应的 value 可以通过 key 检索、更新、移除。在 Go 中，一个 map 指向一个哈希表，map 的类型写作 mapKV，其中 K 和 V…","html":"<h2>Golang 复合类型（四）</h2>\n<h4>Maps</h4>\n<p>哈希表是最灵活和通用的数据结构之一。它是一个无序的 key/value 键值对集合，所有的 key 都是唯一的，对应的 value 可以通过 key 检索、更新、移除。</p>\n<p>在 Go 中，一个 map 指向一个哈希表，map 的类型写作 map[K]V，其中 K 和 V 为键和值的类型。在同一个 map 中所有的 key 为同一类型，value 也为同一类型。key 的类型 K 必须能够使用 == 比较，这样 map 才能测试给定的 key 是否已经存在。value 的类型 V 没有限制条件。</p>\n<p>使用内置的 make 方法创建一个 map</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">m <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>使用 map 字面量创建 map，并添加一些初始化的键值对</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">m2 <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span>    <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"address\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"shanghai\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>更新和检索 value</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">m2<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span>\nm2<span class=\"token punctuation\">[</span><span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"12345678\"</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> m2<span class=\"token punctuation\">[</span><span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 输出：bar 12345678</span></code></pre></div>\n<p>使用内置的 delete 函数删除键值对</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%q, %q\\n\"</span><span class=\"token punctuation\">,</span>m2<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> m2<span class=\"token punctuation\">[</span><span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 输出：\"\", \"12345678\"</span></code></pre></div>\n<p>即使元素不在 map 中所有的这些操作也都是合法的，查找一个不在 map 中的 key 返回值类型的空值</p>\n<p>使用基于 range 的 for 循环遍历 map</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> m2 <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用 len 函数获取 key 数量</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<p>map 的空值为 nil，不指向任何哈希表</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> ages <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>ages <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true, 0</span></code></pre></div>\n<p>大部分操作包括检索、删除、len 和 range for 循环对于 nil map 是安全的，其表现和空的 map 一致，但是对 nil 的 map存储值会报错</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> ages <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\nages<span class=\"token punctuation\">[</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span> <span class=\"token comment\">//panic: assignment to entry in nil map</span></code></pre></div>\n<p>在存值之前需要先分配一个 map</p>","frontmatter":{"title":"Golang 复合类型（四）","date":"October 24, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-composite-type-4/","previous":{"fields":{"slug":"/go/golang-composite-type-3/"},"frontmatter":{"title":"Golang 复合类型（三）"}},"next":{"fields":{"slug":"/go/golang-composite-type-5/"},"frontmatter":{"title":"Golang 复合类型（五）"}}}}}