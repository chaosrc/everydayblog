{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-function-2/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"cdd67271-aed4-513c-aad2-def598814756","excerpt":"Golang 函数（二）Errors错误是包 API 或者应用程序用户界面的重要组成部分，失败只是可预期的行为之一，这就是 Go 处理错误的方式对于一个方法如果失败是一个可预期的行为则返回一个额外的结果，通常是最后一个。比如查找一个 key，key 值可能不存在通常，特别是 I/O…","html":"<h2>Golang 函数（二）</h2>\n<h4>Errors</h4>\n<p>错误是包 API 或者应用程序用户界面的重要组成部分，失败只是可预期的行为之一，这就是 Go 处理错误的方式</p>\n<p>对于一个方法如果失败是一个可预期的行为则返回一个额外的结果，通常是最后一个。比如查找一个 key，key 值可能不存在</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">value<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> cached<span class=\"token punctuation\">.</span><span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 处理 key 不存在的逻辑</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>通常，特别是 I/O，失败可能有很多种解释，这种情况下返回一个 error 做为额外的结果</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./a.txt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 处理文件打开失败</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>内置的 error 类型是一个 interface，error 可能是 nil 或者 非 nil 的，nil 表示成功而非 nil 表示失败，非 nil 时返回一个 error 值包含一个 Error 方法，调用 Error 方法返回错误信息</p>\n<h4>错误处理策略</h4>\n<p>当函数返回一个错误，它的调用者有责任来检查它并且采取适当的行动。根据不同的情况可能会有很多种可能性，下面是其中的五中方式</p>\n<p>第一种，也是最常见的，即 <em>传送</em>（propagate）错误，将错误抛给上一层调用者</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">res<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>第二种，对于短暂或者不定出现的错误问题，重试失败的操作可能是有意义的，可以是延迟一段时间重试，并且限制一个重试的数量或者重试花费的时间</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">waitForServer</span><span class=\"token punctuation\">(</span>url <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">.</span>Reader<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 设置超时时间</span>\n\ttimeout <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span>Minute <span class=\"token operator\">*</span> <span class=\"token number\">1</span>\n\tdeadline <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> retry <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Before</span><span class=\"token punctuation\">(</span>deadline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> retry<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tres<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">==</span> http<span class=\"token punctuation\">.</span>StatusOK <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> retry<span class=\"token punctuation\">)</span>\n\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">uint</span><span class=\"token punctuation\">(</span>retry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed %s timeout %s\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>第三种，如果程序无法继续，调用者可以打印错误信息并停止程序，但是这种行为一般在程序的入口 main 包中执行</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tres<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">waitForServer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.google.com\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\tos<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tio<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>第四种，某些情况下，仅仅需要打印错误信息，然后程序继续执行，可能会减少某些功能的的执行</p>\n<p>打印错误信息</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>将错误信息打印到标准错误输出</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后一种，在极少情况下可以安全的忽略掉某个错误</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">dir<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">TempDir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 使用临时文件夹 dir</span>\n<span class=\"token operator\">...</span>\n<span class=\"token comment\">// 移除临时文件夹</span>\nos<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAll</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span></code></pre></div>\n<p>调用 os.RemoveAll 可能会失败，但是程序可以忽略，因为操作系统会定时的清理临时文件</p>","frontmatter":{"title":"Golang 函数（二）","date":"October 29, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-function-2/","previous":{"fields":{"slug":"/go/golang-function-1/"},"frontmatter":{"title":"Golang 函数（一）"}},"next":{"fields":{"slug":"/go/golang-function-3/"},"frontmatter":{"title":"Golang 函数（三）"}}}}}