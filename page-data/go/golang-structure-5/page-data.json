{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-structure-5/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"620a1ef0-1ec4-55c8-b10e-7ab460790cd8","excerpt":"Go 程序结构（五）元组(Tuple)赋值除了前面提到的赋值方式外，Go 还支持另一种赋值方式——元组赋值，允许一次赋值多个变量。所有右边的表达式在任何变量更新之前执行，当某个变量同时出现在等号两边时非常有用，比如交换两个变量时求两个整数的最大公约数计算第 n 个 Fibonacci 数虽然 Tuple…","html":"<h2>Go 程序结构（五）</h2>\n<h4>元组(Tuple)赋值</h4>\n<p>除了前面提到的赋值方式外，Go 还支持另一种赋值方式——元组赋值，允许一次赋值多个变量。</p>\n<p>所有右边的表达式在任何变量更新之前执行，当某个变量同时出现在等号两边时非常有用，比如交换两个变量时</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">,</span> x\n\na<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></code></pre></div>\n<p>求两个整数的最大公约数</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> b <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\ta<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">%</span> b\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> a\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>计算第 n 个 Fibonacci 数</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\tx<span class=\"token punctuation\">,</span> y <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n\t\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tx<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">,</span> x <span class=\"token operator\">+</span> y\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> y\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>虽然 Tuple 赋值很好用，但是在使用复杂表达式时应该尽量避免使用 Tuple 赋值，分开成多个语句更容易阅读和理解</p>\n<p>当一个函数有多个返回值时，如果使用赋值语句，那么左边的变量数必须与函数返回值的数量相等</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// os.Open 函数返回两个值</span>\nfile<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./a.out\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// map 查找，返回结果，以及是否成功</span>\nv<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// 类型断言</span>\nv<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> v<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// channel 接受</span>\nv<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span> ch</code></pre></div>\n<p>如果不想要某个变量，可以将它赋值为空标识符</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 忽略返回的字节数</span>\n<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 忽略返回结果</span>\n<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span> ch</code></pre></div>\n<h4>可赋值性</h4>\n<p>赋值语句是一种明确的赋值方式，但是程序中还有很多隐含的赋值方式：函数调用隐含了对相应参数的赋值，return 语句隐含了对相应结果变量的赋值，字面量表达式，比如 slice：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">metal <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"gold\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"silver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bornze\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>隐含了对每一个元素的赋值。所有非原始类型比如 map、channel，都有类似的隐含赋值方式</p>\n<p>两个变量是否能够使用 == 或 != 与可赋值性相关：在任何比较中，一个运算对象必须能够赋值给第二个运算对象，或者相反</p>","frontmatter":{"title":"Go 程序结构（五）","date":"October 11, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-structure-5/","previous":{"fields":{"slug":"/go/golang-structure-4/"},"frontmatter":{"title":"Go 程序结构（四）"}},"next":{"fields":{"slug":"/go/golang-structure-6/"},"frontmatter":{"title":"Go 程序结构（六）"}}}}}