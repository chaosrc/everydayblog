{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-basic-type-4/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"ffc30101-b462-56c8-a686-ffc17621630d","excerpt":"Golang 基础数据类型（四）UTF-8UTF-8 是一个可变长度的 Unicode 编码，它使用 1 到4 个字节来呈现每一个符号（rune），只有 ASCII 字符是 1 个字节，其他通常是 2 到 3 个字节。第一个字节的高阶位指示后面有多少个字节，高阶位为 0 表示 7-bit ASCII，此时每个 rune…","html":"<h2>Golang 基础数据类型（四）</h2>\n<h4>UTF-8</h4>\n<p>UTF-8 是一个可变长度的 Unicode 编码，它使用 1 到4 个字节来呈现每一个符号（rune），只有 ASCII 字符是 1 个字节，其他通常是 2 到 3 个字节。第一个字节的高阶位指示后面有多少个字节，高阶位为 0 表示 7-bit ASCII，此时每个 rune 只有一个 byte。高阶位为 110 表示每个 rune 有两个字节，第二个 byte 以 10 开头，如下图</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/18/Kefms1.png\"></p>\n<p>可变长度编码妨碍了直接通过下标获取字符串第 n 个字符，但是 UTF-8 有很多优秀的特性可以弥补这点不足，比如编码非常简洁、兼容 ASCII、自动同步</p>\n<p>Go 的源码文件使用 UTF-8 编码。<code class=\"language-text\">unicode</code> 包提供了方法来操作单独的 rune，<code class=\"language-text\">unicode/utf8</code> 包提供来编码和解码 UTF-8 字节的方法。</p>\n<p>很多 Unicode 字符很难通过键盘输入，甚至有些是不可见的。Go 字符串字面量转义的 Unicode 允许我们使用它们的数值代码点来表示，\\uhhhh 表示 16-bit 的值，\\Uhhhhhhhh 表示 32-bit 的值，其中每个 h 都是一个 16 进制的数值。下面的字符串字面量表示同样的 6-byte 字符串</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"世界\"</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\xe4\\xb8\\x96\\xe7\\x95\\x8c\"</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\u4e16\\u754c\"</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\U00004e16\\U0000754c\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>输出</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">世界\n世界\n世界\n世界</code></pre></div>\n<p>由于 UTF-8 的优良特性，很多字符串操作不需要解码，比如测试一个字符串是否是包含另一个做为前缀：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">hasPrefix</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> prefix <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> prefix\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果我们关注每一个独立的 Unicode 字符，可以使用 <code class=\"language-text\">unicode/utf8</code> 包中提供的方法。比如解码 UTF-8</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">{</span>\n\t\tr<span class=\"token punctuation\">,</span> size <span class=\"token operator\">:=</span> utf8<span class=\"token punctuation\">.</span><span class=\"token function\">DecodeRuneInString</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t%c\\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n\t\ti <span class=\"token operator\">+=</span> size\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>输出</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token number\">20320</span>   你\n<span class=\"token number\">22909</span>   好</code></pre></div>\n<p>但是这种方法非常麻烦，Go range 循环默认执行 UTF-8 的解码</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">decodeRange</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> r <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t%c\\t%d\\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">decodeRange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"世界\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>输出</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token number\">19990</span>   世      <span class=\"token number\">0</span>\n<span class=\"token number\">30028</span>   界      <span class=\"token number\">3</span></code></pre></div>","frontmatter":{"title":"Golang 基础数据类型（四）","date":"October 18, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-basic-type-4/","previous":{"fields":{"slug":"/go/golang-basic-type-3/"},"frontmatter":{"title":"Golang 基础数据类型（三）"}},"next":null}}}