{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-baisc-type-2/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"10726e3a-b291-5203-999a-6e2497638cbc","excerpt":"Golang 基础数据类型（二）浮点数Go 提供了两种大小的浮点数 float32 和 float64。float32 提供了大约 6 位小数精度，而 float64 提供了 15 位精度。大多数情况下应该首选 float64，因为 float3…","html":"<h2>Golang 基础数据类型（二）</h2>\n<h4>浮点数</h4>\n<p>Go 提供了两种大小的浮点数 float32 和 float64。float32 提供了大约 6 位小数精度，而 float64 提供了 15 位精度。大多数情况下应该首选 float64，因为 float32 计算如果不是特别小心很容易累计精度错误</p>\n<p>浮点数可以使用十进制字面量表示，小数点前面或后面可以省略</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">a <span class=\"token operator\">:=</span> <span class=\"token number\">1.2345</span>\nb <span class=\"token operator\">:=</span> <span class=\"token number\">1.</span>\nc <span class=\"token operator\">:=</span> <span class=\"token number\">.2345</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出: 1.2345 1 0.2345</span></code></pre></div>\n<p>大的数据可以使用科学计数法（e 或 E ）</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">a <span class=\"token operator\">:=</span> <span class=\"token number\">2.234e10</span>\nb <span class=\"token operator\">:=</span> <span class=\"token number\">3.456e-10</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span></code></pre></div>\n<p>浮点数在 Printf 中使用 %g 可以打印适当精度的结果，但是对于表格数据使用 %e 或者 %f 更加合适</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = %8.3f\\n\"</span><span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Exp</span><span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>输出</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">i =    1.000\ni =    2.718\ni =    7.389\ni =   20.086</code></pre></div>\n<h4>复数</h4>\n<p>Go 提供了种个大小的复数 complex64 和 complex128。内置的 complex 方法用于创建复数，real 和 imag 方法分别用来获取实部和虚部</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> a <span class=\"token builtin\">complex128</span> <span class=\"token operator\">=</span> <span class=\"token function\">complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> b <span class=\"token builtin\">complex128</span> <span class=\"token operator\">=</span> <span class=\"token function\">complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 输出：(-12+14i)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">real</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 输出：1</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">imag</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 输出： 3</span></code></pre></div>\n<h4>布尔类型（bool）</h4>\n<p>bool 类型只有两个可能的值 true 和 false。if 和 for 语句中的条件为 bool 值，比较操作比如 == 或 &#x3C; 产生一个 bool 结果。</p>\n<p>bool 值可以与逻辑操作符 &#x26;&#x26;、|| 组合使用，比如</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> s <span class=\"token builtin\">string</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在 Go 中不会隐式的将 bool 类型转换为数值类型比如 0 或 1</p>","frontmatter":{"title":"Golang 基础数据类型（二）","date":"October 16, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-baisc-type-2/","previous":{"fields":{"slug":"/go/golang-basic-type-int/"},"frontmatter":{"title":"Golang 基础数据类型（一）"}},"next":null}}}