{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-structure-4/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"0b9b09d9-bdd2-53d5-8e9f-e74fa9179697","excerpt":"Go 程序结构（四）new 函数另一个创建变量的方式是使用内置的  函数。表达式  创建了 T 类型的一个未命名变量，初始化为 T 类型零值，并且返回它的地址使用 new 表达式和原本的创建局部变量然后获取其地址是一样的，但是少了声明变量的过程直接拿到地址，因此 new 表达式只是一个语法。下面的两个方法是等价的new…","html":"<h2>Go 程序结构（四）</h2>\n<h4>new 函数</h4>\n<p>另一个创建变量的方式是使用内置的 <code class=\"language-text\">new</code> 函数。表达式 <code class=\"language-text\">new(T)</code> 创建了 T 类型的一个未命名变量，初始化为 T 类型零值，并且返回它的地址</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tp <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\n\n\t<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用 new 表达式和原本的创建局部变量然后获取其地址是一样的，但是少了声明变量的过程直接拿到地址，因此 new 表达式只是一个语法。下面的两个方法是等价的</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">newFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">newFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>a\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>new 是一个预定义函数而不是关键词，因此 new 可以被重新定义</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">new</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> old <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token builtin\">new</span> <span class=\"token operator\">-</span> old\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>变量生命周期</h4>\n<p>变量的生命周期是程序执行时变量存在的时间间隔。包级别的变量生命周期是整个程序执行时间，局部变量的生命周期是创建实例开始到变量无法达到（unreachable)</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">forLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的代码中 i 只在 for 循环内部有效</p>\n<h4>赋值</h4>\n<p>通过赋值语句可以更新变量的值，最简单的形式是使用 = 赋值。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">assig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\t<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\tperson<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"jack\"</span>\n\tcount<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> scale\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>每个算术和按位运算符都有对应的赋值操作</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">assig2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    b <span class=\"token operator\">:=</span> <span class=\"token number\">1</span>\n    \n\tb <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    b<span class=\"token operator\">++</span>\n    \n\tb <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n\tb<span class=\"token operator\">--</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Go 程序结构（四）","date":"October 10, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-structure-4/","previous":{"fields":{"slug":"/go/golang-structure-3/"},"frontmatter":{"title":"Go 程序结构（三）"}},"next":{"fields":{"slug":"/sql/sql-create-table-2/"},"frontmatter":{"title":"创建和操控表（二）"}}}}}