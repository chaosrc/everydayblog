{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-function-4/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"783f60f0-7b91-5b84-b995-2cab3f3345b8","excerpt":"Golang 函数（四）可变参数函数一个可变参数函数可以使用不同数量的参数调用函数。对最后一个参数类型使用省略号 ”…” 来声明可变参数。调用者会隐式的创建一个数组，拷贝参数至数组，将整个数组的slice 传人函数。如果参数已经是 slice 可以在参数后面加省略号传人defer 函数调用下面的函数获取一个 HTML…","html":"<h2>Golang 函数（四）</h2>\n<h4>可变参数函数</h4>\n<p>一个可变参数函数可以使用不同数量的参数调用函数。对最后一个参数类型使用省略号 ”…” 来声明可变参数。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>numbers <span class=\"token operator\">...</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> s <span class=\"token builtin\">int</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> num <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> numbers <span class=\"token punctuation\">{</span>\n\t\ts <span class=\"token operator\">+=</span> num\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> s\n<span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>             <span class=\"token comment\">// 0</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">// 1</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\">// 3</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 10</span></code></pre></div>\n<p>调用者会隐式的创建一个数组，拷贝参数至数组，将整个数组的slice 传人函数。如果参数已经是 slice 可以在参数后面加省略号传人</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">nums <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>defer 函数调用</h4>\n<p>下面的函数获取一个 HTML 文档并打印标题，如果 content-type 不是 HTML 者返回错误</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">title</span><span class=\"token punctuation\">(</span>url <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\tres<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n\tcontentType <span class=\"token operator\">:=</span> res<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>contentType<span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tres<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not HTML\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tdoc<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> html<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span>\n\tres<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HTML parse failed\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tvisitNode <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">*</span>html<span class=\"token punctuation\">.</span>Node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>Type <span class=\"token operator\">==</span> html<span class=\"token punctuation\">.</span>ElementNode <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>Data <span class=\"token operator\">==</span> <span class=\"token string\">\"title\"</span> <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>FirstChild <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>FirstChild<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">forEachNode</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">,</span> visitNode<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">forEachNode</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">*</span>html<span class=\"token punctuation\">.</span>Node<span class=\"token punctuation\">,</span> pre <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>html<span class=\"token punctuation\">.</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> post <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>html<span class=\"token punctuation\">.</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> pre <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">pre</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> node<span class=\"token punctuation\">.</span>FirstChild<span class=\"token punctuation\">;</span> n <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>NextSibling <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">forEachNode</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> pre<span class=\"token punctuation\">,</span> post<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> post <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">post</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\terr <span class=\"token operator\">:=</span> <span class=\"token function\">title</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ go build -o title .\n$ ./title https://www.github.com\nThe world’s leading software development platform · GitHub</code></pre></div>\n<p>可以看到 res.Body.Close() 有重复调用，用来保证所有执行路径下包括失败，都能正确关闭网络连接。当函数变得更加复杂，需要处理更多错误情况时，那么这种清理逻辑的维护可能会成为一个问题。使用 Go 的 <code class=\"language-text\">defer</code> 机制使这种处理变得很简单</p>\n<p>一个 defer 语句是一个普通的函数或者方法调用前加上一个 defer 关键词。这个函数和参数表达式在语句执行时求值，但是实际调用是在包含这个 defer 语句的函数结束后。可以有任意多个 defer 调用，它们以声明顺序相反的顺序执行</p>\n<p>上面的 title 函数使用 defer 关闭请求连接</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">title</span><span class=\"token punctuation\">(</span>url <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\tres<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 使用 defer 关闭请求</span>\n    <span class=\"token keyword\">defer</span> res<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tcontentType <span class=\"token operator\">:=</span> res<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>contentType<span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// res.Body.Close()</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not HTML\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tdoc<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> html<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// res.Body.Close()</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HTML parse failed\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 处理逻辑</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用多个 defer 调用</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">mdefer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"defer 1\"</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"defer 2\"</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">1\n2\n3\ndefer 2\ndefer 1</code></pre></div>","frontmatter":{"title":"Golang 函数（四）","date":"October 31, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-function-4/","previous":{"fields":{"slug":"/go/golang-function-3/"},"frontmatter":{"title":"Golang 函数（三）"}},"next":null}}}