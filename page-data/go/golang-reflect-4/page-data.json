{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-reflect-4/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"7cb8a23e-51c3-5de2-963c-c1b786a2381e","excerpt":"Golang 反射（四）使用 reflect.Value 设置变量Go 表达像 x、x.f1 和 *p 表示一个变量，但是其他的比如 x+1、f(2) 不是变量。变量是一个包含值的可寻址的存储位置，它的值可以通过这个地址更新。reflect.Value 也有相似的差别，有些是可寻址的有些不是。a 和 b…","html":"<h2>Golang 反射（四）</h2>\n<h4>使用 reflect.Value 设置变量</h4>\n<p>Go 表达像 x、x.f[1] 和 *p 表示一个变量，但是其他的比如 x+1、f(2) 不是变量。变量是一个包含值的可寻址的存储位置，它的值可以通过这个地址更新。</p>\n<p>reflect.Value 也有相似的差别，有些是可寻址的有些不是。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">x <span class=\"token operator\">:=</span> <span class=\"token number\">2</span>                    <span class=\"token comment\">// 值    类型    是否为变量</span>\na <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 2     int     否</span>\nb <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 2     int     否</span>\nc <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// &amp;x    *int    否</span>\nd <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>             <span class=\"token comment\">// 2     int     是（x）</span></code></pre></div>\n<p>a 和 b 中的值只是整数 2 的拷贝，不能寻址。c 是 指针 &#x26;x 的拷贝，也不能寻址。实际上 reflect.ValueOf(x) 返回的值都不能寻址。但是 d 通过对指针 c 取值，指向一个变量，因此是可以寻址的。我们可以使用 reflect.ValueOf(&#x26;x).Elem() 对任意的变量获取可寻址的值。</p>\n<p>CanAddr 方法可以判断一个值是否可寻址</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">list <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"12\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"he\"</span><span class=\"token punctuation\">}</span>\nval <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// slice 中的元素指向一个指针因此是可寻址的</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">CanAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span></code></pre></div>\n<p>从一个可寻址的 reflect.Value 恢复为变量需要三步。首先，调用Addr() 返回一个值保持变量的指针，下一步调用这个值的 Interface() 方法返回包含指针的 inerface{} 值，最后如果我们知道变量的类型可以使用类型断言来恢复接口的内容为原本的指针。通过指针可以更新变量值：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">list <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"12\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"he\"</span><span class=\"token punctuation\">}</span>\nval <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\npt <span class=\"token operator\">:=</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Addr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Interface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">*</span>pt <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [12 abc]</span></code></pre></div>\n<p>也可以使用 Value.Set 方法直接更新可寻址的值:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">list <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"12\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"he\"</span><span class=\"token punctuation\">}</span>\nval <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\nval<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ABC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nval<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"456\"</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [456 ABC]</span></code></pre></div>\n<p>inerface{} 变量可以使用 Set 方法，但是不能使用 SetInt、SetString 等方法</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> f <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nf1 <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nf1<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n\nf1<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token comment\">// hello</span>\n\nf1<span class=\"token punctuation\">.</span><span class=\"token function\">SetInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//panic: reflect: call of reflect.Value.SetInt on interface Value</span></code></pre></div>\n<p>对于未导出的 struct 字段可以通过反射获取但是不能更新。</p>\n<p>可以通过 CanSet 方法来判断一个可寻址的值是否可以更新</p>","frontmatter":{"title":"Golang 反射（四）","date":"December 11, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-reflect-4/","previous":{"fields":{"slug":"/go/golang-reflect-3/"},"frontmatter":{"title":"Golang 反射（三）"}},"next":{"fields":{"slug":"/go/golang-reflect-5/"},"frontmatter":{"title":"Golang 反射（五）"}}}}}