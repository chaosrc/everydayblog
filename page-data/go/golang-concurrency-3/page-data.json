{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-concurrency-3/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"a9221d90-6812-5355-8154-3402c822cf33","excerpt":"Golang 共享变量并发（三）读写互斥锁：sync.RWMutex在一些场景下，我们需要一种特殊的锁允许只读操作彼此平行进行，但是写操作完全独占访问。这种锁称为多读单写锁（multiple readers, single writer lock），在 Go 中通过 sync.RWMutex 提供Balance…","html":"<h2>Golang 共享变量并发（三）</h2>\n<h4>读写互斥锁：sync.RWMutex</h4>\n<p>在一些场景下，我们需要一种特殊的锁允许只读操作彼此平行进行，但是写操作完全独占访问。这种锁称为多读单写锁（multiple readers, single writer lock），在 Go 中通过 sync.RWMutex 提供</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> balance <span class=\"token builtin\">int</span>\n<span class=\"token keyword\">var</span> mu sync<span class=\"token punctuation\">.</span>RWMutex\n<span class=\"token keyword\">func</span> <span class=\"token function\">Balance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\tmu<span class=\"token punctuation\">.</span><span class=\"token function\">RLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 读锁</span>\n\t<span class=\"token keyword\">defer</span> mu<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> balance\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Balance 方法现在调用 RLock 和 RUnlock 来获取和释放读锁。RLock 只能被用在对共享变量没有写入操作的临界区。</p>\n<h4>内存同步</h4>\n<p>你也许会疑问为什么 Balance 操作需要互斥，它只是单个操作，没有其他 goroutine 在它‘中间’执行的危险。这里有两个理由需要互斥，第一 Blance 不能在其他操作（比如 Withdraw ）‘中间’执行，第二同步不仅仅是多个 goroutine 的执行顺序，也受内存影响。</p>\n<p>在一个现代计算机上可能有许多处理器，每一个都拥有主内存的本地缓存。为了效率，写入内存被缓存在每个处理器，只有在需要的时候才会排出（flushed）至主内存。像 channel通信和互斥操作这些基本的同步操作会使得处理器排出并提交它累计的写入，因此在这个点上 goroutine 执行的影响能够保证对其他运行的 goroutine 是可见的。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> x<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">int</span>\n<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y:\"</span><span class=\"token punctuation\">,</span> y， “ ”<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    y <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x:\"</span><span class=\"token punctuation\">,</span> x， “ ”<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>上面的两个 goroutine 并发执行并且没有使用互斥锁来获取共享变量，因此输出结果有下面 4 种情况</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">y:0 x:1\nx:0 y:1\nx:1 y:1\ny:1 x:1</code></pre></div>\n<p>但是下面的两种结果会让人感到意外：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">x:0 y:0\ny:0 x:0</code></pre></div>\n<p>它们的发生可能处决于编译器、CPU和其他的一些因素</p>","frontmatter":{"title":"Golang 共享变量并发（三）","date":"November 28, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-concurrency-3/","previous":{"fields":{"slug":"/go/golang-concurrency-2/"},"frontmatter":{"title":"Golang 共享变量并发(二)"}},"next":{"fields":{"slug":"/go/golang-concurrency-4/"},"frontmatter":{"title":"Golang 共享变量并发（四）"}}}}}