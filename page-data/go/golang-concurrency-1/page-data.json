{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-concurrency-1/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"557939b1-faf8-5b2a-93fc-9c3b5374e464","excerpt":"Golang 共享变量并发（一）竞态条件在一个顺序执行的程序中，一个程序只有一个 goroutine，程序的每一步都按照程序逻辑决定的顺序执行，在有两个或多个 goroutine 的程序中，每一个 goroutine 的每一步都按照顺序执行，但是通常我们不知道一个 goroutine 的事件 x…","html":"<h2>Golang 共享变量并发（一）</h2>\n<h4>竞态条件</h4>\n<p>在一个顺序执行的程序中，一个程序只有一个 goroutine，程序的每一步都按照程序逻辑决定的顺序执行，在有两个或多个 goroutine 的程序中，每一个 goroutine 的每一步都按照顺序执行，但是通常我们不知道一个 goroutine 的事件 x 是发生在另一个 goroutine 事件 y 的前面还是后面，或者是同时发生。当我们无法确定的说一个事件发生在另一个事件之前时，事件 x 和 y 为并发。</p>\n<p>竞态条件是程序因为多个 goroutine 的一些交叉操作而没有给出正确结果的情况。</p>\n<p>下面的程序并发更新 x 为两个不同长度的 slice。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> x <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nx<span class=\"token punctuation\">[</span><span class=\"token number\">99999</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></code></pre></div>\n<p>最后一个语句中 x 的值不确定，可能是 nil、长度为 10 的slice或长度为 1000000 的 slice，这种现象被称为未定义行为（undefined behavior）。</p>\n<p>有三种方式避免数据竞争</p>\n<p>第一种：不修改变量。比如下面的 map，在每个 key 第一次请求时填充，如果 Icon 顺序执行，程序可以正常工作，但是如果 Icon 并发调用，则对 map 的获取存在数据竞争。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> icons <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>image<span class=\"token punctuation\">.</span>Image<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">loadIcon</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> image<span class=\"token punctuation\">.</span>Image\n\n<span class=\"token comment\">// 并发不安全</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Icon</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> image<span class=\"token punctuation\">.</span>Image <span class=\"token punctuation\">{</span>\n\ticon<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> icons<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n\t\ticon <span class=\"token operator\">=</span> <span class=\"token function\">loadIcon</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\t\ticons<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> icon\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> icon\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果我们在其他 goroutine 创建之前，用所有需要的数据初始化 map，然后不再修改，那么任意数量的 goroutine 都可以安全的并发调用 Icon 方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> icons <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>image<span class=\"token punctuation\">.</span>Image<span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"spades.png\"</span><span class=\"token punctuation\">:</span> <span class=\"token function\">loadIcon</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spades.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"hearts.png\"</span><span class=\"token punctuation\">:</span> <span class=\"token function\">loadIcon</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hearts.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">loadIcon</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> image<span class=\"token punctuation\">.</span>Image\n\n<span class=\"token comment\">// 并发安全</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Icon</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> image<span class=\"token punctuation\">.</span>Image <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">return</span> icons<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>第二种方式是避免从多个 goroutine 获取变量。因为其他 goroutine 无法直接获取变量，因此必须使用 channel 发送请求来更新变量，这也是 Go 的标语“不要通过共享变量来通信，而是要通过通信来共享变量”的含义。</p>\n<p>下面的程序通过 channel 来共享变量</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> deposits <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> balances <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span>amount <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tdeposits <span class=\"token operator\">&lt;-</span> amount\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Balance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;-</span>balances\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">teller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> balance <span class=\"token builtin\">int</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> amount <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>deposits<span class=\"token punctuation\">:</span>\n\t\t\tbalance <span class=\"token operator\">+=</span> amount\n\t\t<span class=\"token keyword\">case</span> balances <span class=\"token operator\">&lt;-</span> balance<span class=\"token punctuation\">:</span>\n\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">teller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tdone <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tdone <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tdone <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">&lt;-</span>done\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">Balance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>第三种是允许多个 goroutine 获取变量，但是控制每次只有一个 goroutine，这种方式叫做互斥。</p>","frontmatter":{"title":"Golang 共享变量并发（一）","date":"November 26, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-concurrency-1/","previous":{"fields":{"slug":"/go/golang-goroutine-12/"},"frontmatter":{"title":"Golang 并发（十二）"}},"next":{"fields":{"slug":"/go/golang-concurrency-2/"},"frontmatter":{"title":"Golang 共享变量并发(二)"}}}}}