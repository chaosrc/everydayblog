{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-interface-4/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"580249e9-c32c-5a0e-a6f5-e08ae47dce6d","excerpt":"Golang 接口（四）排序接口 sort.Interface和字符串格式化一样，排序在很多编程语言中也是一个非常频繁的操作。Go 中的 sort 包提供了根据排序函数对任何序列进行就地(in-place)排序的能力。在很多语言中，排序算法与序列的数据类型相关，排序函数与元素类型相关。相反，Go 的 sort.Sort…","html":"<h2>Golang 接口（四）</h2>\n<h4>排序接口 sort.Interface</h4>\n<p>和字符串格式化一样，排序在很多编程语言中也是一个非常频繁的操作。</p>\n<p>Go 中的 sort 包提供了根据排序函数对任何序列进行就地(in-place)排序的能力。在很多语言中，排序算法与序列的数据类型相关，排序函数与元素类型相关。相反，Go 的 sort.Sort 方法对序列和元素的类型没有任何假设，而是使用 sort.Interface 来指定通用排序算法和每个数据类型之间的契约。这个接口的实现同时决定了序列的具体表现形式（通常是 slice）和元素的期望排序</p>\n<p>实现就地排序需要三个东西：序列的长度、比较两个元素的方法以及两个元素的交换方式</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> sort\n\n<span class=\"token keyword\">type</span> Interface <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span>\n    <span class=\"token function\">Less</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token comment\">// i,j 为序列元素的下标</span>\n    <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>对任何序列进行排序，需要定义一个类型实现这三个方法，然后将这个类型的实例传人 sort.Sort 方法。</p>\n<p>下面实现一个 string 排序</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> StringList <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s StringList<span class=\"token punctuation\">)</span> <span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s StringList<span class=\"token punctuation\">)</span> <span class=\"token function\">Less</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s StringList<span class=\"token punctuation\">)</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ta <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Python\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Javascript\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Kotlin\"</span><span class=\"token punctuation\">}</span>\n\n\tsort<span class=\"token punctuation\">.</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">StringList</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 将 []string 转换为 StringList 进行排序</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%q\\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span> \n    <span class=\"token comment\">// [\"C\" \"Java\" \"Javascript\" \"Kotlin\" \"Python\"]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>StringList(a) 将 []string 转换为 StringList 类型，生成了一个具有相同长度、容量和底层数组的 slice 值，同时也具有了排序需要的三个方法。</p>\n<p>对复杂类型也可以进行排序。下面定义一个 Track 类型，然后对它进行排序</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Track <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tTitle  <span class=\"token builtin\">string</span>\n\tArtist <span class=\"token builtin\">string</span>\n\tAlbum  <span class=\"token builtin\">string</span>\n\tYear   <span class=\"token builtin\">int</span>\n\tLength time<span class=\"token punctuation\">.</span>Duration\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> byArtist <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Track\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b byArtist<span class=\"token punctuation\">)</span> <span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span>           <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b byArtist<span class=\"token punctuation\">)</span> <span class=\"token function\">Less</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Artist <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Artist <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b byArtist<span class=\"token punctuation\">)</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>      <span class=\"token punctuation\">{</span> b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    tracks <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Track<span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">\"Go\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Delilah\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"From the Roots Up\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2012</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Minute <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">\"Go\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Moby\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Moby\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1992</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Minute <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">\"Go Ahead\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Alicia Keys\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"As I Am\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2007</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Minute <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">\"Ready 2 Go\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Martin Solveig\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Smash\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2011</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Minute <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tsort<span class=\"token punctuation\">.</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">byArtist</span><span class=\"token punctuation\">(</span>tracks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>tracks<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面定义了一个 byArtist 类型，使用 Artist 字段进行排序。如果要对其他字段进行排序，我们必须定义一个新的类型，比如对Year字段排序定义一个 byYear 类型。但是使用其他字段排序时 Len 方法和 Swap 方法是一样的，只有比较函数 Less 不一样。这时可以定义一个 struct 类型组合一个 slice 和方法，使得定义新的排序时只需要定义比较函数，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> customSort <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\ttracks <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>Track\n\tcomp   <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">*</span>Track<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c customSort<span class=\"token punctuation\">)</span> <span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>tracks<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c customSort<span class=\"token punctuation\">)</span> <span class=\"token function\">Less</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">comp</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>tracks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>tracks<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c customSort<span class=\"token punctuation\">)</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tc<span class=\"token punctuation\">.</span>tracks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>tracks<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>tracks<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>tracks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用 customSort 进行排序</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">sort<span class=\"token punctuation\">.</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>customSort<span class=\"token punctuation\">{</span>tracks<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">*</span>Track<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> a<span class=\"token punctuation\">.</span>Title <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">.</span>Title <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>Title <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>Title\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> a<span class=\"token punctuation\">.</span>Year <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">.</span>Year <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>Year <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>Year\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>Length\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>结果</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">{Go Moby Moby 1992 2m0s}\n{Go Delilah From the Roots Up 2012 3m0s}\n{Go Ahead Alicia Keys As I Am 2007 5m0s}\n{Ready 2 Go Martin Solveig Smash 2011 4m0s}</code></pre></div>","frontmatter":{"title":"Golang 接口（四）","date":"November 09, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-interface-4/","previous":{"fields":{"slug":"/go/golang-interface-3/"},"frontmatter":{"title":"Golang 接口（三）"}},"next":null}}}