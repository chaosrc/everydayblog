{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-low-level-1/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"5de48cb8-139e-5442-8f6a-d01acd3f53af","excerpt":"Golang 底层编程（一）Go 语言的设计保证一些安全性能，限制 Go 程序出错的方式。在编译时，类型检查检测大部分对类型的不当操作，比如，使用字符串减去另一个字符串。严格的类型转换规则阻止直接获取内置类型（比如 string，maps，slices，channel…","html":"<h2>Golang 底层编程（一）</h2>\n<p>Go 语言的设计保证一些安全性能，限制 Go 程序出错的方式。在编译时，类型检查检测大部分对类型的不当操作，比如，使用字符串减去另一个字符串。严格的类型转换规则阻止直接获取内置类型（比如 string，maps，slices，channel）的内部。</p>\n<p>对于不能直接进行静态检查的错误，比如数组越界、nil 指针的解引用，动态检查保证在任何禁止操作发生时，程序立即终止。自动内存管理（垃圾回收）消除“清空后使用（use after free）”的 bug，以及大部分的内存泄露。</p>\n<p>通过隐藏底层细节使得 Go 程序非常轻便。但是有时候我们也会选择牺牲这些安全的保证来达到最高性能，或与其他语言库进行交互，或去实现一个纯 Go 程序无法表达的函数。</p>\n<p>Go 中的 unsafe 包使得我们可以走出常规的规则之外，可以使用 cgo 来创建 Go 和 C 库之间的绑定以及调用操作系统。</p>\n<h4>unsafe.Sizeof, Alignof, 和 Offsetof</h4>\n<p>unsafe.Sizeof 函数返回操作对象呈现的字节大小，可以是任何类型的表达式。Sizeof 调用是类型为 uintptr 的常量表达式，可以做为数组的大小使用，或计算其他常量。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//输出： 8</span></code></pre></div>\n<p>Sizeof 只会获取每个数据结构固定部分的大小，比如字符串的指针和长度，而不是字符串的内容。</p>\n<p>下面使用 word 来表示类型的大小，1 word 表示 32 位系统的 4 个 bytes， 64 位系统上的 8 个 bytes。</p>\n<p>Go 中非集合类型的大小</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bool</td>\n<td>1 byte</td>\n</tr>\n<tr>\n<td>intN,uintN,floatN,complexN</td>\n<td>N/8 bytes</td>\n</tr>\n<tr>\n<td>int,uint,uintptr</td>\n<td>1 word</td>\n</tr>\n<tr>\n<td>*T</td>\n<td>1 word</td>\n</tr>\n<tr>\n<td>string</td>\n<td>2 words (data,len)</td>\n</tr>\n<tr>\n<td>[]T</td>\n<td>3 words (daa,len,cap)</td>\n</tr>\n<tr>\n<td>map</td>\n<td>1 word</td>\n</tr>\n<tr>\n<td>func</td>\n<td>1 word</td>\n</tr>\n<tr>\n<td>chan</td>\n<td>1 word</td>\n</tr>\n<tr>\n<td>inerface</td>\n<td>2 words (type,value)</td>\n</tr>\n</tbody>\n</table>\n<p>unsafe.Alignof 函数返回参数类型对齐的大小。和 Sizeof 一样，接收任何类型的表达，产生一个常量。</p>\n<p>unsafe.Offsetof 函数的操作对象必须是一个字段选择器 x.f，计算 相对于 struct x 开始处的偏移量。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> x <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    a <span class=\"token builtin\">bool</span>\n    b <span class=\"token builtin\">int16</span>\n    c <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>下图展示了 x 的内存分配情况</p>\n<p><img src=\"https://s2.ax1x.com/2019/12/14/QW3aCt.png\" alt=\"QW3aCt.png\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 32位系统\nSizeof(x)   = 16  Alignof(x)   = 4\nSizeof(x.a) = 1   Alignof(x.a) = 1  Offsetof(x.a) = 0\nSizeof(x.b) = 2   Alignof(x.b) = 2  Offsetof(x.b) = 2\nSizeof(x.c) = 12  Alignof(x.c) = 4  Offsetof(x.c) = 4</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 64 位系统\nSizeof(x)   = 32  Alignof(x)   = 8\nSizeof(x.a) = 1   Alignof(x.a) = 1 Offsetof(x.a) = 0\nSizeof(x.b) = 2   Alignof(x.b) = 2 Offsetof(x.b) = 2\nSizeof(x.c) = 24  Alignof(x.c) = 8 Offsetof(x.c) = 8</code></pre></div>","frontmatter":{"title":"Golang 底层编程（一）","date":"December 14, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-low-level-1/","previous":{"fields":{"slug":"/go/golang-low-level-2/"},"frontmatter":{"title":"Golang 底层编程（二）"}},"next":{"fields":{"slug":"/go-example/go-example-2/"},"frontmatter":{"title":"Golang 实战（二）"}}}}}