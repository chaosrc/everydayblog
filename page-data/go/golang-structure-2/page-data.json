{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-structure-2/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"521c2c93-79c7-5a7e-bd9e-bc0d40d40547","excerpt":"Go 程序结构（二）短变量声明在一个方法中，可以使用短变量声明方式用来声明和初始化局部变量。它的形式是, name…","html":"<h2>Go 程序结构（二）</h2>\n<h4>短变量声明</h4>\n<p>在一个方法中，可以使用短变量声明方式用来声明和初始化局部变量。它的形式是<code class=\"language-text\">name := expression</code>, name 的类型由表达式决定</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ta <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello\"</span>\n\tb <span class=\"token operator\">:=</span> <span class=\"token boolean\">false</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token number\">1.23</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>因为它的简洁和灵活性，短变量声明已经成为了局部变量声明和使用的主要方式。使用 <code class=\"language-text\">var</code> 声明更倾向于保留下来用于明确指定与初始化值不同的类型，或者当一个变量需要先声明后面再赋值时使用</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ta <span class=\"token operator\">:=</span> <span class=\"token number\">100</span>               <span class=\"token comment\">// int 类型</span>\n\t<span class=\"token keyword\">var</span> b <span class=\"token builtin\">float32</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>    <span class=\"token comment\">//  float32 类型</span>\n\n\t<span class=\"token keyword\">var</span> names <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>     <span class=\"token comment\">// 先声明后面在赋值</span>\n\n\tnames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>与 <code class=\"language-text\">var</code> 声明一样，短变量声明也支持多个变量同时声明和初始化</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">multiStort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ti<span class=\"token punctuation\">,</span> s <span class=\"token operator\">:=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span> \n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>同样短变量声明也可以用于方法调用，比如 <code class=\"language-text\">os.Open</code> 返回两个值使用短变量声明</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">fnCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\tfile<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./vars/bar.go\"</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 使用 file</span>\n\tfile<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一个非常微妙但是非常重要的点是：短变量声明不需要声明等号左边所有的变量。如果有些变量已经在在当前作用域声明过，短变量声明相当于对这些变量进行赋值</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">fnCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\tfile<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./vars/bar.go\"</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n    <span class=\"token punctuation\">}</span>\n    \n    info<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">Stat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// err变量已经声明过，在这里相当于赋值</span>\n    \n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n\tfile<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>同时短变量声明必须至少有一个新的变量声明，比如下面的代码将会报错</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">short</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfile<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./vars/bar.go\"</span><span class=\"token punctuation\">)</span>\n\n\tfile<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./hello.go\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//error: no new variables on left side of</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在这种情况下应该使用赋值语句</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">short</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfile<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./vars/bar.go\"</span><span class=\"token punctuation\">)</span>\n\n\tfile<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./hello.go\"</span><span class=\"token punctuation\">)</span> \n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Go 程序结构（二）","date":"October 08, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-structure-2/","previous":{"fields":{"slug":"/go/golang-structure/"},"frontmatter":{"title":"Go 程序结构（一）"}},"next":{"fields":{"slug":"/go/golang-structure-3/"},"frontmatter":{"title":"Go 程序结构（三）"}}}}}