{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-composite-type-7/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"463f52b0-9e97-5c1c-97f6-b3f87b5d787e","excerpt":"Golang 复合类型（七）JSONJSON 是传输结构化数据使用最广泛的形式。Go 标准库中的 encoding/json、encoding/xml、encoding/asn1等包，对 josn、xml、asn1 等格式的编码和解码都有非常好的支持，并且提供了相似的 APIs。JSON 中的基本类型 number…","html":"<h2>Golang 复合类型（七）</h2>\n<h4>JSON</h4>\n<p>JSON 是传输结构化数据使用最广泛的形式。Go 标准库中的 encoding/json、encoding/xml、encoding/asn1等包，对 josn、xml、asn1 等格式的编码和解码都有非常好的支持，并且提供了相似的 APIs。</p>\n<p>JSON 中的基本类型 number、boolean、string，对应 Go 中的基本类型。JSON 中的数组用来编码 Go 中的 array和 slice。JSON 中的 object 用来编码 Go 中的 map 和 struct。</p>\n<p>下面是一个 movie 的数据类型以及它的一个列表值</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Movie <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tTitle  <span class=\"token builtin\">string</span>\n\tYear   <span class=\"token builtin\">int</span>  <span class=\"token string\">`json:\"release\"`</span>\n\tColor  <span class=\"token builtin\">bool</span> <span class=\"token string\">`json:\"color,omitempty\"`</span>\n\tActors <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\nmovies <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Movie<span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">{</span>\n        Title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Casablanca\"</span><span class=\"token punctuation\">,</span> Year<span class=\"token punctuation\">:</span> <span class=\"token number\">1942</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        Actors<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Humphrey Bogart\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ingrid Bergman\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        Title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Cool Hand Luke\"</span><span class=\"token punctuation\">,</span> Year<span class=\"token punctuation\">:</span> <span class=\"token number\">1967</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        Actors<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Paul Newman\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        Title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Bullitt\"</span><span class=\"token punctuation\">,</span> Year<span class=\"token punctuation\">:</span> <span class=\"token number\">1968</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        Actors<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Steve McQueen\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这种结构的数据非常适合与 JSON 格式之间的相互转换。在 Go 中将数据转换为 JSON 格式被称作 <em>marshaling</em>，通过 json.Matshal 方法实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">data<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>movies<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span></code></pre></div>\n<p>输出</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token property\">\"Title\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Casablanca\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"release\"</span><span class=\"token operator\">:</span><span class=\"token number\">1942</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"Actors\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Humphrey Bogart\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Ingrid Bergman\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token property\">\"Title\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Cool Hand Luke\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"release\"</span><span class=\"token operator\">:</span><span class=\"token number\">1967</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"color\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"Actors\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Paul Newman\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token property\">\"Title\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Bullitt\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"release\"</span><span class=\"token operator\">:</span><span class=\"token number\">1968</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"color\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"Actors\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Steve McQueen\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>注意其中 Year 指定被转换成了release 输出，而 Color 转换成了 color。是因为这两个字段定义了标签：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">Year   <span class=\"token builtin\">int</span>  <span class=\"token string\">`json:\"release\"`</span>\nColor  <span class=\"token builtin\">bool</span> <span class=\"token string\">`json:\"color,omitempty\"`</span></code></pre></div>\n<p>一个字段标签是一个字符串元数据，在编译时和 struct 的字段进行关联。标签中的 json 关键词控制了 encoding/json 包的行为，josn 字段标签的第一部分为 Go 字段指定了一个替代的 JOSN 名称。Color 标签中有一个额外的选项 omitempty，表示如果字段为类型零值则不在 JSON 中输出。</p>\n<p>相对于 marshaling 相反即解码 JSON 并输出 Go 数据结构的操作，被称作 unmarshaling，通过 json.Unmarshal 实现。通过定义合适的 Go 数据类型，能够选择哪一部分 JSON 需要解码那一部分不需要。比如下面定义一个只有 Title 的 struct，那么解码时只会填充 Title 信息，JSON 中的其他信息会被忽略</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Title <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Title <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> titles <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Title\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>titles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>titles<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [{Casablanca} {Cool Hand Luke} {Bullitt}]</span></code></pre></div>","frontmatter":{"title":"Golang 复合类型（七）","date":"October 27, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-composite-type-7/","previous":{"fields":{"slug":"/go/golang-composite-type-6/"},"frontmatter":{"title":"Golang 复合类型（六）"}},"next":{"fields":{"slug":"/go/golang-function-1/"},"frontmatter":{"title":"Golang 函数（一）"}}}}}