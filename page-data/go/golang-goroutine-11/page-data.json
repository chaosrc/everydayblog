{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-goroutine-11/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"2072ee3e-0beb-54bf-9a7b-b160953d3db9","excerpt":"Golang 并发（十一）并发目录遍历下面我们创建一个程序，通过命令行指定目录，查询其使用情况，类似于 Linux 中的 du 命令。下面是非并发版本下面是并发版本，使用 sync.WaitGroup 来统计正在运行的 du 方法，当计数为 0 时关闭 sizeChan。","html":"<h2>Golang 并发（十一）</h2>\n<h4>并发目录遍历</h4>\n<p>下面我们创建一个程序，通过命令行指定目录，查询其使用情况，类似于 Linux 中的 du 命令。</p>\n<p>下面是非并发版本</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 读取 filepath 目录下的所有文件大小</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">du</span><span class=\"token punctuation\">(</span>filepath <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int64</span> <span class=\"token punctuation\">{</span>\n\tfiles<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadDir</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">var</span> size <span class=\"token builtin\">int64</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> file <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> files <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">IsDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tsize <span class=\"token operator\">+=</span> <span class=\"token function\">du</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tsize <span class=\"token operator\">+=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> size\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 获取命令行参数</span>\n\tflag<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\troots <span class=\"token operator\">:=</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">Args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>roots<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\troots <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> path <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> roots <span class=\"token punctuation\">{</span>\n\t\tsize <span class=\"token operator\">:=</span> <span class=\"token function\">du</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s, %s\\n\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> bytesize<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ go run <span class=\"token keyword\">.</span> /etc /usr\n/etc, 3.88MB\n/usr, 3.37GB</code></pre></div>\n<p>下面是并发版本，使用 sync.WaitGroup 来统计正在运行的 du 方法，当计数为 0 时关闭 sizeChan。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 读取 filepath 目录下的所有文件大小</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">du</span><span class=\"token punctuation\">(</span>filepath <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> fileSize <span class=\"token keyword\">chan</span><span class=\"token operator\">&lt;-</span> <span class=\"token builtin\">int64</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">defer</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> file <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token function\">readDir</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">IsDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tn<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">go</span> <span class=\"token function\">du</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fileSize<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tfileSize <span class=\"token operator\">&lt;-</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 使用 buffered channel 限制并发读取文件数量</span>\n<span class=\"token keyword\">var</span> sema <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">readDir</span><span class=\"token punctuation\">(</span>filepath <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>os<span class=\"token punctuation\">.</span>FileInfo <span class=\"token punctuation\">{</span>\n\tsema <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\tfiles<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadDir</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">&lt;-</span>sema\n\t<span class=\"token keyword\">return</span> files\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 获取命令行参数</span>\n\tflag<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\troots <span class=\"token operator\">:=</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">Args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>roots<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\troots <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tsizeChan <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">var</span> n sync<span class=\"token punctuation\">.</span>WaitGroup\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> root <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> roots <span class=\"token punctuation\">{</span>\n\t\tn<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token function\">du</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> sizeChan<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tn<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>sizeChan<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">var</span> size<span class=\"token punctuation\">,</span> nfiles <span class=\"token builtin\">int64</span>\n\ttick <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>tick<span class=\"token punctuation\">:</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d files, %s\\n\"</span><span class=\"token punctuation\">,</span> nfiles<span class=\"token punctuation\">,</span> bytesize<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token keyword\">case</span> s<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>sizeChan<span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n\t\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d files, %s\\n\"</span><span class=\"token punctuation\">,</span> nfiles<span class=\"token punctuation\">,</span> bytesize<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">return</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tsize <span class=\"token operator\">+=</span> s\n\t\t\tnfiles<span class=\"token operator\">++</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Golang 并发（十一）","date":"November 24, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-goroutine-11/","previous":{"fields":{"slug":"/go/golang-goroutine-10/"},"frontmatter":{"title":"Golang 并发（十）"}},"next":null}}}