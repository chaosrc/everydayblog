{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-goroutine-3/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"eeec83e0-b5e2-5990-972d-8dfde5c3c38a","excerpt":"Golang 并发（三）示例：并发 echo 服务前面的时钟服务中每个连接使用一个 goroutine 。下面的 echo 服务中我们在每个连接中使用多个 goroutine。大多数 echo 服务仅仅是写入读到的内容，只需要对 handleConn 做如下修改：一个更有意思的 echo…","html":"<h2>Golang 并发（三）</h2>\n<h4>示例：并发 echo 服务</h4>\n<p>前面的时钟服务中每个连接使用一个 goroutine 。下面的 echo 服务中我们在每个连接中使用多个 goroutine。大多数 echo 服务仅仅是写入读到的内容，只需要对 handleConn 做如下修改：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">handleConn</span><span class=\"token punctuation\">(</span>conn net<span class=\"token punctuation\">.</span>Conn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">defer</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tio<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> conn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一个更有意思的 echo 服务是模拟真实的回音，首先大声回应（“HELLO”），然后是中等的(“Hello”)，最后是小声的（“hello”）。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tserver<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">Listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tcp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\":8091\"</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\tconn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">Accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Panicln</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">continue</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token function\">handleEchoConn</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">handleEchoConn</span><span class=\"token punctuation\">(</span>c net<span class=\"token punctuation\">.</span>Conn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tscanner <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewScanner</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">handleEcho</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">handleEcho</span><span class=\"token punctuation\">(</span>c net<span class=\"token punctuation\">.</span>Conn<span class=\"token punctuation\">,</span> out <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintln</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">,</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintln</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">)</span>\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintln</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">,</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>运行</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">nc</span> localhost 8091\nHello?\n\t HELLO?\n\t Hello?\n\t hello?\nIs there anybody there?\n\t IS THERE ANYBODY THERE?\nYooo-hooo<span class=\"token operator\">!</span>\n\t Is there anybody there?\n\t is there anybody there?\n\t YOOO-HOOO<span class=\"token operator\">!</span>\n\t Yooo-hooo<span class=\"token operator\">!</span>\n\t yooo-hooo<span class=\"token operator\">!</span></code></pre></div>\n<p>注意第三个 echo 输出需要等到第二个结束。真实的回音应该是是相互独立的，为了模拟这种情况，我们需要使用更多的 goroutine。我们在 handleEcho 方法调用前加 go 关键词，使每个 handleEchoe 运行在自己的 goroutine 上：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">handleEchoConn</span><span class=\"token punctuation\">(</span>c net<span class=\"token punctuation\">.</span>Conn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tscanner <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewScanner</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token function\">handleEcho</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>再次运行</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">nc</span> localhost 8091\nHello?\n\t HELLO?\n\t Hello?\n\t hello?\nIs there anybody there?\n\t IS THERE ANYBODY THERE?\nYooo-hooo<span class=\"token operator\">!</span>\n\t YOOO-HOOO<span class=\"token operator\">!</span>\n\t Is there anybody there?\n\t Yooo-hooo<span class=\"token operator\">!</span>\n\t is there anybody there?\n\t yooo-hooo<span class=\"token operator\">!</span></code></pre></div>\n<p> 要服务端使用并发（不仅仅是处理多个客户端连接甚至在单个连接中），只需要插入关键词 go。但是使用并发时我们需要仔细考虑并发调用的的安全性。</p>","frontmatter":{"title":"Golang 并发（三）","date":"November 16, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-goroutine-3/","previous":{"fields":{"slug":"/go/golang-goroutine-2/"},"frontmatter":{"title":"Golang 并发（二）"}},"next":{"fields":{"slug":"/go/golang-goroutine-4/"},"frontmatter":{"title":"Golang 并发（四）"}}}}}