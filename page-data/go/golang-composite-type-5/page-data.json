{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-composite-type-5/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"522e63e4-6567-5d2f-b1b8-2821fb1ed0b6","excerpt":"Golang 复合类型（五）Structs一个 struct 由零个或多个任意类型的命名的字段组成下面声明一个 Employee 类型的 struct，以及一个 Employee 实例 foofoo 中的字段通过点符号来获取比如 ，因为 foo…","html":"<h2>Golang 复合类型（五）</h2>\n<h4>Structs</h4>\n<p>一个 struct 由零个或多个任意类型的命名的字段组成</p>\n<p>下面声明一个 Employee 类型的 struct，以及一个 Employee 实例 foo</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Employee <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tID      <span class=\"token builtin\">int</span>\n\tName    <span class=\"token builtin\">string</span>\n\tAddress <span class=\"token builtin\">string</span>\n\tSalary  <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> foo Employee</code></pre></div>\n<p>foo 中的字段通过点符号来获取比如 <code class=\"language-text\">foo.name</code>，因为 foo 是一个变量，它的字段也是变量，因此可以对字段进行赋值</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">foo<span class=\"token punctuation\">.</span>Salary <span class=\"token operator\">=</span> <span class=\"token number\">5000</span></code></pre></div>\n<p>或者拿到地址，通过指针来获取</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">name <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>foo<span class=\"token punctuation\">.</span>Name\n<span class=\"token operator\">*</span>name <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"lastName\"</span></code></pre></div>\n<p>点符号也可以用在 struct 指针上面</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">p <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>foo\np<span class=\"token punctuation\">.</span>Address <span class=\"token operator\">=</span> <span class=\"token string\">\"shanghai\"</span></code></pre></div>\n<p>最后一句相当于 <code class=\"language-text\">(*p).Address = &quot;shanghai&quot;</code></p>\n<p>以大写字母开头的 struct 字段会被导出，这是 Go 的主要访问控制机制</p>\n<p>一个命名的 struct 类型 S 不能声明一个类型为 S 的字段：聚合类型不能包含自己。但是 S 可以声明一个指针类型 *S 的字段，这使得我们可以创建递归数据结构比如链表和树</p>\n<p>下面使用二叉树实现插入排序</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Tree <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tvalue       <span class=\"token builtin\">int</span>\n\tleft<span class=\"token punctuation\">,</span> right <span class=\"token operator\">*</span>Tree\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>values <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> root <span class=\"token operator\">*</span>Tree\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> values <span class=\"token punctuation\">{</span>\n\t\troot <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>tree <span class=\"token operator\">*</span>Tree<span class=\"token punctuation\">,</span> value <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Tree <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> tree <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\ttree <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Tree<span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> tree\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;=</span> tree<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">{</span>\n\t\ttree<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> value <span class=\"token operator\">></span> tree<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">{</span>\n\t\ttree<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> tree\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>list <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> tree <span class=\"token operator\">*</span>Tree<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> tree <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> list\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> tree<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlist <span class=\"token operator\">=</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tlist <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> tree<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlist <span class=\"token operator\">=</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> list\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>运行</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tlist <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1 2 2 3 5 6 8]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Golang 复合类型（五）","date":"October 25, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-composite-type-5/","previous":{"fields":{"slug":"/go/golang-composite-type-4/"},"frontmatter":{"title":"Golang 复合类型（四）"}},"next":null}}}