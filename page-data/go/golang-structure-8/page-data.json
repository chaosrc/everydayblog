{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-structure-8/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"46c0525f-282f-5007-9fb6-bebe6e8de134","excerpt":"Go 程序结构（八）作用域（Scope…","html":"<h2>Go 程序结构（八）</h2>\n<h4>作用域（Scope）</h4>\n<p>一个声明的作用域指这个声明在程序可以使用的部分。与生命周期不同，一个声明的作用域是一个程序文本的范围，是编译时属性，而变量的生命周期是程序执行时的时间范围，是运行是属性</p>\n<p>当一个声明的名字同时存在在外部作用域和内部作用域时，会先找到内部的声明</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token string\">\"g\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tf <span class=\"token operator\">:=</span> <span class=\"token string\">\"f\"</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//输出：f；main 函数中的 f</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//输出：g；包级别的变量 g </span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在一个方法中，语法块可以被任意嵌套深度，内部变量覆盖外部变量</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">blocks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello\"</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">!=</span> <span class=\"token string\">'!'</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">-</span> <span class=\"token string\">'a'</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的代码中 <code class=\"language-text\">x[i]</code> 和 <code class=\"language-text\">x + &#39;A&#39; - &#39;a&#39;</code> 都是引用外部语法块的变量，然后分别声明了变量 x 覆盖外部变量</p>\n<p>像 for 循环一样，if 和 switch 除了创建主体语法块外也可以创建隐含的语法块</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">ifBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">:=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> y <span class=\"token operator\">:=</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">==</span> y <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// error: undeclared name</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在 if-else 语句内可以引用到 x、y，但是在if-else 外面无法引用到 x、y</p>\n<p>短变量声明会生成一个本地变量</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> l <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">local</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tl<span class=\"token punctuation\">,</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出：l declared and not used</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">local2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> j <span class=\"token builtin\">int</span>\n\tl<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的 l，因为在 local 方法中重新声明了，如果没有使用则会报错，而在 local2 中是赋值给包级别的变量 l，因此不会报错</p>","frontmatter":{"title":"Go 程序结构（八）","date":"October 13, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-structure-8/","previous":{"fields":{"slug":"/go/golang-structure-6/"},"frontmatter":{"title":"Go 程序结构（六）"}},"next":{"fields":{"slug":"/go/golang-structure-7/"},"frontmatter":{"title":"Go 程序结构（七）"}}}}}