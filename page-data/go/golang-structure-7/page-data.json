{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-structure-7/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"3114c5d9-f348-5bb0-90e0-8a871144a4a2","excerpt":"Go 程序结构（七）import在一个 Go 程序中，每个 package 都定义了一个唯一的字符串叫做导入路径（）。语言本身并没有定义这些字符串的来源及含义，而是处决于工具如何解析它们。当使用 Go 工具（go tool）时  表示一个文件夹，里面包含一个或多个 Go…","html":"<h2>Go 程序结构（七）</h2>\n<h4>import</h4>\n<p>在一个 Go 程序中，每个 package 都定义了一个唯一的字符串叫做导入路径（<code class=\"language-text\">import path</code>）。语言本身并没有定义这些字符串的来源及含义，而是处决于工具如何解析它们。当使用 Go 工具（go tool）时 <code class=\"language-text\">import path</code> 表示一个文件夹，里面包含一个或多个 Go 源码文件，这些文件一起组成一个包。每个包都有一个包名出现在包的声明中。为了方便，一般包名和导入路径的最后一个部分匹配，比如 “example.com/hello/tempconv” 的包名为 tempconv</p>\n<p>下面在另一个包中使用之前定义的包 example.com/hello/tempconv</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main \n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"example.com/hello/tempconv\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"strconv\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> arg <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\tt<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseFloat</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"cf: %v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t\tos<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tc <span class=\"token operator\">:=</span> tempconv<span class=\"token punctuation\">.</span><span class=\"token function\">Celsius</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n\t\tf <span class=\"token operator\">:=</span> tempconv<span class=\"token punctuation\">.</span><span class=\"token function\">Fahrenheit</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s = %s, %s = %s \\n\"</span><span class=\"token punctuation\">,</span> \n\t\t\tc<span class=\"token punctuation\">,</span> tempconv<span class=\"token punctuation\">.</span><span class=\"token function\">CToF</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> tempconv<span class=\"token punctuation\">.</span><span class=\"token function\">FToC</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的 import 语句导入包 example.com/hello/tempconv，在整个文件中都可以使用 tempconv 来引用包中的内容</p>\n<p>运行上面的程序</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ go build .\n$ ls\ncf      cf.go\n$ ./cf 100\n100°C = 212°F, 100°F = 37.77777777777778°C \n$ ./cf 0\n0°C = 32°F, 0°F = -17.77777777777778°C </code></pre></div>\n<h4>包初始化（Package Initialization）</h4>\n<p>包的初始化开始于包级别变量的初始化，按照它们声明的顺序，但是依赖会先解析</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> b <span class=\"token operator\">+</span> c    <span class=\"token comment\">// 第三个初始化</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// 第二个初始化</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1</span>        <span class=\"token comment\">// 最先初始化</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果一个包有多个 .go 文件，它们初始化的顺序是文件给编译器的顺序，Go 工具在编译之前会对文件通过文件名进行排序</p>\n<p>任何 .go 文件可以包含任意数量的初始化（init）方法</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>init 方法除了不能被调用或者引用外，其他的与正常函数一样。每个文件中的 init 方法会在程序启动时按照声明顺序自动运行</p>\n<p>每个包初始化一次，按照导入顺序，先执行依赖。如果某个包 a 引入了包 b，那么可以确定的是在 a 初始化之前 b 已经完全初始化</p>","frontmatter":{"title":"Go 程序结构（七）","date":"October 13, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-structure-7/","previous":{"fields":{"slug":"/go/golang-structure-8/"},"frontmatter":{"title":"Go 程序结构（八）"}},"next":null}}}