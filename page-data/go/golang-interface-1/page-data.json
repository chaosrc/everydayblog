{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-interface-1/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"672c33e6-112d-5846-ba7f-d5e5b2a1edbf","excerpt":"Golang 接口（一）接口类型表达对其他类型的广义或者抽象行为。通过抽象，接口让我们编写更加灵活、可适配的函数，因为他们不和具体的实现细节绑定很多面向对象的语言都有接口的概念，但是 Go…","html":"<h2>Golang 接口（一）</h2>\n<p>接口类型表达对其他类型的广义或者抽象行为。通过抽象，接口让我们编写更加灵活、可适配的函数，因为他们不和具体的实现细节绑定</p>\n<p>很多面向对象的语言都有接口的概念，但是 Go 接口的独特之处在于<em>隐式满足</em>。也就是说，不需要声明给定具体类型所满足的所有接口，只需要拥有必要的方法</p>\n<h4>接口约定</h4>\n<p>前面我们见到的都是具体类型，一个具体类型指定明确的值、暴露内在操作，比如数字的算术操作。一个具体类型也可以通过方法提供额外的行为。当你有一个具体类型时，你会明确的知道它是什么以及你能对它进行什么操作。</p>\n<p>Go 中的另一种类型是接口类型，接口类型是抽象类型。它不公开其值的展现形式、内部结构，或它支持的基本操作集，仅仅暴露它的方法。当你有一个接口类型时，你不知道它是什么，仅仅知道它能做什么，或者它的方法所提供的行为。</p>\n<p>常用两个字符串格式化方法：fmt.Printf 输出结果到标准输出（一个文件），fmt.Sprintf 返回一个字符串结果。如果因为对格式化结果使用的稍微不同而重复是非常不必要的。有了接口之后，这些方法通过包装另一个方法，fmt.Fprintf 来实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> fmt\n<span class=\"token keyword\">func</span> <span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w io<span class=\"token punctuation\">.</span>Writer<span class=\"token punctuation\">,</span> format <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span>format <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> args<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span>format <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> buf bytes<span class=\"token punctuation\">.</span>Buffer\n    <span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>buf<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> args<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Fprintf 第一个参数为格式化输出结果的文件。在 Printf 中为 os.Stdout，是一个 *os.File。Sprintf 中的第一个参数不是一个文件，而是将结果写入 &#x26;buf 指针的缓冲区，然后转换成字符串。</p>\n<p>Fprintf 中的参数 io.Writer 其实也不是一个文件，它是下面的接口类型：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> io\n\n<span class=\"token keyword\">type</span> Writer <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>p <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>io.Writer 接口定义了 Fprintf 与它的调用者之间的约定。由于 Fprintf 仅仅依赖 io.Writer 约束的行为，我们能够传入任何满足 io.Writer 的具体类型</p>\n<p>我们定义一个新的类型 ByteCounter ，它的 Write 方法仅仅用来计算写入的 byte 长度</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> ByteCounter <span class=\"token builtin\">int</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>ByteCounter<span class=\"token punctuation\">)</span> <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>bytes <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">*</span>b <span class=\"token operator\">+=</span> <span class=\"token function\">ByteCounter</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 转换类型</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>因为 *ByteCounter 满足 io.Writer 的约定，所以能够传人 Fprintf 中，正确计算结果的长度</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> c ByteCounter\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello,%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 12</span>\n\nc <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 4</span></code></pre></div>","frontmatter":{"title":"Golang 接口（一）","date":"November 06, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-interface-1/","previous":{"fields":{"slug":"/go/golang-method-4/"},"frontmatter":{"title":"Golang 方法（四）"}},"next":null}}}