{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-composite-type-6/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"16f9f9a3-427f-538d-a959-ecd51eba0952","excerpt":"Golang 复合类型（六）struct 字面量一个 struct…","html":"<h2>Golang 复合类型（六）</h2>\n<h4>struct 字面量</h4>\n<p>一个 struct 类型的值可以通过指定字段的字面量来创建。有两种方式的字面量，第一种是按照字段顺序指定每一个字段的值\n，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> T <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span>\n\ta <span class=\"token builtin\">int</span>\n    B <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\nt <span class=\"token operator\">:=</span> T<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>这种方式需要精确记住每一个字段的含义，如果之后给类型增加字段或者修改顺序，那么字面量声明也需要做相应的修改。因此这种形式的字面量一般在包内部或者对小 struct 类型使用</p>\n<p>第二种方式是列出部分或所有的字段名称以及它们对应的值，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">t2 <span class=\"token operator\">:=</span> T<span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">}</span>\nt3 <span class=\"token operator\">:=</span> T<span class=\"token punctuation\">{</span>B<span class=\"token punctuation\">:</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果某个字段没有在声明中指定，则初始化为类型零值。使用指定字段名字的方式，就不需要再按照字段的顺序声明</p>\n<p>如果有未导出的字段，第一种方式无法在其他包中引用时使用，因为在其他包中无法获取未导出的变量</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 包 a 定义 struct T</span>\n<span class=\"token keyword\">package</span> a\n\n<span class=\"token comment\">// T t</span>\n<span class=\"token keyword\">type</span> T <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span>\n\ta <span class=\"token builtin\">int</span>\n\tB <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token comment\">// 引用包 a</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"a\"</span>\n<span class=\"token punctuation\">)</span>\n\nt <span class=\"token operator\">:=</span> structI<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">{</span>B<span class=\"token punctuation\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">}</span>\nt2 <span class=\"token operator\">:=</span> structI<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">}</span>   <span class=\"token comment\">// error: implicit assignment to unexported field a in structI.T literal</span>\nt3 <span class=\"token operator\">:=</span> structI<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// error: unknown field a in struct literal</span></code></pre></div>\n<p>struct 能够通过参数传递给函数以及从函数中返回</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Position <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tx<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">zoom</span><span class=\"token punctuation\">(</span>p Position<span class=\"token punctuation\">,</span> f <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> Position <span class=\"token punctuation\">{</span>\n\tp<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*=</span> f\n\tp<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*=</span> f\n\t<span class=\"token keyword\">return</span> p\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>因为在 Go 中函数的参数是值传递，方法接受的是参数的拷贝而不是引用，所以对于大的 struct 或者需要修改传人的参数时通常使用指针传递参数</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Position<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tp<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+=</span> x\n\tp<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+=</span> y\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    a <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Position<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果 struct 所有字段都可以比较则这个 struct 是可以比较的。使用 == 或 != 操作符会按照顺序比较对应的字段</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">b <span class=\"token operator\">:=</span> Position<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\nc <span class=\"token operator\">:=</span> Position<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\nz <span class=\"token operator\">:=</span> Position<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> z<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span></code></pre></div>","frontmatter":{"title":"Golang 复合类型（六）","date":"October 26, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-composite-type-6/","previous":{"fields":{"slug":"/go/golang-composite-type-5/"},"frontmatter":{"title":"Golang 复合类型（五）"}},"next":null}}}