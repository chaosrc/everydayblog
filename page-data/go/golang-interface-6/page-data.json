{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-interface-6/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"49785228-e3a8-55a2-a829-301915cc0522","excerpt":"Golang 接口（六）类型断言类型断言是对接口值的操作，它的语法为  其中 x 是接口类型表达式，T 为断言类型。类型断言检查操作对象的动态类型是否与断言类型匹配。有两种情况的断言，第一，如果断言类型是一个具体类型，那么断言操作检查 x 的动态类型是否与 T 相同，如果是，那么断言结果为 x…","html":"<h2>Golang 接口（六）</h2>\n<h4>类型断言</h4>\n<p>类型断言是对接口值的操作，它的语法为 <code class=\"language-text\">x.(T)</code> 其中 x 是接口类型表达式，T 为断言类型。类型断言检查操作对象的动态类型是否与断言类型匹配。</p>\n<p>有两种情况的断言，第一，如果断言类型是一个具体类型，那么断言操作检查 x 的动态类型是否与 T 相同，如果是，那么断言结果为 x 的动态类型，它的类型为 T，也就是说，对一个具体类型的断言提取出了操作对象的具体值；如果检查失败，则抛出 panic</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> a io<span class=\"token punctuation\">.</span>Writer\na <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>Stdout\n\nb <span class=\"token operator\">:=</span> a<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>os<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ture</span>\n\nc <span class=\"token operator\">:=</span> a<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>bytes<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// panic: interface conversion: io.Writer is *os.File, not *bytes.Buffer</span></code></pre></div>\n<p>第二种，如果 T 是接口类型，那么类型断言检查 x 的动态类型是否满足 T ，如果是，动态值不被提取，其结果仍然是一个接口值，但是接口的类型为 T，也就是说，对一个接口的类型断言改变了表达式的类型，而且拥有不同的方法集合</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> w io<span class=\"token punctuation\">.</span>Writer\nw <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>Stdout\n\nrw <span class=\"token operator\">:=</span> w<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">.</span>ReadWriter<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// os.Stdout 满足 ReadWriter</span>\n\nw <span class=\"token operator\">=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>ByteCounter<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// ByteCounter 只满足 Writer</span>\n\nrw <span class=\"token operator\">=</span> w<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">.</span>ReadWriter<span class=\"token punctuation\">)</span> <span class=\"token comment\">// panic: interface conversion: *main.ByteCounter is not io.ReadWriter: missing method Read</span></code></pre></div>\n<p>不管是哪一种类型的断言，如果操作对象是 nil ，那么断言失败</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> w io<span class=\"token punctuation\">.</span>Writer\nr <span class=\"token operator\">:=</span> w<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">.</span>Writer<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// panic: interface conversion: interface is nil, not io.Writer</span></code></pre></div>\n<p>通常我们不确定接口值的动态类型，我们想要去测试它是哪一个具体类型。如果类型断言中接受两个赋值结果，那么断言失败不会抛出 panic，而是返回一个额外的布尔值来指示断言是否成功，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> w io<span class=\"token punctuation\">.</span>Writer\n\nw <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>Stdout\nrw <span class=\"token operator\">:=</span> w<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">.</span>ReadWriter<span class=\"token punctuation\">)</span>\n\nw<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> rw<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>bytes<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> ok <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fail\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 输出 fail</span></code></pre></div>","frontmatter":{"title":"Golang 接口（六）","date":"November 11, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-interface-6/","previous":{"fields":{"slug":"/go/golang-interface-5/"},"frontmatter":{"title":"Golang 接口（五）"}},"next":{"fields":{"slug":"/go/golang-interface-7/"},"frontmatter":{"title":"Golang 接口（七）"}}}}}