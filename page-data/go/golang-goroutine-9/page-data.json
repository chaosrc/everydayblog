{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-goroutine-9/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"874bf255-2b2f-5e86-b30e-51ab26b7e826","excerpt":"Golang 并发（九）并发爬虫首先定义一个 crawl 方法，获取某个页面的所有链接主函数类似于广度优先遍历，使用 workList 来记录需要爬取的 URL，每一个 crawl 方法都在一个独立的 goroutine 中执行并且将其爬取的链接发送至 workList上面程序的问题在于太过于并发，会导致 cpu…","html":"<h2>Golang 并发（九）</h2>\n<h4>并发爬虫</h4>\n<p>首先定义一个 crawl 方法，获取某个页面的所有链接</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">crawl</span><span class=\"token punctuation\">(</span>url <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\tlist<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">extract</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> list\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 获取url页面， 并提取链接</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">extract</span><span class=\"token punctuation\">(</span>url <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tres<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\tdoc<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> html<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\tlinks <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">findLinks</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>links<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> links<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 找出html中的链接</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">findLinks</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">*</span>html<span class=\"token punctuation\">.</span>Node<span class=\"token punctuation\">,</span> links <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> node <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>Type <span class=\"token operator\">==</span> html<span class=\"token punctuation\">.</span>ElementNode <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>Data <span class=\"token operator\">==</span> <span class=\"token string\">\"a\"</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> attr <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> node<span class=\"token punctuation\">.</span>Attr <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> attr<span class=\"token punctuation\">.</span>Key <span class=\"token operator\">==</span> <span class=\"token string\">\"href\"</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token operator\">*</span>links <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>links<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">.</span>Val<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> child <span class=\"token operator\">:=</span> node<span class=\"token punctuation\">.</span>FirstChild<span class=\"token punctuation\">;</span> child <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">;</span> child <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span>NextSibling <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">findLinks</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> links<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>主函数类似于广度优先遍历，使用 workList 来记录需要爬取的 URL，每一个 crawl 方法都在一个独立的 goroutine 中执行并且将其爬取的链接发送至 workList</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\turl <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"https://baidu.com\"</span><span class=\"token punctuation\">}</span>\n\n\tworkList <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tworkList <span class=\"token operator\">&lt;-</span> url\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tseen <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> list <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> workList <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> link <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> list <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>seen<span class=\"token punctuation\">[</span>link<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tseen<span class=\"token punctuation\">[</span>link<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\t\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>link <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tworkList <span class=\"token operator\">&lt;-</span> <span class=\"token function\">crawl</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面程序的问题在于太过于并发，会导致 cpu、内存、网络等资源迅速消耗。我们可以使用容量为 n 的缓冲 channel 来限制并行数。</p>\n<p>修改 crawl 函数</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 使用 tokens 计数，限制并发请求数量为 20</span>\n<span class=\"token keyword\">var</span> tokens <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">crawl</span><span class=\"token punctuation\">(</span>url <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\ttokens <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\tlist<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">extract</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">&lt;-</span> tokens <span class=\"token comment\">// 释放 token</span>\n\t<span class=\"token keyword\">return</span> list\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Golang 并发（九）","date":"November 22, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-goroutine-9/","previous":{"fields":{"slug":"/go/golang-goroutine-8/"},"frontmatter":{"title":"Golang 并发（八）"}},"next":{"fields":{"slug":"/go/golang-goroutine-10/"},"frontmatter":{"title":"Golang 并发（十）"}}}}}