{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-concurrency-2/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"bdaa3b6a-4791-5d3a-ba34-765e824cc718","excerpt":"Golang 共享变量并发(二)互斥锁：sync.Mutex之前我们使用缓冲 channel 做为计数信号来保证不会超过 20 goroutine 同时发送 HTTP 请求。同样的方式，我们可以使用容量为 1 的 channel 来保证每次最多只有一个  goroutine…","html":"<h2>Golang 共享变量并发(二)</h2>\n<h4>互斥锁：sync.Mutex</h4>\n<p>之前我们使用缓冲 channel 做为计数信号来保证不会超过 20 goroutine 同时发送 HTTP 请求。同样的方式，我们可以使用容量为 1 的 channel 来保证每次最多只有一个  goroutine 访问某个共享变量，这种只有一个计数的信号也称为二元信号（binary semaphore）。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> sema <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> balance <span class=\"token builtin\">int</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span>amount <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tsema <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\tbalance <span class=\"token operator\">+=</span> amount\n\t<span class=\"token operator\">&lt;-</span>sema\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Balance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\tsema <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">&lt;-</span>sema <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> balance\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>互斥锁模式非常有用，因此 sync 包中的 Mutex 类型直接支持它。Mutex 的 Lock 方法获取 token，Unlock 方法释放 token。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> balance <span class=\"token builtin\">int</span>\n<span class=\"token keyword\">var</span> mu sync<span class=\"token punctuation\">.</span>Mutex\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span>amout <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tmu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tbalance <span class=\"token operator\">+=</span> amout\n\tmu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Balance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\tmu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> balance\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>考虑下面的撤销操作。首先减去撤销金额，如果余额小于 0 撤销失败，恢复余额并返回false，否则撤销成功返回 true。因为整个操作不是原子性的所以需要使用互斥锁</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Withdraw</span><span class=\"token punctuation\">(</span>amount <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\tmu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>amount<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">Balance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但是上面的方法并不正确，因为 Deposit 会再次去调用 mu.Lock 获取 token，而互斥锁是无法重入的（re-entrant），从而会导致死锁。</p>\n<p>通常的解决方法是将 Deposit 方法分开为两个方法：一个未导出的方法 deposit，假定已经锁存在然后执行真正的操作；另一个导出的方法 Deposit 获取锁后再调用 deposit 方法。同样在 Withdraw 中也调用 deposit 方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span>amount <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tmu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span>\n\tmu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span>anount <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tbalance <span class=\"token operator\">+=</span> anount\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Withdraw</span><span class=\"token punctuation\">(</span>amount <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\tmu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>amount<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> balance <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Golang 共享变量并发(二)","date":"November 27, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-concurrency-2/","previous":{"fields":{"slug":"/go/golang-concurrency-1/"},"frontmatter":{"title":"Golang 共享变量并发（一）"}},"next":{"fields":{"slug":"/go/golang-concurrency-3/"},"frontmatter":{"title":"Golang 共享变量并发（三）"}}}}}