{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-structure/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"c5ba5a97-884c-5087-b40e-57e166bc33c5","excerpt":"Golang 程序结构（一）不管是在 Go 语言还是其他任何语言中，构建大型程序都是从小的基本结构开始。变量存储值，简单的表达式联合成更大的表达式，基本类型集合成数组和结构体，流程控制语句来控制表达式的执行顺序，语句被组成函数进行隔离和复用命名（Names）Go…","html":"<h2>Golang 程序结构（一）</h2>\n<p>不管是在 Go 语言还是其他任何语言中，构建大型程序都是从小的基本结构开始。变量存储值，简单的表达式联合成更大的表达式，基本类型集合成数组和结构体，流程控制语句来控制表达式的执行顺序，语句被组成函数进行隔离和复用</p>\n<h4>命名（Names）</h4>\n<p>Go 中的函数，变量，常量，类型，声明标签以及包的命名都遵循简单的规则：以字母（Unicode认为是字母的任何东西）或者下划线开头和任意数量的字母、数字、下划线组成</p>\n<p>一个变量如果定义在函数内部，则属于函数局部，如果是函数外面，则在它所属包（package）中所有的文件中可见。名字首字母的大小写决定它是否在其他包中可见，如果首字母以大写开头将会被导出，即在其他包中可以引用。</p>\n<p>Go 语言中使用驼峰命名风格</p>\n<h4>声明（Declaration)</h4>\n<p>在 Go 语言中有四种主要的声明：var, const, type, func。</p>\n<p>Go 程序存储在以 .go 做为扩展名的文件中，每个文件开头使用 <code class=\"language-text\">package</code> 来声明文件属于那个包。包的声明后面是 <code class=\"language-text\">import</code> 声明，然后再是变量、常量、类型、函数的声明</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main \n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">const</span> PI <span class=\"token operator\">=</span> <span class=\"token number\">3.1415</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> <span class=\"token number\">10.0</span>\n\n\t<span class=\"token keyword\">var</span> area <span class=\"token operator\">=</span> PI <span class=\"token operator\">*</span> r <span class=\"token operator\">*</span> r\n\t\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"面积为：%g\"</span><span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>变量</h4>\n<p>一个 <code class=\"language-text\">var</code> 声明创建了一个特定类型的变量，并给它赋予了一个名字。变量声明的形式</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> name <span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> expression</code></pre></div>\n<p><code class=\"language-text\">type</code> 和 <code class=\"language-text\">= expression</code> 部分都可以省略。如果省略 type 那么类型由等号后面的表达决定。如果省略表达式部分，变量初始值为类型的零值，对于数字类型为 0，布尔类型为 false，字符串类型为 \"\", 接口和引用类型为 nil。对于集合类型数据和结构体，零值为每个元素或字段的零值</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> i <span class=\"token builtin\">int</span> \n<span class=\"token keyword\">var</span> b <span class=\"token builtin\">bool</span>\n<span class=\"token keyword\">var</span> s <span class=\"token builtin\">string</span>\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i: %v, b: %v, s: %v\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 输出；i: 0, b: false, s: </span></code></pre></div>\n<p>在一个声明中也可以定义多个变量。省略类型时可以同时声明多个不同类型的变量</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> k <span class=\"token builtin\">int</span>    <span class=\"token comment\">// 类型： int, int, int</span>\n<span class=\"token keyword\">var</span> b<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span>    <span class=\"token comment\">// 类型：bool, float64, string</span></code></pre></div>","frontmatter":{"title":"Go 程序结构（一）","date":"October 07, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-structure/","previous":{"fields":{"slug":"/mysql/mysql-backup/"},"frontmatter":{"title":"MySQL 备份"}},"next":{"fields":{"slug":"/go/golang-structure-2/"},"frontmatter":{"title":"Go 程序结构（二）"}}}}}