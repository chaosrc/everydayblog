{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-goroutine-1/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"1f992f67-3821-5f5e-b304-9a0a879dc81b","excerpt":"Golang 并发（一）如今并发编程越来越重要，web 服务器一次处理上千次请求，前端页面渲染 UI 动画同时进行计算和网络请求，甚至传统的数据读取、计算和输出也使用并发来隐藏潜在的 I/O 操作，充分利用现代计算机的多核 CPU。Go 中有两种方式的并发编程。一种是使用 goroutines 和 channels…","html":"<h2>Golang 并发（一）</h2>\n<p>如今并发编程越来越重要，web 服务器一次处理上千次请求，前端页面渲染 UI 动画同时进行计算和网络请求，甚至传统的数据读取、计算和输出也使用并发来隐藏潜在的 I/O 操作，充分利用现代计算机的多核 CPU。</p>\n<p>Go 中有两种方式的并发编程。一种是使用 goroutines 和 channels，支持<em>通信顺序进程</em>即 CSP （communicating sequential processes），一种并发模型，其中值在独立的活动之间传递但是变量在很大程度上限制与单个活动上。另一种是传统的<em>共享变量多线程</em>。</p>\n<p>在很多环境下中，并发编程实现正确的共享变量访问并不容易。Go 鼓励通过通信传递来共享值，任何时候只有一个 goroutine 访问某个变量。一个总的原则是：</p>\n<blockquote>\n<p>Do not communicate by sharing memory; instead, share memory by communicating\n不要以共享内存进行通信，而是，通过通信来共享内存</p>\n</blockquote>\n<h4>Goroutines</h4>\n<p>在 Go 中，每一个并发的执行行为被称为 <em>goroutine</em>。考虑一个程序，有两个函数，一个计算另一个输出，两个之间互不调用。一个顺序程序可能会调用一个然后调用另一个，但是并发程序使用两个或多个 goroutine，同时调用两个方法。</p>\n<p>当一个程序开始运行，它唯一的 goroutine 是调用 main 函数的 goroutine，它被称为 main goroutine。新的 goroutine 使用 go 语句来创建，go 语句是在原始函数或方法调用前使用关键词 go 做为前缀。go 关键词会导致函数在新的 goroutine 中执行。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 调用函数 f() 并等待函数返回</span>\n<span class=\"token keyword\">go</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 创建一个新的 goroutine 调用 f()，不等待函数返回</span></code></pre></div>\n<p>下面的例子，在主 goroutine 中计算第 45 个斐波纳契数，在它运行期间给用户提供一个正在运行的视觉提示。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"time\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Fib</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">Fib</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">Fib</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Spinner</span><span class=\"token punctuation\">(</span>t time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token string\">`-\\|/`</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r%c\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n\t\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">Spinner</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Millisecond <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\tn <span class=\"token operator\">:=</span> <span class=\"token function\">Fib</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\rFib(45)=%d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>运行\n<img src=\"https://s2.ax1x.com/2019/11/14/MUYbgs.gif\"></p>\n<p>在 main 函数返回后，所有的 goroutine 会被终止，然后程序退出。除了 main 函数返回或程序退出外，没有其他编程方式从一个 goroutine 来停止其他的 goroutine，但是可以通过通信的方式来请求 goroutine 自我停止。</p>","frontmatter":{"title":"Golang 并发（一）","date":"November 14, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-goroutine-1/","previous":{"fields":{"slug":"/go/golang-interface-8/"},"frontmatter":{"title":"Golang 接口（八）"}},"next":{"fields":{"slug":"/go/golang-goroutine-2/"},"frontmatter":{"title":"Golang 并发（二）"}}}}}