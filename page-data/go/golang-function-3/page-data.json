{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-function-3/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"9f80d7b0-e5f5-5c5d-a909-5b17e11940fc","excerpt":"Golang 函数（三）函数值函数在 Go 中是第一类（first-class）值，和其他值一样，函数有类型，可以赋值给变量、作为参数传入函数或者从函数中返回。函数值可以像任何其他函数一样调用：函数类型的零值为 nil。调用 nil 的函数会导致 panic函数值可以和 nil…","html":"<h2>Golang 函数（三）</h2>\n<h4>函数值</h4>\n<p>函数在 Go 中是第一类（first-class）值，和其他值一样，函数有类型，可以赋值给变量、作为参数传入函数或者从函数中返回。函数值可以像任何其他函数一样调用：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span>     <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> n <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">negative</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span>   <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>n <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">product</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m <span class=\"token operator\">*</span> n <span class=\"token punctuation\">}</span>\n\nf <span class=\"token operator\">:=</span> square\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 9</span>\n\nf <span class=\"token operator\">=</span> negative\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// -10</span>\n\nf <span class=\"token operator\">=</span> <span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// error: cannot use product(3, 4) (value of type int) as func(n int) int value in assignment</span></code></pre></div>\n<p>函数类型的零值为 nil。调用 nil 的函数会导致 panic</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> fn <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span>\n\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//error: panic: runtime error: invalid memory address or nil pointer dereference</span></code></pre></div>\n<p>函数值可以和 nil 比较，但是它们之间无法比较，无法做为 map 的 key 使用</p>\n<h4>匿名函数</h4>\n<p>命名的函数只能在包级别声明，但是我们能够在任何表达中，使用函数字面量来声明一个函数值。函数字面量的写法和函数声明类似，只是在 func 关键词后面没有函数名称，这种函数值被称为匿名函数</p>\n<p>函数字面量允许我们在使用时定义一个函数，比如调用 strings.Map，它接受一个函数参数和字符串</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">s <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>r <span class=\"token builtin\">rune</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">rune</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> r <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// ifmmp</span></code></pre></div>\n<p>更重要的是，这种方式定义的函数，能够获取整个词法环境，因此内部的函数能够引用到闭合函数的变量（也就是闭包），比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">squares</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> x <span class=\"token builtin\">int</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t\tx<span class=\"token operator\">++</span>\n\t\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nsq <span class=\"token operator\">:=</span> <span class=\"token function\">squares</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>squares 函数返回了另一个函数类型为 <code class=\"language-text\">func() int</code> 的函数，在返回的匿名函数中引用了 squares 函数中的本地变量 x</p>","frontmatter":{"title":"Golang 函数（三）","date":"October 30, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-function-3/","previous":{"fields":{"slug":"/go/golang-function-2/"},"frontmatter":{"title":"Golang 函数（二）"}},"next":{"fields":{"slug":"/go/golang-function-4/"},"frontmatter":{"title":"Golang 函数（四）"}}}}}