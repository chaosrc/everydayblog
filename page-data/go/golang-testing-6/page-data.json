{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-testing-6/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"3601fff2-df6c-5d6d-b6d0-c21cc4828fa7","excerpt":"Golang 测试（六）Profiling基准测试对于测量特定操作的性能非常有用，但是当我们想要将一个慢的程序变快时，通常不知道从哪儿开始。当我们想要仔细的查看程序的运行速度时，定位关键代码的最好的技术是 profiling。Profiling 是一个在运行期间基于对若干profile 事件取样的自动性能测试方式。Go…","html":"<h2>Golang 测试（六）</h2>\n<h4>Profiling</h4>\n<p>基准测试对于测量特定操作的性能非常有用，但是当我们想要将一个慢的程序变快时，通常不知道从哪儿开始。</p>\n<p>当我们想要仔细的查看程序的运行速度时，定位关键代码的最好的技术是 <em>profiling</em>。Profiling 是一个在运行期间基于对若干profile 事件取样的自动性能测试方式。</p>\n<p>Go 支持多种 profiling，每一种都涉及一个不同方面的性能。go test 工具内置了多种 profiling ;</p>\n<ul>\n<li>\n<p>CPU profile 定位执行最耗 CPU 时间的方法。</p>\n</li>\n<li>\n<p>heap profile 定位分配内存最多的语句。</p>\n</li>\n<li>\n<p>block profile 定位阻塞最长的 goroutine ，比如系统调用、channel 发送和接收、获取锁。</p>\n</li>\n</ul>\n<p>测试时只需要使用下面的参数即可收集对应的 profile</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">go</span> test <span class=\"token operator\">-</span>cpuprofile<span class=\"token operator\">=</span>cpu<span class=\"token punctuation\">.</span>out\n<span class=\"token keyword\">go</span> test <span class=\"token operator\">-</span>blockprofile<span class=\"token operator\">=</span>block<span class=\"token punctuation\">.</span>out\n<span class=\"token keyword\">go</span> test <span class=\"token operator\">-</span>memprofile<span class=\"token operator\">=</span>mem<span class=\"token punctuation\">.</span>out</code></pre></div>\n<p>对于非测试程序添加 profile 支持也是非常容易的，Go 的运行时 profile 能够使用 runtime API 程序控制开启。</p>\n<p>一旦 profile 收集我们需要使用 pprof 工具来分析它（go tool pprof）。</p>\n<p>下面的命令展示了如何收集和显示一个简单的 CPU profile：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ go <span class=\"token function\">test</span> -run<span class=\"token operator\">=</span>NONE -bench<span class=\"token operator\">=</span>ClientServerParallelTLS64 -cpuprofile<span class=\"token operator\">=</span>cpu.log net/http\nBenchmarkClientServerParallelTLS64-4  6940            186778 ns/op           18864 B/op        231 allocs/op\nPASS\nok      net/http        2.104s</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"> go tool pprof -text -nodecount<span class=\"token operator\">=</span>10 ./http.test cpu.log \nFile: http.test\nType: cpu\nTime: Dec 7, 2019 at 11:39pm <span class=\"token punctuation\">(</span>CST<span class=\"token punctuation\">)</span>\nDuration: 2s, Total samples <span class=\"token operator\">=</span> 5070ms <span class=\"token punctuation\">(</span>253.06%<span class=\"token punctuation\">)</span>\nShowing nodes accounting <span class=\"token keyword\">for</span> 4050ms, 79.88% of 5070ms total\nDropped 172 nodes <span class=\"token punctuation\">(</span>cum <span class=\"token operator\">&lt;=</span> 25.35ms<span class=\"token punctuation\">)</span>\nShowing <span class=\"token function\">top</span> 10 nodes out of 206\n      flat  flat%   sum%        cum   cum%\n    1620ms 31.95% 31.95%     1620ms 31.95%  runtime.pthread_cond_signal\n     860ms 16.96% 48.92%      860ms 16.96%  runtime.pthread_cond_wait\n     400ms  7.89% 56.80%      400ms  7.89%  runtime.madvise\n     300ms  5.92% 62.72%      300ms  5.92%  syscall.syscall\n     270ms  5.33% 68.05%      270ms  5.33%  runtime.memmove\n     170ms  3.35% 71.40%      170ms  3.35%  vendor/golang.org/x/crypto/curve25519.ladderstep\n     130ms  2.56% 73.96%      130ms  2.56%  runtime.memclrNoHeapPointers\n     130ms  2.56% 76.53%      130ms  2.56%  syscall.rawSyscall\n     100ms  1.97% 78.50%      100ms  1.97%  math/big.addMulVVW\n      70ms  1.38% 79.88%      190ms  3.75%  bytes.<span class=\"token punctuation\">(</span>*Buffer<span class=\"token punctuation\">)</span>.ReadFrom</code></pre></div>\n<p><code class=\"language-text\">-text</code> 参数指定输出模式为文本模式，每一行一个方法，按照最‘热’的函数排序（即消耗 CPU 最多的），<code class=\"language-text\">-nodecount</code> 限制输出结果为 10 行</p>","frontmatter":{"title":"Golang 测试（六）","date":"December 07, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-testing-6/","previous":{"fields":{"slug":"/go/golang-testing-5/"},"frontmatter":{"title":"Golang 测试（五）"}},"next":{"fields":{"slug":"/go/golang-reflect-1/"},"frontmatter":{"title":"Golang 反射（一）"}}}}}