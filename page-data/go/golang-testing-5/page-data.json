{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-testing-5/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"186189d6-88af-503c-911c-5bcb0e7d2896","excerpt":"Golang 测试（五）Benchmark（基准） 函数基准测试是在固定工作负载下测量程序性能的实践。在 Go 中基准测试函数测试函数类似，但是以Benchmark前缀开头，提供一个 *testing.B 参数，同时暴露一个整数 N 指定被测量操作的执行次数。下面是 IsPalindrome 在循环中调用 N…","html":"<h2>Golang 测试（五）</h2>\n<h4>Benchmark（基准） 函数</h4>\n<p>基准测试是在固定工作负载下测量程序性能的实践。在 Go 中基准测试函数测试函数类似，但是以Benchmark前缀开头，提供一个 *testing.B 参数，同时暴露一个整数 N 指定被测量操作的执行次数。</p>\n<p>下面是 IsPalindrome 在循环中调用 N 次的基准测试</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkPalindrome</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>N <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">IsPalindome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A man, a plan, a cannal: panama\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">IsPalindome</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> letters <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">rune</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> unicode<span class=\"token punctuation\">.</span><span class=\"token function\">IsLetter</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tletters <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">,</span> unicode<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> letters <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> letters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> letters<span class=\"token punctuation\">[</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>运行基准测试</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ go <span class=\"token function\">test</span> -bench<span class=\"token operator\">=</span>.\nssccess\n1\nBenchmarkPalindrome-4            4436701               280 ns/op\nPASS\nok      example.com/hello/test/word     1.522s</code></pre></div>\n<p>基准测试函数名字后面的数字（这里是 4）表示 GOMAXPROCS，它对于并发基准测试很重要</p>\n<p>上面的测试结果告诉我们 IsPalindrome 运行 4436701 次的平均执行时间为 280 纳秒</p>\n<p>对 IsPalindrome 进行优化，首先想到的优化是在第二个循环的在中点停止循环，避免二次比较</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted\">-       for i := range letters {</span>\n<span class=\"token inserted\">+       n := len(letters)/2</span>\n<span class=\"token inserted\">+       for i := 0; i &lt; n; i++ {</span>\n                if letters[i] != letters[len(letters)-1-i] {\n                        return false</code></pre></div>\n<p>运行基准测试</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ go <span class=\"token function\">test</span> -bench<span class=\"token operator\">=</span>. -benchmem\nssccess\n1\nBenchmarkPalindrome-4            4523386               274 ns/op            \nPASS\nok      example.com/hello/test/word     1.518s</code></pre></div>\n<p>但是通常一个明显的优化并不是总会带来预期的结果，这里只有 2% 左右的性能提升</p>\n<p>下面进行另一个优化，通过给 letters 预分配一个足够大的数组，而不是通过 append 函数来扩展它来优化性能</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"> func IsPalindome(s string) bool {\n<span class=\"token deleted\">-       var letters []rune</span>\n<span class=\"token inserted\">+       letters := make([]rune, 0, len(s))</span>\n \n        for _, r := range s {\n                if unicode.IsLetter(r) {</code></pre></div>\n<p>运行</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ go <span class=\"token function\">test</span> -bench<span class=\"token operator\">=</span>. -benchmem\nssccess\n1\nBenchmarkPalindrome-4            9143310               140 ns/op            \nPASS\nok      example.com/hello/test/word     1.415s</code></pre></div>\n<p>可以看到这次性能有近 50% 的提升</p>\n<p>这个例子说明了最快的程序通常是内存分配次数最少的程序。</p>\n<p>使用 <code class=\"language-text\">-benchmem</code> 参数可以展示内存分配统计数据，下面值优化之前和之后的比较</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ go <span class=\"token function\">test</span> -bench<span class=\"token operator\">=</span>. -benchmem\nssccess\n1\nBenchmarkPalindrome-4            4523386               274 ns/op             248 B/op          5 allocs/op\nPASS\nok      example.com/hello/test/word     1.518s</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ go <span class=\"token function\">test</span> -bench<span class=\"token operator\">=</span>. -benchmem\nssccess\n1\nBenchmarkPalindrome-4            9143310               140 ns/op             128 B/op          1 allocs/op\nPASS\nok      example.com/hello/test/word     1.415s</code></pre></div>\n<p>可以看到单次调用减少了 80% 的内存分配</p>","frontmatter":{"title":"Golang 测试（五）","date":"December 04, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-testing-5/","previous":{"fields":{"slug":"/go/golang-testing-4/"},"frontmatter":{"title":"Golang 测试（四）"}},"next":{"fields":{"slug":"/go/golang-testing-3/"},"frontmatter":{"title":"Golang 测试（三）"}}}}}