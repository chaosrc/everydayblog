{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-structure-6/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"b9270980-7721-5900-9c64-a8662f1af8a0","excerpt":"Go 程序结构（六）类型声明一个变量或表达式定义了值的特征，比如它的大小、内部展现方式、能够对它进行的操作以及与之相关的一些方法在任何程序中，都有一些变量有相同的展现形式，但是完全不同的含义，比如一个 int 变量可以是一个循环的索引、一个时间戳、一个文件大小的描述或者一个月份一个类型（type…","html":"<h2>Go 程序结构（六）</h2>\n<h4>类型声明</h4>\n<p>一个变量或表达式定义了值的特征，比如它的大小、内部展现方式、能够对它进行的操作以及与之相关的一些方法</p>\n<p>在任何程序中，都有一些变量有相同的展现形式，但是完全不同的含义，比如一个 int 变量可以是一个循环的索引、一个时间戳、一个文件大小的描述或者一个月份</p>\n<p>一个类型（type）声明定义了一个新的命名类型，具有与现在 type 相同的类型。一个命名类型提供了一种方式分离和独立类型的使用</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 类型声明</span>\n<span class=\"token keyword\">type</span> name underlying<span class=\"token operator\">-</span><span class=\"token keyword\">type</span></code></pre></div>\n<p>类型声明多出现在包（package）级别，这里定义的类型对于包内可见，如果被导出（以大写字母开头），则在其他包中也可以使用</p>\n<p>下面是一个温度转换程序，在摄氏度和华氏度之间进行转换</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> tempconv\n\n\n<span class=\"token keyword\">type</span> Celsius <span class=\"token builtin\">float64</span>\n<span class=\"token keyword\">type</span> Fahrenheit <span class=\"token builtin\">float64</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\tAbsoluteZero Celsius <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">273.15</span>\n\tFreezingC    Celsius <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\tBollingC     Celsius <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">CToF</span><span class=\"token punctuation\">(</span>c Celsius<span class=\"token punctuation\">)</span> Fahrenheit <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">Fahrenheit</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span> <span class=\"token number\">9</span> <span class=\"token operator\">/</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">FToC</span><span class=\"token punctuation\">(</span>f Fahrenheit<span class=\"token punctuation\">)</span> Celsius <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">Celsius</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span> <span class=\"token operator\">/</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的 package 中定义了两个类型 Celsius 和 Fahrenheit,分别表示摄氏度和华氏度，尽管两个的基础类型都是 float64，但是它们不是同一个类型，所以它们之间不能比较或用算术表达式组合。从 float64 转换需要指明转换类型比如 Fahrenheit(t) 或 Celsius(t)。Fahrenheit(t) 或 Celsius(t)是类型转换而不是方法调用</p>\n<p>对于每一个类型 T，都有一个相应的转换操作 T(x) 将 x 转换为 T 类型。如果两个类型的原始类型相同那么它们之间可以相互转换。</p>\n<p>命名类型也使得给类型的值定义新的行为成为可能。这些行为表示为一组与类型相关的函数，称为类型的方法</p>\n<p>为 Celsius 类型定义 String 方法</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c Celsius<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g°C\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>很多类型都通过这种方式定义 String 方法，因为，它决定了在使用 fmt 包打印字符串时值的显示</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> f Celsius <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出；100°C</span></code></pre></div>\n<h4>包（package）和文件</h4>\n<p>包在 Go 中达到了在其他语言中库和模块相同的目的，支持模块化、封装、单独编译和复用。一个包的源码存在于一个或多个 .go 文件中，通常是在导入路径结尾名字的文件夹中，比如包 github.com/hello 的文件存放在 $GOPATH/src/github.com/hello 目录下</p>\n<p>每个包都为其声明了一个独立的命名空间。包允许我们通过控制哪些名称是在包外面可见或导出来隐藏信息。在 Go 中使用一个简单的规则来管理那个标识符被导出：被导出的标识符使用大写字母开头</p>","frontmatter":{"title":"Go 程序结构（六）","date":"October 12, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-structure-6/","previous":{"fields":{"slug":"/go/golang-structure-5/"},"frontmatter":{"title":"Go 程序结构（五）"}},"next":{"fields":{"slug":"/go/golang-structure-8/"},"frontmatter":{"title":"Go 程序结构（八）"}}}}}