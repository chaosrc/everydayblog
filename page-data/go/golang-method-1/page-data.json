{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-method-1/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"75f0f012-3adc-5e68-ac0f-4702dd56cf43","excerpt":"Golang 方法（一）自20世纪90年代初以来，面向对象编程一直是工业和教育领域的主流编程范式，几乎所有广泛使用的编程语言都对它进行了支持，Go…","html":"<h2>Golang 方法（一）</h2>\n<p>自20世纪90年代初以来，面向对象编程一直是工业和教育领域的主流编程范式，几乎所有广泛使用的编程语言都对它进行了支持，Go 也不例外。</p>\n<p>尽管没有普遍接受面向对象的的定义，但是对我们的目的来说，一个对象只是一个拥有方法的值或者变量，一个方法只是一个与特定类型关联的函数。</p>\n<h4>方法声明</h4>\n<p>一个方法的声明是原本函数声明的变体，在函数名前面多了一个额外的参数。这个参数将函数附加到参数对应的类型上。</p>\n<p>下面在一个几何包中定义方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> geometry\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"math\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Point 位置</span>\n<span class=\"token keyword\">type</span> Point <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tx<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">float64</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Distance 计算两点之间的距离</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p Point<span class=\"token punctuation\">)</span> <span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>q Point<span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Hypot</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>y<span class=\"token operator\">-</span>q<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>x<span class=\"token operator\">-</span>q<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>额外的参数 p 叫做方法的接受者（receiver）</p>\n<p>在 Go 中对于 receiver 没有一个特定的名字比如 this 或 self，而是可以像其他任何参数一样定义 receiver 的名字。</p>\n<p>在方法调用时，receiver 参数出现在方法名称之前，与方法声明时 receiver 在方法名称之前保持一直</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">:=</span> geometry<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\n\ty <span class=\"token operator\">:=</span> geometry<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>每一个类型对方法名称都有自己的命名空间，我们可以在其他类型上定义名称为 Distance 的方法。比如定义一个 Path 类型</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Path 路径</span>\n<span class=\"token keyword\">type</span> Path <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Point\n\n<span class=\"token comment\">// Distance 计算 Path 的距离</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p Path<span class=\"token punctuation\">)</span> <span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> sum <span class=\"token builtin\">float64</span>\n\n\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> point <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> p <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t\tsum <span class=\"token operator\">+=</span> point<span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> sum\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的 <code class=\"language-text\">Path</code> 是命名的 slice 类型，而不是和 Point 一样的 struct 类型，然而仍然可以为它定义方法。</p>\n<p>在允许方法与任何类型相关联上，Go 与很多其他面向对象的语言不同。对于简单的类型比如 numbers、strings、slice、maps，定义额外的行为非常方便。方法可以声明在同一包中的任何命名类型上，只要基础类型不是指针或者接口。</p>","frontmatter":{"title":"Golang 方法（一）","date":"November 02, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-method-1/","previous":{"fields":{"slug":"/go/golang-function-5/"},"frontmatter":{"title":"Golang 函数（五）"}},"next":null}}}