{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-structure-3/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"59948e47-b552-59d4-b7b4-f51519e95b9a","excerpt":"Go 程序结构（三）指针一个变量是包含值的存储。声明时创建的变量通过名字来标示，比如 x，但是很多变量只能通过表达式来标示比如 xi 或者 x.f 。所有的这些表达式都读取了变量的值，除非它们出现在赋值语句的左边，这时是新的值赋值给这个变量。一个指针（pointer…","html":"<h2>Go 程序结构（三）</h2>\n<h4>指针</h4>\n<p>一个变量是包含值的存储。声明时创建的变量通过名字来标示，比如 x，但是很多变量只能通过表达式来标示比如 x[i] 或者 x.f 。所有的这些表达式都读取了变量的值，除非它们出现在赋值语句的左边，这时是新的值赋值给这个变量。</p>\n<p>一个指针（pointer）值是一个变量的地址，是存储值的位置。并不是所有的值都有一个地址，但是每个变量都有地址。使用指针我们能够间接的读取或者更新一个变量的值，而不必使用甚至不需要知道变量的名字。</p>\n<p>如果声明一个变量 <code class=\"language-text\">var x int</code>，表达式 <code class=\"language-text\">&amp;x</code> 产出了一个指针指向一个整数变量，即 <code class=\"language-text\">*int</code>。如果把这个指针称为 p，那么我们可以说 “p 指向 x”，或者 “p 包含 x 的地址”。p 指针指向的变量用 <code class=\"language-text\">*p</code> 表示，<code class=\"language-text\">*p</code> 表达式产出了这个变量的值，因为 <code class=\"language-text\">*p</code> 表示一个变量，所以也可以进行赋值。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n\tp <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>x  <span class=\"token comment\">// p 是 *int 类型，指向 x</span>\n\t\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出： 10</span>\n\n\t<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出：20</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>任何类型指针的零值都是 nil，如果指针 p 指向一个变量那么 p != nil 为 true</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> x<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">int</span>\n<span class=\"token keyword\">var</span> z <span class=\"token operator\">*</span><span class=\"token builtin\">int</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出：true, nil</span></code></pre></div>\n<p>在方法中返回一个局部变量的指针是非常安全的</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">pf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span><span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\tv <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello\"</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>v\n<span class=\"token punctuation\">}</span>\nv <span class=\"token operator\">:=</span> <span class=\"token function\">pf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出：hello</span></code></pre></div>\n<p>因为指针包含了变量的地址，将指针做为参数传人函数，那么函数可以间接的更新此变量</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">pointArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\targs <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">*</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">*</span>val <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tval <span class=\"token operator\">:=</span> <span class=\"token string\">\"bar\"</span>\n\t<span class=\"token function\">args</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>val<span class=\"token punctuation\">)</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出；foo</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>指针是 <code class=\"language-text\">flag</code> 包的关键，它使用程序的命令行参数在运行时去设置特定变量的值。比如，我们创建一个 echo 程序接受 -n， -s 参数，-n 使 echo 不换行，-s 指定输出的分隔符</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> echo\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"flag\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">Bool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"不换行\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"分隔符\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Start echo</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tflag<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ttext <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">.</span><span class=\"token function\">Args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">*</span>n <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>运行</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ ./echo ab cd ef\nab cd ef\n$ ./echo -n ab cd ef\nab cd ef$ \n$ ./echo -s / ab cd ef\nab/cd/ef\n$ ./echo -s - ab cd ef\nab-cd-ef</code></pre></div>","frontmatter":{"title":"Go 程序结构（三）","date":"October 09, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-structure-3/","previous":{"fields":{"slug":"/go/golang-structure-2/"},"frontmatter":{"title":"Go 程序结构（二）"}},"next":{"fields":{"slug":"/go/golang-structure-4/"},"frontmatter":{"title":"Go 程序结构（四）"}}}}}