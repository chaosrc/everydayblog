{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-goroutine-8/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"c580f487-f0d8-590d-b848-d36c9e0d6086","excerpt":"Golang 并发（八）并行循环下面我们将探讨一些常见的执行并行循环的并发模式。考虑一个全尺寸图片生成缩略图的问题，下面的 ImageFile…","html":"<h2>Golang 并发（八）</h2>\n<h4>并行循环</h4>\n<p>下面我们将探讨一些常见的执行并行循环的并发模式。考虑一个全尺寸图片生成缩略图的问题，下面的 ImageFile 方法可以缩放单个图片：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">ImageFile</span><span class=\"token punctuation\">(</span>fileName <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//省略实现细节</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>下面的程序循环一个图片列表，生成每一张图片的缩略图</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">makeThumbnails</span><span class=\"token punctuation\">(</span>filenames <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> filenames <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">ImageFile</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>很显然每个文件的执行顺序并不重要，每个缩放操作都相互独立。这样的问题完全由独立子问题组成，也被称作为 <em>embarrassingly parallel</em>。这类问题也最容易实现并发，并且享受与并行数量线性扩展的性能。</p>\n<p>下面我们并行执行所有的缩放操作，使用多核 CPU 进行图片缩放计算。在 ImageFile 上使用 go 关键词</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">makeThumbnails</span><span class=\"token punctuation\">(</span>filenames <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> filenames <span class=\"token punctuation\">{</span>\n\t\t <span class=\"token keyword\">go</span> <span class=\"token function\">ImageFile</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但是这种情况下 makeThumbnails 会在图片缩放操作之前返回，对每一个文件都会开始一个 goroutine，但是没有等待它们结束。</p>\n<p>没有一种直接的方式来等待 goroutine 结束，但是我们可以让里面的 goroutine 完成时通知外面的 goroutine，通过发送一个事件到共享的 channel。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">makeThumbnails</span><span class=\"token punctuation\">(</span>filenames <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> filenames <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>f <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ImageFile</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n\t\t\tch <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 等待 goroutine 完成</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token keyword\">range</span> ch <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">&lt;-</span>ch\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>为了知道最后一个 goroutine 什么时候结束，我们需要一个计数器在每个 goroutine 开始前加 1，然后在每个 goroutine 结束时减 1。这种特殊的计数器需要安全的从多个 goroutine 操作，并且提供一种方式等待它变为 0。这种计数器类型就是 sync.WaitGruop.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">makeThumbnails</span><span class=\"token punctuation\">(</span>filenames <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> filenames <span class=\"token punctuation\">{</span>\n\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>f <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">ImageFile</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n\t\t\tch <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 等待 goroutine 完成</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token keyword\">range</span> ch <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">&lt;-</span>ch\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://s2.ax1x.com/2019/11/22/MoYLUs.png\" alt=\"MoYLUs.png\"></p>","frontmatter":{"title":"Golang 并发（八）","date":"November 21, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-goroutine-8/","previous":{"fields":{"slug":"/go/golang-goroutine-7/"},"frontmatter":{"title":"Golang 并发（七）"}},"next":{"fields":{"slug":"/go/golang-goroutine-9/"},"frontmatter":{"title":"Golang 并发（九）"}}}}}