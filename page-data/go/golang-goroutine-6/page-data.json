{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-goroutine-6/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"0f93919e-bc6b-591a-8169-f9c44825040c","excerpt":"Golang 并发（六）单向 Channel 类型随着程序的增长，将大型函数分解成小块是很自然的。上一篇例子中的程序分解为三个函数：squarer 函数位于 pipleline 中间，接收两个参数：输入 channel 和输出 channel。虽然两个参数类型相同，但是它们的使用意图是完全相反的，in…","html":"<h2>Golang 并发（六）</h2>\n<h4>单向 Channel 类型</h4>\n<p>随着程序的增长，将大型函数分解成小块是很自然的。上一篇例子中的程序分解为三个函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span>out <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">squarer</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> in <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">printer</span><span class=\"token punctuation\">(</span>in <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>squarer 函数位于 pipleline 中间，接收两个参数：输入 channel 和输出 channel。虽然两个参数类型相同，但是它们的使用意图是完全相反的，in 仅仅用来接收值，而 out 仅仅用来发送值，而且没有任何东西阻止向 in 发送值以及从 out 接收值。</p>\n<p>Go 类型系统中提供了单向 channel 类，只暴露发送和接收中的一个操作。类型 <code class=\"language-text\">chan&lt;- int</code> 为只能发送整数的 channel 类型，只允许发送操作；类型 <code class=\"language-text\">&lt;-chan int</code> 为只能接收整数的 channel 类型，只允许接收操作。</p>\n<p>使用单向 channel 类型的 pipline 程序</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tnaturals <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\tsquares <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Counter</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span>naturals<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Squarer</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">squarer</span><span class=\"token punctuation\">(</span>naturals<span class=\"token punctuation\">,</span> squares<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Printer</span>\n\t<span class=\"token function\">printer</span><span class=\"token punctuation\">(</span>squares<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">chan</span><span class=\"token operator\">&lt;-</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tch <span class=\"token operator\">&lt;-</span> i\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">squarer</span><span class=\"token punctuation\">(</span>in <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> out <span class=\"token keyword\">chan</span><span class=\"token operator\">&lt;-</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> x <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> in <span class=\"token punctuation\">{</span>\n\t\tout <span class=\"token operator\">&lt;-</span> x <span class=\"token operator\">*</span> x\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">printer</span><span class=\"token punctuation\">(</span>in <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> x <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> in <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在调用 counter(naturals) 时会隐式的将 naturals 的 channel int 类型转换为参数类型 <code class=\"language-text\">&lt;-chan int</code> 类型。</p>\n<p>在任何赋值语句中都可以将双向类型转为单向类型 channel，但是一旦将类型转换为单向类型比如 <code class=\"language-text\">chan&lt;- int</code> 后，则没有方法从它里面获取到原来的双向 channel 类型值</p>","frontmatter":{"title":"Golang 并发（六）","date":"November 19, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-goroutine-6/","previous":{"fields":{"slug":"/go/golang-goroutine-5/"},"frontmatter":{"title":"Golang 并发（五）"}},"next":null}}}