{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-reflect-2/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"c23bf2e8-c238-56ef-8842-7dfb766dc3b2","excerpt":"Golang 反射（二）递归打印值创建一个 Display 方法，对于任意的复杂结构，打印出值的完整结构，标记每一个元素的路径。Slice 和 Array：使用 Len 方法获取元素的数量，然后通过 Index(i) 方法遍历元素Struct：NumField 方法返回 struct 字段的数量，Field(i…","html":"<h2>Golang 反射（二）</h2>\n<h4>递归打印值</h4>\n<p>创建一个 Display 方法，对于任意的复杂结构，打印出值的完整结构，标记每一个元素的路径。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"reflect\"</span>\n\t<span class=\"token string\">\"strconv\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Display</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> x <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %T:\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">display</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> v reflect<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">switch</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Kind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Invalid<span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s=%q\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Invalid\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s=%q\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Int<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span>Int8<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span>Int16<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span>Int32<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span>Int64<span class=\"token punctuation\">:</span>\n\t\ti <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">FormatInt</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s=%s\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Uint<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span>Uint8<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span>Uint16<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span>Uint32<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span>Uint64<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span>Uintptr<span class=\"token punctuation\">:</span>\n\t\ti <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">FormatUint</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">Uint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s=%s\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Bool<span class=\"token punctuation\">:</span>\n\t\tb <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">FormatBool</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">Bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s=%s\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Struct<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">NumField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\tfieldName <span class=\"token operator\">:=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Name\n\t\t\t<span class=\"token function\">display</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s.%s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> fieldName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Slice<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">display</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s[%d]\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">MapKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">display</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s[%s]\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">MapIndex</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Ptr<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">IsNil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s=nil\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">display</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(*%s)\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Interface<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">IsNil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s=nil\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">display</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Func<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span>Chan<span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s=%s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">FormatUint</span><span class=\"token punctuation\">(</span><span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s.type=%s\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Slice 和 Array：使用 Len 方法获取元素的数量，然后通过 Index(i) 方法遍历元素</p>\n<p>Struct：NumField 方法返回 struct 字段的数量，Field(i) 返回第 i 个字段</p>\n<p>Maps：MapKeys 方法获取 map 的所有 key ，MapIndex(key) 返回 key 对应的值</p>\n<p>Pointer：Elem 方法返回指针所指向的变量，IsNil 方法判断指针是否为空</p>\n<p>Interface：同样 IsNil 方法判断接口是否为空，Elem 方法获取接口的动态值</p>\n<p>调用 Display 方法</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Foo <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tfoo  <span class=\"token builtin\">string</span>\n\tage  <span class=\"token builtin\">int</span>\n\tlist <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n\tm    <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// Display(\"a\", nil)</span>\n\t<span class=\"token function\">Display</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Foo\"</span><span class=\"token punctuation\">,</span> Foo<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"good\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token function\">Display</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stderr\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ go run <span class=\"token keyword\">.</span>\nFoo main.Foo:\nFoo.foo<span class=\"token operator\">=</span><span class=\"token string\">\"bar\"</span>\nFoo.age<span class=\"token operator\">=</span>18\nFoo.list<span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"123\"</span>\nFoo.list<span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"Hello\"</span>\nFoo.list<span class=\"token punctuation\">[</span>2<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"good\"</span>\nFoo.m<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true\nFoo.m<span class=\"token punctuation\">[</span>get<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>false\n\nStderr *os.File:\n<span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">(</span>*Stderr<span class=\"token punctuation\">)</span>.file<span class=\"token punctuation\">)</span>.pfd.fdmu.state<span class=\"token operator\">=</span>0\n<span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">(</span>*Stderr<span class=\"token punctuation\">)</span>.file<span class=\"token punctuation\">)</span>.pfd.fdmu.rsema<span class=\"token operator\">=</span>0\n<span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">(</span>*Stderr<span class=\"token punctuation\">)</span>.file<span class=\"token punctuation\">)</span>.pfd.fdmu.wsema<span class=\"token operator\">=</span>0\n<span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">(</span>*Stderr<span class=\"token punctuation\">)</span>.file<span class=\"token punctuation\">)</span>.pfd.Sysfd<span class=\"token operator\">=</span>2\n<span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">(</span>*Stderr<span class=\"token punctuation\">)</span>.file<span class=\"token punctuation\">)</span>.pfd.pd.runtimeCtx<span class=\"token operator\">=</span>0\n<span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">(</span>*Stderr<span class=\"token punctuation\">)</span>.file<span class=\"token punctuation\">)</span>.pfd.iovecs<span class=\"token operator\">=</span>nil\n<span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">(</span>*Stderr<span class=\"token punctuation\">)</span>.file<span class=\"token punctuation\">)</span>.pfd.csema<span class=\"token operator\">=</span>0\n<span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">(</span>*Stderr<span class=\"token punctuation\">)</span>.file<span class=\"token punctuation\">)</span>.pfd.isBlocking<span class=\"token operator\">=</span>1\n<span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">(</span>*Stderr<span class=\"token punctuation\">)</span>.file<span class=\"token punctuation\">)</span>.pfd.IsStream<span class=\"token operator\">=</span>true\n<span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">(</span>*Stderr<span class=\"token punctuation\">)</span>.file<span class=\"token punctuation\">)</span>.pfd.ZeroReadIsEOF<span class=\"token operator\">=</span>true\n<span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">(</span>*Stderr<span class=\"token punctuation\">)</span>.file<span class=\"token punctuation\">)</span>.pfd.isFile<span class=\"token operator\">=</span>true\n<span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">(</span>*Stderr<span class=\"token punctuation\">)</span>.file<span class=\"token punctuation\">)</span>.name<span class=\"token operator\">=</span><span class=\"token string\">\"/dev/stderr\"</span>\n<span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">(</span>*Stderr<span class=\"token punctuation\">)</span>.file<span class=\"token punctuation\">)</span>.dirinfo<span class=\"token operator\">=</span>nil\n<span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">(</span>*Stderr<span class=\"token punctuation\">)</span>.file<span class=\"token punctuation\">)</span>.nonblock<span class=\"token operator\">=</span>false\n<span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">(</span>*Stderr<span class=\"token punctuation\">)</span>.file<span class=\"token punctuation\">)</span>.stdoutOrErr<span class=\"token operator\">=</span>true\n<span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">(</span>*Stderr<span class=\"token punctuation\">)</span>.file<span class=\"token punctuation\">)</span>.appendMode<span class=\"token operator\">=</span>false</code></pre></div>","frontmatter":{"title":"Golang 反射（二）","date":"December 09, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-reflect-2/","previous":{"fields":{"slug":"/go/golang-reflect-1/"},"frontmatter":{"title":"Golang 反射（一）"}},"next":{"fields":{"slug":"/go/golang-reflect-3/"},"frontmatter":{"title":"Golang 反射（三）"}}}}}