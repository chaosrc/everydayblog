{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-interface-7/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"2b19544f-f3a4-56f3-8412-0d0058f75370","excerpt":"Golang 接口（七）使用类型断言鉴别错误os 包中的文件操作会返回一个错误集。I/O 操作可能会因为任意原因失败，但是通常有三种错误必须不同的处理：文件已经存在（对于创建操作）、文件不存在（对于读取操作）、权限不够。os…","html":"<h2>Golang 接口（七）</h2>\n<h4>使用类型断言鉴别错误</h4>\n<p>os 包中的文件操作会返回一个错误集。I/O 操作可能会因为任意原因失败，但是通常有三种错误必须不同的处理：文件已经存在（对于创建操作）、文件不存在（对于读取操作）、权限不够。</p>\n<p>os 包提供了帮助方法，通过给定的错误来区分这三种失败</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> os\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">IsExist</span><span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">IsNotExist</span><span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">IsPermission</span><span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span></code></pre></div>\n<p>区分错误的可靠方法是使用特定的类型来展示错误值。比如 os 包中定义了一个 PathError 类型来描述操作文件路径的错误：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> os\n\n<span class=\"token keyword\">type</span> PathError <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Op <span class=\"token builtin\">string</span>\n    Path <span class=\"token builtin\">string</span>\n    Err <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>PathError<span class=\"token punctuation\">)</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">.</span>Op <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>Path <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>Err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>客服端可以通过类型断言来检查具体的错误类型，从而区分不同的错误，下面是 IsNotExist 的实现</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> ErrNotExist <span class=\"token operator\">=</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file not exist\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">IsNoteExist</span><span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> pe<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> err<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>PathError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span>\n        err <span class=\"token operator\">=</span> err<span class=\"token punctuation\">.</span>Err\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> err <span class=\"token operator\">==</span> ErrNotExist\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>使用类型断言来请求行为</h4>\n<p>下面是在 web 服务中写入 HTTP 相应头的部分逻辑：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">writeHeader</span><span class=\"token punctuation\">(</span>w io<span class=\"token punctuation\">.</span>Writer<span class=\"token punctuation\">,</span> contentType <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> w<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> w<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>contentType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>因为 Write 方法需要 []byte 类型的数据，所以将字符串转换为 []byte 类型后再传人。这种转换需要分配内存和复制数据，而且复制的数据会马上被舍弃。如果这是系统的核心逻辑，这种内存分配可能会拖慢系统。</p>\n<p>查看 net/http 包可以发现 w 的动态类型 http.ResponseWriter 有一个 WriteString 方法可以高效的写入字符串，避免分配临时的拷贝。</p>\n<p>我们不能假定每个 io.Writer 都有 WriteString 方法，但是可以定义一个只有 WriteString 方法的接口，然后通过类型断言来测试动态类型是否满足这个新的接口</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">writeString</span><span class=\"token punctuation\">(</span>w io<span class=\"token punctuation\">.</span>Writer<span class=\"token punctuation\">,</span> str <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 定义一个新的类型</span>\n\t<span class=\"token keyword\">type</span> WriteString <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 断言 w 的类型是否满足上面定义的新类型</span>\n\t<span class=\"token keyword\">if</span> w<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> w<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>WriteString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> w<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> w<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">writeHeader</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> contentType <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 改为调用 writeString 方法</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">writeString</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">writeString</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> contentType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//....</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在 writeString 方法中判断如果 w 有 WriteString 方法则调用，否则仍然使用 Write 方法。</p>","frontmatter":{"title":"Golang 接口（七）","date":"November 12, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-interface-7/","previous":{"fields":{"slug":"/go/golang-interface-6/"},"frontmatter":{"title":"Golang 接口（六）"}},"next":{"fields":{"slug":"/go/golang-interface-8/"},"frontmatter":{"title":"Golang 接口（八）"}}}}}