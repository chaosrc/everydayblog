{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-concurrency-5/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"9c445db9-d677-59bb-bcf0-fbd87fee9878","excerpt":"Golang 共享变量并发（五）示例：并发非阻塞缓存并发非阻塞缓存是一个抽象，它解决一个在实际并发编程中经常出现的问题：函数缓存（memoizing），它缓存函数的结果，这样函数只需要计算一次下面使用 httpGetBody 方法做为需要缓存的函数。因为调用这个方法会发送一次 HTTP 请求然后读取 Body…","html":"<h2>Golang 共享变量并发（五）</h2>\n<h4>示例：并发非阻塞缓存</h4>\n<p>并发非阻塞缓存是一个抽象，它解决一个在实际并发编程中经常出现的问题：函数缓存（memoizing），它缓存函数的结果，这样函数只需要计算一次</p>\n<p>下面使用 httpGetBody 方法做为需要缓存的函数。因为调用这个方法会发送一次 HTTP 请求然后读取 Body，相对开销比较大，所以我们想要避免不必要的重复调用</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">httpGetBody</span><span class=\"token punctuation\">(</span>url <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tres<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">defer</span> res<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAll</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>下面是第一版的缓存实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Memo <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tf     Func\n\tcache <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Result\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Func <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">type</span> Result <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tvalue <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\terr   <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span>f Func<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Memo <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Memo<span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">,</span> cache<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tmemo <span class=\"token operator\">:=</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span>httpGetBody<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">var</span> re <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tre<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> memo<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://baidu.com\"</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token punctuation\">}</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>memo <span class=\"token operator\">*</span>Memo<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tcache<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> memo<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n\t\tcache<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> cache<span class=\"token punctuation\">.</span>err <span class=\"token operator\">=</span> memo<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\t\tmemo<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cache\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> cache<span class=\"token punctuation\">.</span>err\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>同步方式使用 Memo </p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\turls <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">\"https://baidu.com\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"https://bing.com\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"https://baidu.com\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"https://tmall.com\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"https://taobao.com\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"https://jd.com\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"https://tmall.com\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tmemo <span class=\"token operator\">:=</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span>httpGetBody<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> u <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> urls <span class=\"token punctuation\">{</span>\n\t\tnow <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tres<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> memo<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s,  %s,  %s\\n\"</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>运行结果</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ go run <span class=\"token keyword\">.</span>\nhttps://baidu.com,  307.48433ms,  152.79KB\nhttps://bing.com,  4.164982487s,  112.27KB\nhttps://baidu.com,  257ns,  152.79KB\nhttps://tmall.com,  898.855589ms,  222.36KB\nhttps://taobao.com,  532.622306ms,  132.49KB\nhttps://jd.com,  279.961501ms,  102.61KB\nhttps://tmall.com,  720ns,  222.36KB</code></pre></div>\n<p>urls 中含有重复的 URL ，可以看到第二次调用重复的 URL 花费的时间很短</p>\n<p>并发方式使用 Memo</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\turls <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">\"https://baidu.com\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"https://bing.com\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"https://baidu.com\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"https://tmall.com\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"https://taobao.com\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"https://jd.com\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"https://tmall.com\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\ttotalTime <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n\tmemo <span class=\"token operator\">:=</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span>httpGetBody<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> u <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> urls <span class=\"token punctuation\">{</span>\n\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>u <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tnow <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\tres<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> memo<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s,  %s,  %s\\n\"</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total time: \"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>totalTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>运行结果</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ go run <span class=\"token keyword\">.</span>\nhttps://taobao.com,  495.987367ms,  131.94KB\nhttps://tmall.com,  574.481546ms,  222.36KB\nhttps://jd.com,  717.00061ms,  102.39KB\nhttps://baidu.com,  965.010644ms,  152.42KB\nhttps://tmall.com,  1.131277028s,  222.36KB\nhttps://baidu.com,  1.272043514s,  152.64KB\nhttps://bing.com,  3.027638404s,  112.62KB\nTotal time:  3.027725597s</code></pre></div>\n<p>可以看到\b运行更快了，但是缓存并没有生效</p>\n<p>下面版本的 Memo ，每个 map 元素都是一个 entry 指针，每个 entry 包含缓存结果和一个 channel。当 entry 的结果设置后，关闭 channel， 广播给其他 goroutine 去安全的获取缓存结果</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Memo <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tf     Func\n\tcache <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>entry\n\tmu    sync<span class=\"token punctuation\">.</span>RWMutex\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Func <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">type</span> Result <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tvalue <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\terr   <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> entry <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tre    Result\n\tready <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span>f Func<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Memo <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Memo<span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">,</span> cache<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>memo <span class=\"token operator\">*</span>Memo<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tmemo<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tcache <span class=\"token operator\">:=</span> memo<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">if</span> cache <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tcache <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>entry<span class=\"token punctuation\">{</span>ready<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\t\tmemo<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cache\n\t\tcache<span class=\"token punctuation\">.</span>ready <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tmemo<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>cache<span class=\"token punctuation\">.</span>ready<span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">var</span> result Result\n\t\tresult<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>err <span class=\"token operator\">=</span> memo<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\t\tcache<span class=\"token punctuation\">.</span>re <span class=\"token operator\">=</span> result\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">.</span>ready<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span>re<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> cache<span class=\"token punctuation\">.</span>re<span class=\"token punctuation\">.</span>err\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Golang 共享变量并发（五）","date":"November 30, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-concurrency-5/","previous":{"fields":{"slug":"/go/golang-concurrency-4/"},"frontmatter":{"title":"Golang 共享变量并发（四）"}},"next":null}}}