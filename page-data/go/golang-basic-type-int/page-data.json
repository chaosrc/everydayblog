{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-basic-type-int/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"ccc918f7-7f24-5367-b842-bc068989632e","excerpt":"Golang 基础数据类型（一）整数Go 提供了有符号和无符号两种整数运算。有 4 种不同大小的有符号整数——8，16，32，64 位，分别用 int8，int16，int32，int64 类型表示，相应的无符号类型为 uint8，uint16，uint32，uint64还有两种类型叫做 int 和 unit…","html":"<h2>Golang 基础数据类型（一）</h2>\n<h4>整数</h4>\n<p>Go 提供了有符号和无符号两种整数运算。有 4 种不同大小的有符号整数——8，16，32，64 位，分别用 int8，int16，int32，int64 类型表示，相应的无符号类型为 uint8，uint16，uint32，uint64</p>\n<p>还有两种类型叫做 int 和 unit 是在特定平台上最自然和最有效的有符号和无符号类型，int 是到目前为止使用最广泛的数字类型，这两种类型的大小要么是 32 位要么是 64 位，但是不要做任何假设，不同的编译器即使在同一个硬件上也可能会做出不同的选择</p>\n<p><code class=\"language-text\">rune</code> 类型是 int32 的同义词，方便用来指示 Unicode 代码点，这两种类型可以交换使用。同样 <code class=\"language-text\">byte</code> 类型是 uint8 的同义词</p>\n<p>最后还有一种无符号整数类型 <code class=\"language-text\">uintptr</code>，它的宽带不指定但是能够满足指针值的存储</p>\n<p>Go 中 +、-、* 和 / 可以使用在 整数、浮点数 和 复数上面，但是取余操作符 % 只能作用于整数。在 Go 中有符号的取余操作的结果符号与被除数一致，比如 -5 % 2，结果是 -3，-5 % -2 结果也是 -3</p>\n<p>不管是有符号只是无符号的运算，如果溢出，高阶位会被舍弃</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> u <span class=\"token builtin\">uint8</span> <span class=\"token operator\">=</span> <span class=\"token number\">255</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> u<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> u<span class=\"token operator\">*</span>u<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出：255 0 1</span>\n\n<span class=\"token keyword\">var</span> i <span class=\"token builtin\">int8</span> <span class=\"token operator\">=</span> <span class=\"token number\">127</span>\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出：127</span></code></pre></div>\n<p>Go 也提供了以下的按位运算</p>\n<ul>\n<li>&#x26;   按位 AND</li>\n<li>|   按位 OR</li>\n<li>^   按位 XOR</li>\n<li>&#x26;^  位清除（bit clear） AND NOT</li>\n<li>&#x3C;&#x3C;  左移位</li>\n<li>>>  右移位</li>\n</ul>\n<p>下面的代码展示了按位运算，并使用 Printf 格式化输出二进制结果</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> x <span class=\"token builtin\">uint8</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">5</span>\n<span class=\"token keyword\">var</span> y <span class=\"token builtin\">uint8</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">2</span>\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b\\n\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token operator\">|</span>y<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token operator\">^</span>y<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token operator\">&amp;^</span>y<span class=\"token punctuation\">)</span></code></pre></div>\n<p>输出</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">00100010\n00000110\n00000010\n00100110\n00100100\n00100000</code></pre></div>\n<p>不同类型之间的转换需要明确指定，算术和逻辑运算对象必须是同一类型</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> apple <span class=\"token builtin\">int64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">var</span> orange <span class=\"token builtin\">int32</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n<span class=\"token keyword\">var</span> mix <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>apple<span class=\"token punctuation\">)</span>  <span class=\"token operator\">+</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>orange<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> mix2 <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> apple <span class=\"token operator\">+</span> orange <span class=\"token comment\">// error: invalid operation: mismatched</span></code></pre></div>","frontmatter":{"title":"Golang 基础数据类型（一）","date":"October 15, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-basic-type-int/","previous":{"fields":{"slug":"/go/golang-structure-7/"},"frontmatter":{"title":"Go 程序结构（七）"}},"next":null}}}