{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-reflect-5/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"26c64a7d-3fb1-5a66-9a08-90fdf02ba136","excerpt":"Golang 反射（五）解码 S 表达式词法分析使用 text/scanner 包的 Scanner，将输入流分割成 token 序列。Scanner 的 Scan 方法推进扫描器并且获取下一个 rune 类型的 token。在 read 方法中 Ident 类型用来处理 struct 字段名和指针的 nil…","html":"<h2>Golang 反射（五）</h2>\n<h4>解码 S 表达式</h4>\n<p>词法分析使用 text/scanner 包的 Scanner，将输入流分割成 token 序列。Scanner 的 Scan 方法推进扫描器并且获取下一个 rune 类型的 token。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"text/scanner\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> lexer <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tscanner scanner<span class=\"token punctuation\">.</span>Scanner\n\ttoken   <span class=\"token builtin\">rune</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>lex <span class=\"token operator\">*</span>lexer<span class=\"token punctuation\">)</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tlex<span class=\"token punctuation\">.</span>token <span class=\"token operator\">=</span> lex<span class=\"token punctuation\">.</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>lex <span class=\"token operator\">*</span>lexer<span class=\"token punctuation\">)</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> lex<span class=\"token punctuation\">.</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">TokenText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>lex <span class=\"token operator\">*</span>lexer<span class=\"token punctuation\">,</span> v reflect<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span> lex<span class=\"token punctuation\">.</span>token <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> scanner<span class=\"token punctuation\">.</span>Ident<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> lex<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"nil\"</span> <span class=\"token punctuation\">{</span>\n\t\t\tv<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">Zero</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\tlex<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">case</span> scanner<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">:</span>\n\t\ts<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Unquote</span><span class=\"token punctuation\">(</span>lex<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tv<span class=\"token punctuation\">.</span><span class=\"token function\">SetString</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\t\tlex<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token keyword\">case</span> scanner<span class=\"token punctuation\">.</span>Int<span class=\"token punctuation\">:</span>\n\t\ti<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Atoi</span><span class=\"token punctuation\">(</span>lex<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tv<span class=\"token punctuation\">.</span><span class=\"token function\">SetInt</span><span class=\"token punctuation\">(</span><span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tlex<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">:</span>\n\t\tlex<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">readList</span><span class=\"token punctuation\">(</span>lex<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n        lex<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unkown token %s\"</span><span class=\"token punctuation\">,</span> lex<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在 read 方法中 Ident 类型用来处理 struct 字段名和指针的 nil 值。当遇到 nil 值时，使用 reflect.Zero 方法设置 v 的值为其类型的零值。</p>\n<p>’(’ 表示列表的开始，下面的 readList 方法将 list 解码为复合类型（map、struct、slice）</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">readList</span><span class=\"token punctuation\">(</span>lex <span class=\"token operator\">*</span>lexer<span class=\"token punctuation\">,</span> v reflect<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Kind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token function\">endList</span><span class=\"token punctuation\">(</span>lex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">read</span><span class=\"token punctuation\">(</span>lex<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Slice<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token operator\">!</span><span class=\"token function\">endList</span><span class=\"token punctuation\">(</span>lex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\titem <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">read</span><span class=\"token punctuation\">(</span>lex<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span>\n\t\t\tv<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Struct<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token operator\">!</span><span class=\"token function\">endList</span><span class=\"token punctuation\">(</span>lex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tlex<span class=\"token punctuation\">.</span><span class=\"token function\">consume</span><span class=\"token punctuation\">(</span><span class=\"token string\">'('</span><span class=\"token punctuation\">)</span>\n\n\t\t\tfield <span class=\"token operator\">:=</span> lex<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\tlex<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">read</span><span class=\"token punctuation\">(</span>lex<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">FieldByName</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t\t\tlex<span class=\"token punctuation\">.</span><span class=\"token function\">consume</span><span class=\"token punctuation\">(</span><span class=\"token string\">')'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">:</span>\n\t\tv<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">MakeMap</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token operator\">!</span><span class=\"token function\">endList</span><span class=\"token punctuation\">(</span>lex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tlex<span class=\"token punctuation\">.</span><span class=\"token function\">consume</span><span class=\"token punctuation\">(</span><span class=\"token string\">'('</span><span class=\"token punctuation\">)</span>\n\n\t\t\tkey <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">read</span><span class=\"token punctuation\">(</span>lex<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n\n\t\t\tvalue <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">read</span><span class=\"token punctuation\">(</span>lex<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n\n\t\t\tv<span class=\"token punctuation\">.</span><span class=\"token function\">SetMapIndex</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n\t\t\tlex<span class=\"token punctuation\">.</span><span class=\"token function\">consume</span><span class=\"token punctuation\">(</span><span class=\"token string\">')'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\">// panic(fmt.Sprintf(\"decode list fail %v\", v))</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"decode list fail %v\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">endList</span><span class=\"token punctuation\">(</span>lex <span class=\"token operator\">*</span>lexer<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> lex<span class=\"token punctuation\">.</span>token <span class=\"token operator\">==</span> scanner<span class=\"token punctuation\">.</span>EOF <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end of file\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> lex<span class=\"token punctuation\">.</span>token <span class=\"token operator\">==</span> <span class=\"token string\">')'</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Unmarchal</span><span class=\"token punctuation\">(</span>data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> out <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\tlex <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>lexer<span class=\"token punctuation\">{</span>scanner<span class=\"token punctuation\">:</span> scanner<span class=\"token punctuation\">.</span>Scanner<span class=\"token punctuation\">{</span>Mode<span class=\"token punctuation\">:</span> scanner<span class=\"token punctuation\">.</span>GoTokens<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n\tlex<span class=\"token punctuation\">.</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tlex<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">read</span><span class=\"token punctuation\">(</span>lex<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Golang 反射（五）","date":"December 12, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-reflect-5/","previous":{"fields":{"slug":"/go/golang-reflect-4/"},"frontmatter":{"title":"Golang 反射（四）"}},"next":{"fields":{"slug":"/go/golang-reflect-6/"},"frontmatter":{"title":"Golang 反射（六）"}}}}}