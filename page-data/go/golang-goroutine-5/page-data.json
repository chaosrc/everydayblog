{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-goroutine-5/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"98f14c9e-16ee-5b0d-b80d-6013db90e666","excerpt":"Golang 并发（五）PiplinesChannel 可以将 goroutine 连接在一起，所以一个 goroutine 的输出可以做为另一个的输入，下面的图展示了三个 goroutine 被两个 channel 连接的情况。Mc8hX8.png第一个 goroutine —— Counter 生成整数 0、1、…","html":"<h2>Golang 并发（五）</h2>\n<h4>Piplines</h4>\n<p>Channel 可以将 goroutine 连接在一起，所以一个 goroutine 的输出可以做为另一个的输入，下面的图展示了三个 goroutine 被两个 channel 连接的情况。</p>\n<p><img src=\"https://s2.ax1x.com/2019/11/18/Mc8hX8.png\" alt=\"Mc8hX8.png\"></p>\n<p>第一个 goroutine —— Counter 生成整数 0、1、2…，并且通过 channel 发送至第二个 goroutine —— squarer 接收每一个值进行平方计算，然后通过另一个 channel 发送给第三个 goroutine —— printer 打印接收到的值。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tnaturals <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\tsquares <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Counter</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\tnaturals <span class=\"token operator\">&lt;-</span> i\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Squarer</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t\tx <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>naturals\n\t\t\tsquares <span class=\"token operator\">&lt;-</span> x <span class=\"token operator\">*</span> x\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Printer</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>squares<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的程序会无限的打印平方数，如果我们需要限制它的数量，那么我们可以让发送者告诉接收者让它停止接收，使用内置的 close 函数就可以做得这一点：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token function\">clase</span><span class=\"token punctuation\">(</span>naturals<span class=\"token punctuation\">)</span></code></pre></div>\n<p>当一个 channel 关闭后，任何发送操作都会 panic。当关闭的 channel 的最后一个发送元素被接收后，所有的接收操作将会非阻塞执行并且产生一个零值。</p>\n<p>没有方法可以检查一个 channel 是否关闭，但是接收操作可以接收两个值：接收一个 channel 元素和一个 bool 值，bool 值为 true 时接收成功，为 false 表示 channel 已经关闭。对于上面的 Squarer 可以通过这种方式，当 naturals 关闭时跳出循环</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Squarer</span>\n<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>naturals\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token punctuation\">}</span>\n        squares <span class=\"token operator\">&lt;-</span> x <span class=\"token operator\">*</span> x\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>squares<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>还有一种更加方便的语法：使用 for range 循环来迭代 channel，在接收到最后一个值时循环自动结束。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Squarer</span>\n<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> x <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> naturals <span class=\"token punctuation\">{</span>\n        squares <span class=\"token operator\">&lt;-</span> x <span class=\"token operator\">*</span>x \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>squares<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>上面的例子中我们修改 Counter 循环 100 次后关闭 naturals channel，使 Squarer 循环终止，关闭 squares channel，最后 main goroutine 结束循环程序退出。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tnaturals <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\tsquares <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Counter·</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\tnaturals <span class=\"token operator\">&lt;-</span> i\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>naturals<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Squarer</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> x <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> naturals <span class=\"token punctuation\">{</span>\n\t\t\tsquares <span class=\"token operator\">&lt;-</span> x <span class=\"token operator\">*</span>x \n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>squares<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Printer</span>\n\t<span class=\"token keyword\">for</span> x <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> squares <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Golang 并发（五）","date":"November 18, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-goroutine-5/","previous":{"fields":{"slug":"/go/golang-goroutine-4/"},"frontmatter":{"title":"Golang 并发（四）"}},"next":{"fields":{"slug":"/go/golang-goroutine-6/"},"frontmatter":{"title":"Golang 并发（六）"}}}}}