{"componentChunkName":"component---src-templates-blog-post-js","path":"/go/golang-reflect-3/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"e1615bab-ad45-5099-bf5d-27141e03bea5","excerpt":"Golang 反射（三）编码 S-表达式（s-express）类似于 JSON、XM，S-表达式也是一种广泛使用的数据格式，是 Lisp 语言的语法。下面我们将实现一个 S-表达式，支持下面几种结构：对于数值和字符串转为对应的类型；对于 struct 每个字段转换为两个元素的 list…","html":"<h2>Golang 反射（三）</h2>\n<h4>编码 S-表达式（s-express）</h4>\n<p>类似于 JSON、XM，S-表达式也是一种广泛使用的数据格式，是 Lisp 语言的语法。</p>\n<p>下面我们将实现一个 S-表达式，支持下面几种结构：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   42         integer\n   &quot;hello&quot;    string\n   foo        symbol(不带引号的名称)\n   (1 2 3)    list</code></pre></div>\n<p>对于数值和字符串转为对应的类型；对于 struct 每个字段转换为两个元素的 list，第一个元素为字段名称，第二个为字段的值；对于 map 类型也转换为 list 对，每一对为 map 的 key 和 value</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"bytes\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"reflect\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>buf <span class=\"token operator\">*</span>bytes<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> v reflect<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Kind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Invalid<span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"nil\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Int<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span>Int8<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span>Int16<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span>Int32<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span>Int64<span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%q\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span>Slice<span class=\"token punctuation\">:</span>\n\t\tbuf<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> i <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tbuf<span class=\"token punctuation\">.</span><span class=\"token function\">WriteByte</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tbuf<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Struct<span class=\"token punctuation\">:</span>\n\t\tbuf<span class=\"token punctuation\">.</span><span class=\"token function\">WriteByte</span><span class=\"token punctuation\">(</span><span class=\"token string\">'('</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">NumField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\tname <span class=\"token operator\">:=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Name\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"(%s \"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\tbuf<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> i <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">NumField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tbuf<span class=\"token punctuation\">.</span><span class=\"token function\">WriteByte</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tbuf<span class=\"token punctuation\">.</span><span class=\"token function\">WriteByte</span><span class=\"token punctuation\">(</span><span class=\"token string\">')'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">:</span>\n\t\tbuf<span class=\"token punctuation\">.</span><span class=\"token function\">WriteByte</span><span class=\"token punctuation\">(</span><span class=\"token string\">'('</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> key <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">MapKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"(%s \"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">MapIndex</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\tbuf<span class=\"token punctuation\">.</span><span class=\"token function\">WriteByte</span><span class=\"token punctuation\">(</span><span class=\"token string\">')'</span><span class=\"token punctuation\">)</span>\n\n\t\t\t<span class=\"token keyword\">if</span> i <span class=\"token operator\">!=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">MapKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tbuf<span class=\"token punctuation\">.</span><span class=\"token function\">WriteByte</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tbuf<span class=\"token punctuation\">.</span><span class=\"token function\">WriteByte</span><span class=\"token punctuation\">(</span><span class=\"token string\">')'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Ptr<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\">// 不支持的类型 Func chan interface 等</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unsupport type %s\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> buf bytes<span class=\"token punctuation\">.</span>Buffer\n\terr <span class=\"token operator\">:=</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>buf<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">Bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用 Marshal 方法</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">foo <span class=\"token operator\">:=</span> Foo<span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"good\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nb<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> <span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------------------\"</span><span class=\"token punctuation\">)</span>\n\ns<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> <span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>输出</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ go run <span class=\"token keyword\">.</span>\n<span class=\"token punctuation\">((</span>foo <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>age 18<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>list <span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span> <span class=\"token string\">\"Hello\"</span> <span class=\"token string\">\"good\"</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">(</span>m <span class=\"token variable\"><span class=\"token punctuation\">((</span>name <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>get <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">))</span>\n---------------------------------\n<span class=\"token variable\"><span class=\"token punctuation\">((</span>file <span class=\"token punctuation\">((</span>pfd <span class=\"token punctuation\">((</span>fdmu <span class=\"token punctuation\">((</span>state <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>rsema <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>wsema <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Sysfd 2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>pd <span class=\"token variable\"><span class=\"token punctuation\">((</span>runtimeCtx <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>iovecs nil<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>csema <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>isBlocking <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>IsStream <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ZeroReadIsEOF <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>isFile <span class=\"token punctuation\">))</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>name <span class=\"token string\">\"/dev/stderr\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>dirinfo nil<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>nonblock <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>stdoutOrErr <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>appendMode <span class=\"token punctuation\">))</span><span class=\"token punctuation\">))</span></code></pre></div>","frontmatter":{"title":"Golang 反射（三）","date":"December 09, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go/golang-reflect-3/","previous":{"fields":{"slug":"/go/golang-reflect-2/"},"frontmatter":{"title":"Golang 反射（二）"}},"next":null}}}