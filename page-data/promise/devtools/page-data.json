{"componentChunkName":"component---src-templates-blog-post-js","path":"/promise/devtools/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"9cb876e2-e263-59c9-a91c-3647328c6a23","excerpt":"使用 Chrome DevTools 调试 Node.js 程序代码调试是程序员的必备技能，选择适合的工具能够极大的提高调试的效率。Node.js 6.3 及以上版本内置了一个调试器，可以结合 Chrome DevTools 使用来调试代码。创建测试代码上面的代码使用 koa 创建一个简单 web 服务，监听 800…","html":"<h2>使用 Chrome DevTools 调试 Node.js 程序</h2>\n<p>代码调试是程序员的必备技能，选择适合的工具能够极大的提高调试的效率。</p>\n<p>Node.js 6.3 及以上版本内置了一个调试器，可以结合 Chrome DevTools 使用来调试代码。</p>\n<h4>创建测试代码</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>上面的代码使用 koa 创建一个简单 web 服务，监听 8000 端口</p>\n<h4>使用 Chrome DevTools</h4>\n<p>在运行程序时加上 <code class=\"language-text\">--inspect</code> 和 <code class=\"language-text\">--inspect-brk</code> 参数开启 debug 模式，两者的区别是使用<code class=\"language-text\">--inspect-brk</code> 会在程序第一行就暂停执行</p>\n<p>运行程序</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node --inspect index.js \nDebugger listening on ws://127.0.0.1:9229/286e1f8b-00a1-4fd9-8bca-a67a4e74cdc8\nFor help, see: https://nodejs.org/en/docs/inspector</code></pre></div>\n<p>打开 chrome，访问 chrome://inspect</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/22/mBSuGV.png\"></p>\n<p>在 Romote Target 下面会列出所有可以调试的程序，点击对应的 inspect 按钮可以打开调试工具</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/22/mBSK2T.png\"></p>\n<p>可以看到我们上面写的测试代码，点击左边的行数添加断点</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/22/mBSe5q.png\"></p>\n<p>访问刚刚启动的程序</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> localhost:8000</code></pre></div>\n<p>可以看到程序暂停到断点出并且可以查看当前上下文下的变量信息，debugger 工具栏还有单步执行、单步进入等常见的 deug 功能</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/22/mBSnP0.png\"></p>\n<h4>使用 process._debugProcess</h4>\n<p>通常情况下我们启动了一个 Node.js 程序但是没有添加 <code class=\"language-text\">--inspect</code> 或 <code class=\"language-text\">--inspect-brk</code>，那么必须重启程序并添加参数，使用 _debugProcess 可以在不重启的情况下进入 debug 模式</p>\n<p>首先常规运行程序</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node  index.js </code></pre></div>\n<p>获取程序的 pid</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pgrep -n node\n91771</code></pre></div>\n<p>运行 _debugProcess</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node -e <span class=\"token string\">\"process._debugProcess(91771)\"</span></code></pre></div>\n<p>_debugProcess 方法中传人的参数为需要以 debug 模式运行程序的 pid</p>\n<p>打开 chrome 进行调试</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/23/mB9DUA.png\"></p>","frontmatter":{"title":"使用 Chrome DevTools 调试 Node.js 程序","date":"August 22, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/promise/devtools/","previous":{"fields":{"slug":"/promise/source-map/"},"frontmatter":{"title":"在 Node.js 中使用 Source Map"}},"next":{"fields":{"slug":"/promise2/"},"frontmatter":{"title":""}}}}}