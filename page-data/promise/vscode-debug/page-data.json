{"componentChunkName":"component---src-templates-blog-post-js","path":"/promise/vscode-debug/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"7239b1be-4a0d-51c4-8df3-06835883faa8","excerpt":"使用 Visual Studio Code 调试代码Visual Studio Code（简称 VS Code） 是一个跨平台、轻量级代码编辑器。VS Code 内置的对 Node.js 的 debug 支持，能够 debug Javascript 和 Typescript ，对于其他语言可以通过 VS Code…","html":"<h2>使用 Visual Studio Code 调试代码</h2>\n<p>Visual Studio Code（简称 VS Code） 是一个跨平台、轻量级代码编辑器。VS Code 内置的对 Node.js 的 debug 支持，能够 debug Javascript 和 Typescript ，对于其他语言可以通过 VS Code 提供的插件来支持</p>\n<h4>基本调试</h4>\n<ol>\n<li>创建调试代码</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/24/msBbJf.png\"></p>\n<ol start=\"2\">\n<li>添加断点、运行</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/24/mswb7t.gif\"></p>\n<p>在需要断点的行数左侧的空白处单击添加断点，在 VS Code 左侧工具栏中点击地 4 个图标打开 debug 面板，以 debug 模式运行程序</p>\n<ol start=\"3\">\n<li>调试</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/24/msBrZR.gif\"></p>\n<p>运行 <code class=\"language-text\">curl localhost:8000</code> 访问服务，代码在断点处暂停执行可以查看代码上下文以及常规的 debug 调试，基本上覆盖了 Chrome DevTools 的所有功能</p>\n<h4>调试配置</h4>\n<p>上面演示了一个 VS Code 中最基本的调试，VS Code 还提供了一个配置文件可以对调试功能进行详细的设置</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/24/msBHFP.png\"></p>\n<p>打开 debug 面板，点击开始旁边的设置按钮选择Node.js，VS Code 会自动创建一个 launch.json 文件</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/24/msBTot.png\"></p>\n<p>launch.json 文件用来储存调试相关的一些配置，VS Code 在启动时后读取 launch.json 来决定如何运行程序</p>\n<p>launch.json 的常用配置选项</p>\n<ol>\n<li>\n<p>必填字段</p>\n</li>\n<li>\n<p>type：调试器的类型，<code class=\"language-text\">node</code> 指内置的 Node.js 调试器类型，如果是其他语言比如 go 和 php，安装对应的扩展后 type 的值分别为 go 和 php</p>\n</li>\n<li>\n<p>request: 请求类型，包括 launch 和 attach。launch 是以调试模式启动程序，attach 是附加到已经启动的进程并开启调试模式。</p>\n</li>\n<li>\n<p>name：下拉选择时显示的名字</p>\n</li>\n<li>\n<p>通用的可选字段</p>\n</li>\n<li>\n<p>preLaunchTask: 在开始调试之前需要启动的任务，任务的名字对应 task.json (.vscode 文件夹中) 中定义的任务</p>\n</li>\n<li>\n<p>postDebugTask: 在调试结束时启动的任务，任务的名字同样是在 task.json 中定义的</p>\n</li>\n<li>\n<p>internalConsoleOptions: 控制 Debug Console 面板的显示</p>\n</li>\n<li>\n<p>serverReadyAction：可以配置调试启动时自动打开浏览器并访问指定的 URL</p>\n</li>\n<li>\n<p>大部分调试器支持的字段</p>\n</li>\n<li>\n<p>program: 调试器要运行的程序或者文件</p>\n</li>\n<li>\n<p>args：传递给调试程序的参数</p>\n</li>\n<li>\n<p>env：环境变量</p>\n</li>\n<li>\n<p>cwd：当前工作路径用来查找依赖或者其他文件</p>\n</li>\n<li>\n<p>port：附加到一个运行程序时的程序端口号</p>\n</li>\n<li>\n<p>address：远程调试的 IP 地址</p>\n</li>\n<li>\n<p>skipFiles：调试时需要忽略的文件比如外部依赖 node_modules</p>\n</li>\n</ol>\n<h4>远程调试</h4>\n<p>Node.js >= 4.x 以上的版本开始支持远程调试</p>\n<ul>\n<li>在服务器上以 debug 模式运行程序</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node --inspect<span class=\"token operator\">=</span>0.0.0.0:9229 index.js</code></pre></div>\n<p>—inspect 参数默认值是 127.0.0.1:9229 只能在本机连接，如果要使用远程 debug 模式需要将 IP 指定为 0.0.0.0 或者 公共 IP（ public IP）。需要注意的是调试器可以完全访问 Node.js 执行环境，将调试器暴露在公共网络非常危险，因此只能在测试环境或者内网启用远程调试。<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<ul>\n<li>添加 launch.json 配置</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/08/24/m6AFfS.png\"></p>\n<p>在 launch.json 文件中点击 Add Configuration ，选择 Node.js: Attach to Remote Program，VS Code 会自动添加一项配置</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/24/m6Emge.png\"></p>\n<p>填写对应的字段：</p>\n<ul>\n<li>address： 服务器 IP 地址</li>\n<li>port：服务器 N\u001dode.js 调试器的端口默认为 9229，可以通过 —inspect 参数指定</li>\n<li>remoteRoot：服务器 Node.js 程序目录</li>\n</ul>\n<p>连接远程调试器</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/24/m6VGZR.png\"></p>\n<p>在调试面板选择远程配置运行</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/24/m6Z81S.png\"></p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://nodejs.org/en/docs/guides/debugging-getting-started/#security-implications\">https://nodejs.org/en/docs/guides/debugging-getting-started/#security-implications</a></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"使用 Visual Studio Code 调试代码","date":"August 23, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/promise/vscode-debug/","previous":{"fields":{"slug":"/promise/devtools/"},"frontmatter":{"title":"使用 Chrome DevTools 调试 Node.js 程序"}},"next":{"fields":{"slug":"/promise/log-morgan/"},"frontmatter":{"title":"Node.js 日志中间件 morgan"}}}}}