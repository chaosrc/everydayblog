{"componentChunkName":"component---src-templates-blog-post-js","path":"/promise/erro-stack/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"def70757-d227-5296-92f2-a10ed2137785","excerpt":"Node.js 错误栈当程序出现错误是通常会抛出错误栈（error.stack），通过错误栈可以定位到出错的代码。 Node.js 的 Error 对象中包含错误栈（stack）以及 name、message 等属性。Node.js 中内置的 Error 类型Error: 通用的错误类型，比如 new Error…","html":"<h2>Node.js 错误栈</h2>\n<p>当程序出现错误是通常会抛出错误栈（error.stack），通过错误栈可以定位到出错的代码。 Node.js 的 Error 对象中包含错误栈（stack）以及 name、message 等属性。</p>\n<h4>Node.js 中内置的 Error 类型</h4>\n<ul>\n<li>Error: 通用的错误类型，比如 new Error(‘Network Error!‘)</li>\n<li>SyntaxError: 语法错误，Javascript 语法错误</li>\n<li>ReferenceError: 引用错误，比如引用未定义的变量</li>\n<li>TypeError: 类型错误</li>\n<li>URIError: 全局的 URI 处理函数抛出的错误</li>\n<li>AssertError: 使用 assert 模块时抛出的错误</li>\n</ul>\n<h4>Stack Trace</h4>\n<p>错误栈本质上是调用栈（或者叫做堆栈追踪），在 Javascript 中，调用栈指每当有一个函数被调用，就会将该函数压入栈顶，在调用结束时在将其从栈顶移出</p>\n<p>比如下面的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>输出：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node stack.js \na\nb\nc\nTrace\n    at c <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/promise/stack.js:4:13<span class=\"token punctuation\">)</span>\n    at b <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/promise/stack.js:9:5<span class=\"token punctuation\">)</span>\n    at a <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/promise/stack.js:14:5<span class=\"token punctuation\">)</span>\n    at Object.<span class=\"token operator\">&lt;</span>anonymous<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/promise/stack.js:17:1<span class=\"token punctuation\">)</span></code></pre></div>\n<p>在函数 c 中调用 console.trace 方法打印出当前函数的栈追踪，依次为 c、b、a，可以看出时 a 调用 b，b 调用 c </p>\n<p>做一点小的修改，在 b 方法调用 c 之后打印栈追踪</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>输出：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node stack.js \na\nb\nc\nTrace\n    at b <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/promise/stack.js:9:13<span class=\"token punctuation\">)</span>\n    at a <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/promise/stack.js:14:5<span class=\"token punctuation\">)</span>\n    at Object.<span class=\"token operator\">&lt;</span>anonymous<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/promise/stack.js:17:1<span class=\"token punctuation\">)</span></code></pre></div>\n<p>在 b 方法中调用 c 后，c 从栈顶移除，打印的栈追踪中只有 a 调用 b </p>\n<h4>Error.captureStackTrace</h4>\n<p>Error.captureStackTrace 是 V8 提供的一个 API，用来捕获调用栈。captureStackTrace 接受两个参数</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Error<span class=\"token punctuation\">.</span><span class=\"token function\">captureStackTrace</span><span class=\"token punctuation\">(</span>targetObject<span class=\"token punctuation\">,</span> constructorOpt<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Error.captureStackTrace 会在 targetObject 上添加一个 stack 属性，在对该属性进行访问是，将以字符串的形式返回 Error.captureStackTrace 被调用时的堆栈信息</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n    Error<span class=\"token punctuation\">.</span><span class=\"token function\">captureStackTrace</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span></code></pre></div>\n<p>输出：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node stack.js \na\nb\nc\nError\n    at c <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/promise/stack.js:6:11<span class=\"token punctuation\">)</span>\n    at b <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/promise/stack.js:11:5<span class=\"token punctuation\">)</span>\n    at a <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/promise/stack.js:16:5<span class=\"token punctuation\">)</span>\n    at Object.<span class=\"token operator\">&lt;</span>anonymous<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/promise/stack.js:19:1<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Error.captureStackTrace 的第二个参数 constructorOpt 为可选参数，constructorOpt 是一个函数，传人这个参数后，在调用 targetObject.stack 查看栈追踪时，constructorOpt 函数之上的栈信息都会被忽略，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n    Error<span class=\"token punctuation\">.</span><span class=\"token function\">captureStackTrace</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span></code></pre></div>\n<p>输出：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node stack.js \na\nb\nc\nError\n    at a <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/promise/stack.js:16:5<span class=\"token punctuation\">)</span>\n    at Object.<span class=\"token operator\">&lt;</span>anonymous<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/promise/stack.js:19:1<span class=\"token punctuation\">)</span></code></pre></div>\n<p>在 Error.captureStackTrace(obj,b) 中第二参数传人的是 b，那么 b 方法之上的栈信息被忽略，对于一些调用栈比较深的栈追踪很有帮助，能够更快的定位问题</p>","frontmatter":{"title":"Node.js 错误栈","date":"August 20, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/promise/erro-stack/","previous":{"fields":{"slug":"/promise/promise-standard/"},"frontmatter":{"title":"Promise 规范及实现原理"}},"next":{"fields":{"slug":"/promise/source-map/"},"frontmatter":{"title":"在 Node.js 中使用 Source Map"}}}}}