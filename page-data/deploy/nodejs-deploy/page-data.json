{"componentChunkName":"component---src-templates-blog-post-js","path":"/deploy/nodejs-deploy/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"144358c7-f22f-5765-b9a2-54ec3dfade26","excerpt":"Node.js 程序的运维与部署每一种 web 技术都有各种增强稳定性和提供性能的技巧，Node.js 也不例外。web 程序如何部署，如何选择部署环境，如何保证在线时长也是一个至关重要的安置 Node.js 程序可靠和可扩展的运行 Node.js 的三种方式：平台即服务（PaaS） — 在 Amoazon、Azure…","html":"<h2>Node.js 程序的运维与部署</h2>\n<p>每一种 web 技术都有各种增强稳定性和提供性能的技巧，Node.js 也不例外。web 程序如何部署，如何选择部署环境，如何保证在线时长也是一个至关重要的</p>\n<h4>安置 Node.js 程序</h4>\n<p>可靠和可扩展的运行 Node.js 的三种方式：</p>\n<ul>\n<li>平台即服务（PaaS） — 在 Amoazon、Azure 等平台上运行</li>\n<li>服务器或虚拟主机 — 在云上、私有主机或者公司内部的服务器上运行</li>\n<li>容器 — 在 Docker 容器中运行</li>\n</ul>\n<p>在 PaaS 服务上运行相对比较容易，只需要注册相应的账号，创建程序，然后推送代码，基本上是即插即用的</p>\n<p>在服务器上安装定制化比较高，可以安装自己想要的服务，比如 HTTP 服务器、缓存层、日志软件等，但是需要自己管理，对 DevOps 等有要求</p>\n<p>容器可以看作是程序部署自动化的 OS 虚拟技术，可以将程序定义为镜像，方便的组合多个程序，将程序容器化后，用一条命令就可以带起一个新实例</p>\n<h4>保证 Node.js 不掉线</h4>\n<p>如果使用 ssh 在服务器上直接运行 Node.js，退出 ssh 后 Node.js 就会停止运行。使用 Forever 工具可以保证程序不会停止运行，而且如果程序崩溃，Forever 还会重启程序</p>\n<ul>\n<li>安装 Forever</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g forever</code></pre></div>\n<ul>\n<li>\n<p>使用 Forever 启动程序</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ forver start server.js</code></pre></div>\n</li>\n<li>\n<p>停止程序</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ forver stop server.js</code></pre></div>\n</li>\n<li>\n<p>列出所有管理程序</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ forvever list</code></pre></div>\n</li>\n<li>\n<p>源码发生改变是自动重启</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ forvever -w start server.js</code></pre></div>\n</li>\n</ul>\n<h4>使用 Upstart 保证在线时长</h4>\n<p>Upstart 可以优雅第管理所有 Linux 程序的启动和关停。CentOS 和 Ubuntu 的现代版本都支持 Upstart</p>\n<ul>\n<li>安装</li>\n</ul>\n<p>CentOS</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> yun <span class=\"token function\">install</span> upstart</code></pre></div>\n<p>Ubuntu</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> upstart</code></pre></div>\n<p>安装好后需要给每个程序添加一个 Upstart 配置文件，并放在 /etc/init 目录下</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">author  &#39;chao&#39;\ndescription: &#39;描述&#39;\n\nstart on runlevel [2345]\nstop on runlevel [06]\n\nrespawn\nrespawn limit 15 5\n\nconsole log\nenv NODE_ENV=production\nexec /usr/bing/node server.js</code></pre></div>\n<p>respaw 配置程序在崩溃后需要重启的次数\n、以及间隔时间</p>\n<p>再使用 exec 命令运行程序</p>\n<p>Upstart 可配置化很高，功能强大，，深入了解可以参考官网文档</p>","frontmatter":{"title":"Node.js 程序的运维与部署","date":"August 02, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/deploy/nodejs-deploy/","previous":{"fields":{"slug":"/test/nodejs-cypress-core/"},"frontmatter":{"title":"Cypress 测试框架的核心概念"}},"next":null}}}