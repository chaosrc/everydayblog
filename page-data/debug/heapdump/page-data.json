{"componentChunkName":"component---src-templates-blog-post-js","path":"/debug/heapdump/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"3a159de5-8555-5511-a75e-98fa1bed7842","excerpt":"Node.js 内存调试之 heapdumpheapdump 是一个 dump V8 堆信息的工具，前面提到的 v8-profiler 也有堆信息的功能，这两个工具的原理是一样的，但是 heapdump 更简单一点使用 heapdump…","html":"<h2>Node.js 内存调试之 heapdump</h2>\n<p>heapdump 是一个 dump V8 堆信息的工具，前面提到的 v8-profiler 也有堆信息的功能，这两个工具的原理是一样的，但是 heapdump 更简单一点</p>\n<h4>使用 heapdump</h4>\n<p>首先创建一段内存泄露的测试代码</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> heapdump <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'heapdump'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> leakObject <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> originLeak <span class=\"token operator\">=</span> leakObject\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">unused</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>originLeak<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'originLeak'</span><span class=\"token punctuation\">,</span> originLeak<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    leakObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        count<span class=\"token punctuation\">:</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>\n        leakString<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1e7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">leakMethod</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'leak message'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这是一段经典的内存泄露测试代码，内存泄露的原因是：在 setInterval 的回调方法中有两个闭包一个是 unused 方法，一个是 leakMethod 方法。unused 方法中引用了全局的 originLeak 变量，如果没有后面的 leakMethod 方法，则在函数执行完成后 unused 将会被销毁，闭包作用域被销毁，不会产生内存泄露，因为后面的 leakMethod 被全局的 leakObject 引用，leakMethod 形成的闭包作用域引用了 unused 从而引用了 originLeak 变量，导致 originLeak 不能被销毁，随着 setInterval 的不断被调用形成闭包链，导致所有的 leakObject 都不能被销毁，最终导致内存泄露</p>\n<p>运行测试代码</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node leaks.js</code></pre></div>\n<p>执行两次下面的命令</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">kill</span> -USR2 <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">grep</span> -n node<span class=\"token variable\">`</span></span></code></pre></div>\n<p>生成两个 heapsnapshot 文件</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span>\nheapdump-165258801.171380.heapsnapshot  index.js\nheapdump-165267934.430.heapsnapshot     leaks.js</code></pre></div>\n<h4>使用 Chrome DevTools 分析 heapsnapshot 文件</h4>\n<p>打开 Chrome DevTool 选择 memory 面板，点击 load 加载 heapsnapshot 文件</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/15/mVhwn0.png\"></p>\n<p>两个文件都 load 后，在左上角可以看到 4 个下拉选项</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/16/mV4VbV.png\"></p>\n<ul>\n<li>Summary: 以构造函数名分类显示</li>\n<li>Comparison: 比较多个快照之间的差异</li>\n<li>Containment: 查看整个 GC 路径</li>\n<li>Statistics: 以饼状图形式显示内存占用信息</li>\n</ul>\n<p>最常用的是 Summary 和 Comparison</p>\n<p>选择 Summary 进行查看</p>\n<ul>\n<li>Constructor： 构造函数名，加括号的表示是内置的。构造函数名后面的 x 加数字，表示对象的个数</li>\n<li>Distance: 指到 GC 根对象（root）的距离，指到 GC 根对象在浏览器中一般是 window 对象，在 node.js 中一般为 global 对象。距离越大说明引用越深</li>\n<li>Shallow Size: 指对象自身的大小，不包括他引用对象的大小</li>\n<li>Retained Size: 指对象自身的大小和它引用的对象的大小，即该对象被 GC 之后能回收的大小</li>\n</ul>\n<p>点击 Retained Size 进行降序排列，展开 closure 这一项，可以看到 leakMethod，再继续展开 leakMethod，可以看到对 originLeak 的引用，而 originLeak 又继续引用了上一个 leakMethod </p>\n<p><img src=\"https://s2.ax1x.com/2019/08/16/mVIT4U.png\"></p>","frontmatter":{"title":"Node.js 内存调试之 heapdump","date":"August 15, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/debug/heapdump/","previous":{"fields":{"slug":"/debug/gcore_llnode/"},"frontmatter":{"title":"Node.js 内存调试之 gcore 与 llnode"}},"next":{"fields":{"slug":"/debug/memwatch-next/"},"frontmatter":{"title":"Node.js 内存调试之 memwatch-next"}}}}}