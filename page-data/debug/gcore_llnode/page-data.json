{"componentChunkName":"component---src-templates-blog-post-js","path":"/debug/gcore_llnode/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"959af53d-e0dc-54de-b1ee-643356b80cb2","excerpt":"Node.js 内存调试之 gcore 与 llnode内存泄露是 Node.js 常见的问题之一，不当的全局缓存、事件监听、闭包等都可能导致内存泄露，如何检测、定位内存泄露是非常重要的话题什么是 Core Dump…","html":"<h2>Node.js 内存调试之 gcore 与 llnode</h2>\n<p>内存泄露是 Node.js 常见的问题之一，不当的全局缓存、事件监听、闭包等都可能导致内存泄露，如何检测、定位内存泄露是非常重要的话题</p>\n<h4>什么是 Core Dump</h4>\n<p>当程序在运行过程中异常终止或者崩溃时，操作系统将会将程序当时的内存状态记录下来，并保存在一个文件中，这种行为就叫 Core Dump。Core Dump 不仅会保存内存信息，也会保存寄存器信息、内存管理信息、其他处理器以及操作系统状态信息等，对于程序的诊断和调试非常有帮助，当程序出错后 Core Dump 可以再现出错时的场景</p>\n<p>linux 中通过 <code class=\"language-text\">ulimit -c</code> 查看允许生成的 Core Dump 文件大小如为 0，则 Core Dump 为关闭状态，使用 <code class=\"language-text\">ulimit -c unlimited</code> 命令开启并不限制 Core Dump 生成文件的大小</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ulimit</span> -c\n0\n$ <span class=\"token function\">ulimit</span> -c unlimited\n$ <span class=\"token function\">ulimit</span> -c\nunlimited</code></pre></div>\n<p>上面的命令只在当前终端生效，如果想要永久生效需要修改 /etc/security/limits.conf 中修改</p>\n<h4>gcore</h4>\n<p>gcore 命令可以在不重启程序的情况下生成指定进程的 Core Dump</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ gcore <span class=\"token punctuation\">[</span>-o filename<span class=\"token punctuation\">]</span> pid</code></pre></div>\n<p>pid 指定程序的进程 id，当程序发生 Core Dump 时，默认会在执行 gcore 命名的目录下生成 core.<pid> 文件 或者 -o 参数指定的文件名的文件</p>\n<h4>llnode</h4>\n<p>lldb 是一个高性能调试器，而 llnode 是 lldb 的一个插件，用来调试 Node.js</p>\n<p>安装 llnode 和 lldb <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> lldb-4.0 liblldb-4.0-dev\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g llnode</code></pre></div>\n<h4>测试 Core Dump</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 文件： index.js</span>\n<span class=\"token keyword\">const</span> leaks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LeakClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        leaks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LeakClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Leaks: %d'</span><span class=\"token punctuation\">,</span> leaks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>上面是一个使用全局变量做缓存导致内存泄露的例子</p>\n<p>运行</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node index.js</code></pre></div>\n<p>等待几秒后运行 gcore</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ gcore -o core_file <span class=\"token variable\"><span class=\"token variable\">`</span>pgrep -n node<span class=\"token variable\">`</span></span></code></pre></div>\n<p>生成 Core Dump 文件 core_file</p>\n<p>下一步将会分析生成的 Core Dump 文件</p>\n<p>运行 lldb</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ lldb-4.0 -c core.1070\n<span class=\"token punctuation\">(</span>lldb<span class=\"token punctuation\">)</span> </code></pre></div>\n<p>此时 llnode 还不能使用，需要加载 llnode 插件到 lldb 中</p>\n<h4>加载 llnode 插件</h4>\n<ul>\n<li>\n<p>使用 llnode 命令</p>\n<p>通过全局安装 llnode（npm install -g llnode）后，使用 llnode 命令会启动 lldb 并且自动加载 llnode 插件，所有 llnode 的参数都会传给 lldb</p>\n</li>\n<li>\n<p>使用 ~/.lldbinit 加载</p>\n<p>在 ~/.lldbinit 中添加 plugin load 命令，lldb 在启动是会自动加载插件</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">plugin load /path/to/the/llnode/plugin</code></pre></div>\n</li>\n<li>\n<p>手动加载 llnode 插件</p>\n<p>运行 lldb 后，使用 plugin load 命令加载</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ lldb-4.0 -c core.10706 \n<span class=\"token punctuation\">(</span>lldb<span class=\"token punctuation\">)</span> target create --core <span class=\"token string\">\"core.10706\"</span>\nCore <span class=\"token function\">file</span> <span class=\"token string\">'/home/chao/workspace/core-dump/core.10706'</span> <span class=\"token punctuation\">(</span>x86_64<span class=\"token punctuation\">)</span> was loaded.\n<span class=\"token punctuation\">(</span>lldb<span class=\"token punctuation\">)</span> plugin load /path/llnode/llnode.so</code></pre></div>\n</li>\n</ul>\n<h4>使用 llnode 分析 Core 文件</h4>\n<p>成功加载 llnode 后，运行 <code class=\"language-text\">v8 help</code> 查看命令选项</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ llnode -c core.10706 \n<span class=\"token punctuation\">(</span>lldb<span class=\"token punctuation\">)</span> target create --core <span class=\"token string\">\"core.10706\"</span>\nCore <span class=\"token function\">file</span> <span class=\"token string\">'/home/chao/workspace/core-dump/core.10706'</span> <span class=\"token punctuation\">(</span>x86_64<span class=\"token punctuation\">)</span> was loaded.\n<span class=\"token punctuation\">(</span>lldb<span class=\"token punctuation\">)</span> plugin load <span class=\"token string\">'/home/chao/software/node/lib/node_modules/llnode/llnode.so'</span>\n<span class=\"token punctuation\">(</span>lldb<span class=\"token punctuation\">)</span> settings <span class=\"token keyword\">set</span> prompt <span class=\"token string\">'(llnode) '</span>\n<span class=\"token punctuation\">(</span>llnode<span class=\"token punctuation\">)</span>  v8 <span class=\"token function\">help</span>\n     Node.js helpers\n\nSyntax: \n\nThe following subcommands are supported:\n\n      bt                -- Show a backtrace with node.js JavaScript functions\n                           and their args. An optional argument is accepted<span class=\"token punctuation\">;</span> <span class=\"token keyword\">if</span>\n                           that argument is a number, it specifies the number\n                           of frames to display. Otherwise all frames will be\n                           dumped.\n                           Syntax: v8 bt <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">]</span>\n      findjsinstances   -- List every object with the specified <span class=\"token function\">type</span>\n                           name.\n                           Flags:\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>运行 v8 findjsobjects 查看所有对象的实例以及总共占用的内存大小</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>llnode<span class=\"token punctuation\">)</span> v8 findjsobjects\n Instances  Total Size Name\n ---------- ---------- ----\n          1         24 AssertionError\n          1         24 AsyncResource\n          1         24 FastBuffer\n          1         24 Loader\n          <span class=\"token punctuation\">..</span>.\n          3        280 AsyncHook\n         12        384 ContextifyScript\n         12        712 TickObject\n         14       1120 <span class=\"token punctuation\">(</span>ArrayBufferView<span class=\"token punctuation\">)</span>\n         55       3520 NativeModule\n        339      10848 <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">)</span>\n        647      36584 Object\n       1101      44024 LeakClass\n       7855      41008 <span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span>\n ---------- ---------- \n      10099     142656 </code></pre></div>\n<p>可以看到 LeakClass 实例有 1101 个 占用来 44024 Byte内存</p>\n<p>运行 v8 findjsinstances 查看类的所有实例</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>llnode<span class=\"token punctuation\">)</span> v8 findjsinstances LeakClass\n0x19e5b993ce91:<span class=\"token operator\">&lt;</span>Object: LeakClass<span class=\"token operator\">></span>\n0x19e5b993ce11:<span class=\"token operator\">&lt;</span>Object: LeakClass<span class=\"token operator\">></span>\n0x19e5b993cd91:<span class=\"token operator\">&lt;</span>Object: LeakClass<span class=\"token operator\">></span>\n0x19e5b993cd11:<span class=\"token operator\">&lt;</span>Object: LeakClass<span class=\"token operator\">></span>\n0x19e5b993cc91:<span class=\"token operator\">&lt;</span>Object: LeakClass<span class=\"token operator\">></span>\n0x19e5b993cc11:<span class=\"token operator\">&lt;</span>Object: LeakClass<span class=\"token operator\">></span>\n0x19e5b993cb91:<span class=\"token operator\">&lt;</span>Object: LeakClass<span class=\"token operator\">></span>\n0x19e5b993cb11:<span class=\"token operator\">&lt;</span>Object: LeakClass<span class=\"token operator\">></span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>运行 v8 i 或 v8 inspect 查看实例的具体内容</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>llnode<span class=\"token punctuation\">)</span> v8 i 0x19e5b993ce91\n0x19e5b993ce91:<span class=\"token operator\">&lt;</span>Object: LeakClass properties <span class=\"token punctuation\">{</span>\n    .name<span class=\"token operator\">=</span>0x19e5b993cec9:<span class=\"token operator\">&lt;</span>String: <span class=\"token string\">\"0.hu7sgkclxh\"</span><span class=\"token operator\">></span>,\n    .age<span class=\"token operator\">=</span>3.357192<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></code></pre></div>\n<p>可以看到 0x19e5b993ce91 实例的两个属性 name 和 age ，以及它们的值</p>\n<p>运行 v8 findrefs 查看引用</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>llnode<span class=\"token punctuation\">)</span> v8 findrefs 0x19e5b993ce91\n0x19e5b9911a21: <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>999<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>0x19e5b993ce91\n<span class=\"token punctuation\">(</span>llnode<span class=\"token punctuation\">)</span> v8 i 0x19e5b9911a21\n0x19e5b9911a21:<span class=\"token operator\">&lt;</span>Array: length<span class=\"token operator\">=</span>1289 <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>0x19e5b9913091:<span class=\"token operator\">&lt;</span>Object: LeakClass<span class=\"token operator\">></span>,\n    <span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>0x19e5b9913271:<span class=\"token operator\">&lt;</span>Object: LeakClass<span class=\"token operator\">></span>,\n    <span class=\"token punctuation\">[</span>2<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>0x19e5b9913359:<span class=\"token operator\">&lt;</span>Object: LeakClass<span class=\"token operator\">></span>,\n    <span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>实例 0x19e5b993ce91 的引用是一个数组里面有 1289 个 LeakClass 实例，也就是代码里面 leaks 数组</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://github.com/nodejs/llnode\">https://github.com/nodejs/llnode</a></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"Node.js 内存调试之 gcore 与 llnode","date":"August 13, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/debug/gcore_llnode/","previous":{"fields":{"slug":"/debug/tick-processor/"},"frontmatter":{"title":"使用 Tick Processor 分析 CPU 使用情况"}},"next":{"fields":{"slug":"/debug/heapdump/"},"frontmatter":{"title":"Node.js 内存调试之 heapdump"}}}}}