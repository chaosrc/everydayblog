{"componentChunkName":"component---src-templates-blog-post-js","path":"/debug/cpu-monitor/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"436742b6-e93e-537b-8314-da73329bbb84","excerpt":"Node.js 内存调试之 cpu-memory-monitor前面介绍了用 heapdump 和 memwatch-next 来调试内存，但是它们需要手动触发 Core Dump，在实际使用时并不知道什么时候去触发，而 cpu-memory-monitor 可以用来监控 CPU 和 Memory…","html":"<h2>Node.js 内存调试之 cpu-memory-monitor</h2>\n<p>前面介绍了用 heapdump 和 memwatch-next 来调试内存，但是它们需要手动触发 Core Dump，在实际使用时并不知道什么时候去触发，而 cpu-memory-monitor 可以用来监控 CPU 和 Memory 的使用情况，可以根据配置策略自动 dump CPU 的使用情况（Cpuprofile）和内存快照 （Heapsnapshot)</p>\n<h4>安装 cpu-memory-monitor</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i cpu-memory-monitor</code></pre></div>\n<h4>使用 cpu-memory-monitor</h4>\n<p>cpu-memory-monitor 的使用很简单，在程序入口文件中引入，配置 CPU 和 Memory 的 dump 策略</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Monitor <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cpu-memory-monitor'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">Monitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    cpu<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        interval<span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n        duration<span class=\"token punctuation\">:</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">,</span>\n        threshold<span class=\"token punctuation\">:</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span>\n        profileDir<span class=\"token punctuation\">:</span> <span class=\"token string\">'/tmp'</span><span class=\"token punctuation\">,</span>\n        counter<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n        limiter<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hour'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>以上代码的作用是： 每 1000 ms（interval）检查一次 CPU 的使用情况，如果发现连续 3 次 （counter）CPU 的使用情况大于 60%（threshold）则 dump 30000 ms（duration） 的 CPU 使用情况并在 /tmp（profileDir）目录下生成 <code class=\"language-text\">cpu-${process.pid}-${Date.now()}.cpuprofle</code> 文件，每小时最多 dump 5 次（limiter）</p>\n<p>上面是 CPU 的配置，Memory 的配置也相似，不同点在于 Memory 没有 duration 配置，因为内存快照是某一时刻的而不是一段时间的，另外 threshold 是最大的内存使用比如 ‘2gb’，最后生成的文件是内存快照 <code class=\"language-text\">cpu-${process.pid}-${Date.now()}.heapsnapshot</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Monitor <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cpu-memory-monitor'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">Monitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    memory<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        interval<span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n        threshold<span class=\"token punctuation\">:</span> <span class=\"token string\">'2.5gb'</span><span class=\"token punctuation\">,</span>\n        profileDir<span class=\"token punctuation\">:</span> <span class=\"token string\">'/tmp'</span><span class=\"token punctuation\">,</span>\n        counter<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n        limiter<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hour'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>需要注意的是<strong>不要将 CPU 和 Memory 配置一起使用</strong>，因为可能出现的情况是：首先，内存增加到达了设定的阀值，触发 Memory Dump 和 GC，导致 CPU 使用率增加而达到 CPU 的设定阀值，触发 CPU Dump，再导致内存堆积请求过多而再次触发 Memory Dump，最后导致雪崩</p>\n<h4>cpu-memory-monitor 的实现原理</h4>\n<p>cpu-memory-monitor 库很精简，源代码只有 100 多行。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> heapdump <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'heapdump'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> profiler <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v8-profiler'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> memwatch <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'memwatch-next'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">dumpCpu</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cpuProfileDir<span class=\"token punctuation\">,</span> cpuDuration</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  profiler<span class=\"token punctuation\">.</span><span class=\"token function\">startProfiling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  processing<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> profile <span class=\"token operator\">=</span> profiler<span class=\"token punctuation\">.</span><span class=\"token function\">stopProfiling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> filepath <span class=\"token operator\">=</span> <span class=\"token function\">genProfilePath</span><span class=\"token punctuation\">(</span>cpuProfileDir<span class=\"token punctuation\">,</span> <span class=\"token string\">'cpu'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cpuprofile'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> cpuDuration<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">dumpMemory</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">memProfileDir<span class=\"token punctuation\">,</span> isLeak <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  heapdump<span class=\"token punctuation\">.</span><span class=\"token function\">writeSnapshot</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> filename</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`heapsnapshot dump success: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>filename<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">cpuMemoryMonitor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>cpu<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> cpuTimer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>\n      pusage<span class=\"token punctuation\">.</span><span class=\"token function\">stat</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> stat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stat<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">></span> cpuThreshold<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">...</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>remaining <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">dumpCpu</span><span class=\"token punctuation\">(</span>cpuProfileDir<span class=\"token punctuation\">,</span> cpuDuration<span class=\"token punctuation\">)</span>\n                counter<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">...</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          counter<span class=\"token punctuation\">.</span>cpu <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> cpuInterval<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>memory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> memTimer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>\n      pusage<span class=\"token punctuation\">.</span><span class=\"token function\">stat</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> stat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stat<span class=\"token punctuation\">.</span>memory <span class=\"token operator\">></span> memThreshold<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">...</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>remaining <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">dumpMemory</span><span class=\"token punctuation\">(</span>memProfileDir<span class=\"token punctuation\">)</span>\n                counter<span class=\"token punctuation\">.</span>memory <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">...</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          counter<span class=\"token punctuation\">.</span>memory <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> memInterval<span class=\"token punctuation\">)</span>\n\n    memwatch<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'leak'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">info</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'memory leak: %j'</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">dumpMemory</span><span class=\"token punctuation\">(</span>memProfileDir<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到核心的 dumpCpu 和 dumpMemory 方法分别使用了 v8-profiler 和 heapdump，以及结合 memwtach-next 监测内存泄露</p>","frontmatter":{"title":"Node.js 内存调试之 cpu-memory-monitor","date":"August 17, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/debug/cpu-monitor/","previous":{"fields":{"slug":"/debug/memwatch-next/"},"frontmatter":{"title":"Node.js 内存调试之 memwatch-next"}},"next":{"fields":{"slug":"/debug/tick-processor/"},"frontmatter":{"title":"使用 Tick Processor 分析 CPU 使用情况"}}}}}