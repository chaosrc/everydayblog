{"componentChunkName":"component---src-templates-blog-post-js","path":"/debug/memwatch-next/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"0c1fcd26-9ba7-5403-803d-0527455b372b","excerpt":"Node.js 内存调试之 memwatch-nextmemwatch-next 是一个用来监测内存泄露和比较堆信息的模块，下面介绍如何使用 memwatch-next创建测试代码每次请求时注册 10000 个 request 事件来引发内存泄露，然后手动触发一次 GC使用 —expose-gc 参数来运行 Node…","html":"<h2>Node.js 内存调试之 memwatch-next</h2>\n<p>memwatch-next 是一个用来监测内存泄露和比较堆信息的模块，下面介绍如何使用 memwatch-next</p>\n<h4>创建测试代码</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> memwatch <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'memwatch-next'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\nmemwatch<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stats'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">stats</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> stats<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nmemwatch<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'leak'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">info</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'---'</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'---'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">leakCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    req<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span>\n    global<span class=\"token punctuation\">.</span><span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>每次请求时注册 10000 个 request 事件来引发内存泄露，然后手动触发一次 GC</p>\n<p>使用 —expose-gc 参数来运行 Node.js 将会暴露 GC 方法，可以手动触发 GC</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node --expose-gc index.js</code></pre></div>\n<h4>memwatch 的事件</h4>\n<ol>\n<li>stats：GC 事件，每一次执行 GC 都会触发该事件并返回 heap 相关信息</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> \n  num_full_gc<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//完整的垃圾回收次数</span>\n  num_inc_gc<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 增长的垃圾回收次数</span>\n  heap_compactions<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 内存压缩次数</span>\n  usage_trend<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 使用趋势</span>\n  estimated_base<span class=\"token punctuation\">:</span> <span class=\"token number\">5796560</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 预期基数</span>\n  current_base<span class=\"token punctuation\">:</span> <span class=\"token number\">5796560</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 当前基数</span>\n  min<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 最小值</span>\n  max<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 最大值</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>leak：为可疑的内存泄露事件，触发该事件的条件是内存在连续 5 次 GC 后都是增长的</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> \n  growth<span class=\"token punctuation\">:</span> <span class=\"token number\">3563080</span><span class=\"token punctuation\">,</span>\n  reason<span class=\"token punctuation\">:</span> <span class=\"token string\">'heap growth over 5 consecutive GCs (0s) - -2147483648 bytes/hr'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>运行</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node --expose-gc leaks2.js \n<span class=\"token punctuation\">(</span>node:24921<span class=\"token punctuation\">)</span> MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 request listeners added. Use emitter.setMaxListeners<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> to increase limit\n0 <span class=\"token punctuation\">{</span> num_full_gc: 1,\n  num_inc_gc: 1,\n  heap_compactions: 1,\n  usage_trend: 0,\n  estimated_base: 5796560,\n  current_base: 5796560,\n  min: 0,\n  max: 0 <span class=\"token punctuation\">}</span>\n1 <span class=\"token punctuation\">{</span> num_full_gc: 2,\n  num_inc_gc: 2,\n  heap_compactions: 2,\n  usage_trend: 0,\n  estimated_base: 6722656,\n  current_base: 6722656,\n  min: 0,\n  max: 0 <span class=\"token punctuation\">}</span>\n2 <span class=\"token punctuation\">{</span> num_full_gc: 3,\n  num_inc_gc: 3,\n  heap_compactions: 3,\n  usage_trend: 0,\n  estimated_base: 7635344,\n  current_base: 7635344,\n  min: 7635344,\n  max: 7635344 <span class=\"token punctuation\">}</span>\n3 <span class=\"token punctuation\">{</span> num_full_gc: 4,\n  num_inc_gc: 5,\n  heap_compactions: 4,\n  usage_trend: 0,\n  estimated_base: 8536880,\n  current_base: 8536880,\n  min: 7635344,\n  max: 8536880 <span class=\"token punctuation\">}</span>\n---\n<span class=\"token punctuation\">{</span> growth: 3563080,\n  reason: <span class=\"token string\">'heap growth over 5 consecutive GCs (0s) - -2147483648 bytes/hr'</span> <span class=\"token punctuation\">}</span>\n---\n4 <span class=\"token punctuation\">{</span> num_full_gc: 5,\n  num_inc_gc: 7,\n  heap_compactions: 5,\n  usage_trend: 0,\n  estimated_base: 9359640,\n  current_base: 9359640,\n  min: 7635344,\n  max: 9359640 <span class=\"token punctuation\">}</span>\n5 <span class=\"token punctuation\">{</span> num_full_gc: 6,\n  num_inc_gc: 8,\n  heap_compactions: 6,\n  usage_trend: 0,\n  estimated_base: 9007952,\n  current_base: 9007952,\n  min: 7635344,\n  max: 9359640 <span class=\"token punctuation\">}</span>\n6 <span class=\"token punctuation\">{</span> num_full_gc: 7,\n  num_inc_gc: 9,\n  heap_compactions: 7,\n  usage_trend: 0,\n  estimated_base: 9007968,\n  current_base: 9007968,\n  min: 7635344,\n  max: 9359640 <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Node.js 已经警告事件监听过多可能会导致内存泄露。连续多次 GC 后内存增长触发了 leak 事件，打印出了增长的内存数（Bytes）已经预估的每小时增长内存数</p>\n<h4>使用 Heap Diff</h4>\n<p>使用 memwatch 的 HeapDiff 函数来对比两次堆快照之间的差异</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> memwatch <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'memwatch-next'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">leakCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span>\n    global<span class=\"token punctuation\">.</span><span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> hd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">memwatch<span class=\"token punctuation\">.</span>HeapDiff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmemwatch<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'leak'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">info</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> diff <span class=\"token operator\">=</span> hd<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>diff<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>depth<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>同样的内存泄露代码，先创建 HeapDiff 对象，在 leak 事件时计算两次堆快照的差异并打印出来</p>\n<p>运行，并使用同样的 ab 命令测试</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node --expose-gc leaks3.js \n<span class=\"token punctuation\">(</span>node:26612<span class=\"token punctuation\">)</span> MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 request listeners added. Use emitter.setMaxListeners<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> to increase limit\n<span class=\"token punctuation\">{</span> before: <span class=\"token punctuation\">{</span> nodes: 36946, size_bytes: 4765736, size: <span class=\"token string\">'4.54 mb'</span> <span class=\"token punctuation\">}</span>,\n  after: <span class=\"token punctuation\">{</span> nodes: 88799, size_bytes: 9000168, size: <span class=\"token string\">'8.58 mb'</span> <span class=\"token punctuation\">}</span>,\n  change: \n   <span class=\"token punctuation\">{</span> size_bytes: 4234432,\n     size: <span class=\"token string\">'4.04 mb'</span>,\n     freed_nodes: 876,\n     allocated_nodes: 52729,\n     details: \n      <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> what: <span class=\"token string\">'Arguments'</span>,\n          size_bytes: 32,\n          size: <span class=\"token string\">'32 bytes'</span>,\n          <span class=\"token string\">'+'</span><span class=\"token keyword\">:</span> 1,\n          <span class=\"token string\">'-'</span><span class=\"token keyword\">:</span> 0 <span class=\"token punctuation\">}</span>,\n        <span class=\"token punctuation\">{</span> what: <span class=\"token string\">'Array'</span>,\n          size_bytes: 497584,\n          size: <span class=\"token string\">'485.92 kb'</span>,\n          <span class=\"token string\">'+'</span><span class=\"token keyword\">:</span> 946,\n          <span class=\"token string\">'-'</span><span class=\"token keyword\">:</span> 517 <span class=\"token punctuation\">}</span>,\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>可以看出在内存泄露之前和之后，内存由 4.54 mb 增加到了 8.58</p>\n<h4>结合 heapdump 使用</h4>\n<p>memwatch 在结合 heapdump 使用时才能发挥更好的作用，通常使用 memwatch 监测内存泄露，用 heapdump 导出多分快照，再使用 Chrome DevTools 分析比较，定位内存泄露的元凶</p>\n<p>测试代码</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> memwatch <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'memwatch-next'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> heapdump <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'heapdump'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">leakCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span>\n    global<span class=\"token punctuation\">.</span><span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmemwatch<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'leak'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">info</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> filename <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/heap/heapdump-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.heapsnapshot`</span></span>\n\n    heapdump<span class=\"token punctuation\">.</span><span class=\"token function\">writeSnapshot</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>filename<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> dump compeleted.`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在程序启动后先执行一次 heapdump ，在触发 leak 事件时再执行一次 heapdump。</p>\n<p>使用相同的 ab 命令测试，生成两个 heapdump 文件，用 Chrome DevTools 加载这两个 文件，选择 comparison 比较</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/17/mmXj7F.png\"></p>\n<p>可以看出增加了 5 万个 leakCallback 函数</p>","frontmatter":{"title":"Node.js 内存调试之 memwatch-next","date":"August 16, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/debug/memwatch-next/","previous":{"fields":{"slug":"/debug/heapdump/"},"frontmatter":{"title":"Node.js 内存调试之 heapdump"}},"next":{"fields":{"slug":"/debug/tick-processor/"},"frontmatter":{"title":"使用 Tick Processor 分析 CPU 使用情况"}}}}}