{"componentChunkName":"component---src-templates-blog-post-js","path":"/debug/perf-flame-graph/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"ecf08ad0-2558-57d4-8558-0789cf46b569","excerpt":"perf 与 火焰图（FlameGraph）Node.js 是单线程异步的 I/O 模型，在接受到请求时并不是每个请求启动一个线程，如果有一个任务长时间占用 CPU 整个应用就会卡住，无非处理其他请求。火焰图（FlameGraph）可以将 CPU 的使用情况可视化，自观的了解到程序的性能瓶颈perfperf（perf…","html":"<h2>perf 与 火焰图（FlameGraph）</h2>\n<p>Node.js 是单线程异步的 I/O 模型，在接受到请求时并不是每个请求启动一个线程，如果有一个任务长时间占用 CPU 整个应用就会卡住，无非处理其他请求。火焰图（FlameGraph）可以将 CPU 的使用情况可视化，自观的了解到程序的性能瓶颈</p>\n<h4>perf</h4>\n<p>perf（perf_event 的简称）是 linux 内核自带的系统性能分析工具，能进行函数级与指令级的热点查找，常用于查找性能瓶颈以及定位热点代码。</p>\n<ul>\n<li>安装 perf</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">uname</span> -a\nLinux chao-TOP2 4.18.0-18-generic <span class=\"token comment\">#19~18.04.1-Ubuntu SMP Fri Apr 5 10:22:13 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span>\n\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> linux-tools-common\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> linux-tools-4.18.0-18-generic linux-cloud-tools-4.18.0-18-generic</code></pre></div>\n<p>查看当前 Linux 内核版本，安装 linux-tools-common 以及对应内核版本的 tools</p>\n<ul>\n<li>创建测试代码</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> crypto <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'crypto'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/newUser'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>name <span class=\"token operator\">||</span> <span class=\"token string\">'test'</span>\n    <span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>password <span class=\"token operator\">||</span> <span class=\"token string\">'test'</span>\n\n    <span class=\"token keyword\">const</span> salt <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">randomBytes</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">pbkdf2Sync</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sha512'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span>\n    users<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> salt<span class=\"token punctuation\">,</span> hash <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// res.status(204)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建成功'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/auth'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>name <span class=\"token operator\">||</span> <span class=\"token string\">'test'</span>\n    <span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>password <span class=\"token operator\">||</span> <span class=\"token string\">'test'</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'用户名不能为空'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> users<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'用户名不存在'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> salt <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>salt\n    <span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">pbkdf2Sync</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sha512'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">===</span> hash<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// res.status(204)</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'登录成功'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n       res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'密码错误'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8001</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>添加 —perf<em>basic</em>prof 运行程序</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node --perf_basic_prof index.js <span class=\"token operator\">&amp;</span> \n<span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span> 6450</code></pre></div>\n<p>会生成 /tmp/perf-<PID>.map 文件</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">tail</span> /tmp/perf-6450.map \n2b04e2de7f2a 45 LazyCompile:~emitBeforeScript internal/async_hooks.js:316\n2b04e2de812a 5a LazyCompile:~validateAsyncId internal/async_hooks.js:113\n2b04e2de83a2 <span class=\"token function\">bc</span> LazyCompile:~pushAsyncIds internal/async_hooks.js:351\n2b04e2de877a 76 LazyCompile:~_combinedTickCallback internal/process/next_tick.js:129\n2b04e2de8a62 18 LazyCompile:~emitListeningNT net.js:1391\n2b04e2de8bea 37 LazyCompile:~emitAfterScript internal/async_hooks.js:330\n2b04e2de8dfa c6 LazyCompile:~popAsyncIds internal/async_hooks.js:364\n2b04e2de919a 77 LazyCompile:~tickDone internal/process/next_tick.js:88\n2b04e2de9412 12 LazyCompile:~clear internal/process/next_tick.js:42\n2b04e2de95fa b8 LazyCompile:~emitPendingUnhandledRejections internal/process/promises.js:100</code></pre></div>\n<p>map 文件的三列依次为：16进制的符号地址、大小、符号名，perf 会尝试查找 /tmp/perf-<PID>.map 文件将16进制的符号转换为人能够读懂的符号</p>\n<h4>生成火焰图</h4>\n<p>clone 火焰图工具</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone https://github.com/brendangregg/FlameGraph.git ~/FlameGraph</code></pre></div>\n<p>使用 ab 压测</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> <span class=\"token string\">'http://localhost:8001/newUser?name=admin&amp;password=123456'</span>\n\n$ ab -k -c 10 -n 2000 <span class=\"token string\">'http://localhost:8001/auth?name=admin&amp;password=123456'</span></code></pre></div>\n<p>在另一个终端中使用 perf 记录运行情况</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> perf record -F 99  -p 3709 -g -- <span class=\"token function\">sleep</span> 30\n<span class=\"token punctuation\">[</span> perf record: Woken up 2 <span class=\"token function\">times</span> to <span class=\"token function\">write</span> data <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span> perf record: Captured and wrote 0.423 MB perf.data <span class=\"token punctuation\">(</span>1494 samples<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> root /tmp/perf-3709.map\n$ <span class=\"token function\">sudo</span> perf script <span class=\"token operator\">></span> perf.stacks\n\n$ ~/FlameGraph/stackcollapse-perf.pl --kernel <span class=\"token operator\">&lt;</span> perf.stacks <span class=\"token operator\">|</span> ~/FlameGraph/flamegraph.pl --color<span class=\"token operator\">=</span>js --hash <span class=\"token operator\">></span> flamegraph.svg</code></pre></div>\n<p>下面是生成的 svg 火焰图 图片</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/09/eHeXg1.jpg\"></p>\n<p>2019-08-10更新</p>\n<hr>\n<h4>perf 的使用</h4>\n<ul>\n<li>-F 指定采样频率</li>\n<li>-p 指定进程 pid</li>\n<li>-g 启用 call-graph 记录</li>\n<li>sleep 指定记录的秒数</li>\n</ul>\n<p>perf record 会将记录的信息保存到当前执行目录的 perf.data 文件</p>\n<p>perf script 将读取 perf.data 的 trace 信息写入 perf.stacks 文件</p>\n<h4>火焰图的含义</h4>\n<p>运行 FlameGraph 时，使用 —color=js 指定生成 Javascript 配色的 svg，其中 green 代表 Javascript, blue 代表 Buildin, yellow 代表 C++，red 代表 System。</p>\n<ul>\n<li>每一个小块代表一个函数在栈中的位置（即一个栈帧）</li>\n<li>Y 轴代表栈的深度，每个方块下面是他的祖先（即父函数）</li>\n<li>X 轴代表总的样例群体，从左至右并非按照时间排序，仅仅是按照字母顺序排列</li>\n<li>方块的高度代表 CPU 时间，越宽代表 CPU 时间越长，或者 CPU 使用很频繁</li>\n</ul>\n<p>从下面的火焰图可以看出 node::crypto::PBKDF2Request C++代码占用的大量的 CPU 时间</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/10/eqOCuR.png\"></p>\n<p>是因为使用了 <code class=\"language-text\">crypto.pbkdf2Sync</code> 同步方法，将 pbkdf2Sync 改为异步的 pbkdf2 方法，再生成火焰图</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/auth'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">const</span> salt <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>salt\n    crypto<span class=\"token punctuation\">.</span><span class=\"token function\">pbkdf2</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sha512'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> hash</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        hash <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">===</span> hash<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// res.status(204)</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'登录成功'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'密码错误'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>重新生成的火焰图</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/10/eqO858.jpg\"></p>\n<p>绿色的 Javascript 部分明显减小，是因为异步的 I/O 方式，底层使用了多线程执行</p>","frontmatter":{"title":"理解 perf 与 火焰图（FlameGraph）","date":"August 08, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/debug/perf-flame-graph/","previous":{"fields":{"slug":"/command/nodejs-command-todo/"},"frontmatter":{"title":"使用 Node.js 编写命令行程序（二）"}},"next":{"fields":{"slug":"/debug/v8-profiler/"},"frontmatter":{"title":"使用 v8-profiler 分析 CPU 使用情况"}}}}}