{"componentChunkName":"component---src-templates-blog-post-js","path":"/debug/v8-profiler/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"475c92d8-2694-59ca-ade4-c7dca2c6810b","excerpt":"使用 v8-profiler 分析 CPU 使用情况Node.js 是基于 Chrome 的 V8 引擎，V8 暴露了一些 profiler API 用来分析 CPU 的使用情况创建测试代码在  get 请求里面使用  同步方法获取 hash 值，进行 CPU 密集型计算 请求中开始记录 CPU 运算，3…","html":"<h2>使用 v8-profiler 分析 CPU 使用情况</h2>\n<p>Node.js 是基于 Chrome 的 V8 引擎，V8 暴露了一些 profiler API 用来分析 CPU 的使用情况</p>\n<h4>创建测试代码</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> profiler <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v8-profiler'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> crypto <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'crypto'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/newUser'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>name <span class=\"token operator\">||</span> <span class=\"token string\">'test'</span>\n    <span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>password <span class=\"token operator\">||</span> <span class=\"token string\">'test'</span>\n\n    <span class=\"token keyword\">const</span> salt <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">randomBytes</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">pbkdf2Sync</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sha512'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span>\n    users<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> salt<span class=\"token punctuation\">,</span> hash <span class=\"token punctuation\">}</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建成功'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/profiler'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 开始记录</span>\n    profiler<span class=\"token punctuation\">.</span><span class=\"token function\">startProfiling</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CPU profiler'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 30 秒后停止记录，并且导出记录结果</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> profile <span class=\"token operator\">=</span> profiler<span class=\"token punctuation\">.</span><span class=\"token function\">stopProfiling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        profile<span class=\"token punctuation\">.</span><span class=\"token function\">export</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./profile.cpuprofile'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finish'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                profile<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8001</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>在 <code class=\"language-text\">/newUser</code> get 请求里面使用 <code class=\"language-text\">crypto.pbkdf2Sync</code> 同步方法获取 hash 值，进行 CPU 密集型计算</p>\n<p><code class=\"language-text\">/profiler</code> 请求中开始记录 CPU 运算，30 秒后停止记录，并将记录的数据导出至当前目录下的 <code class=\"language-text\">profile.cpuprofile</code> 文件</p>\n<h4>记录 CPU 使用情况</h4>\n<p>启用 web 服务，并开始记录 CPU 使用</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node index.js <span class=\"token operator\">&amp;</span>\n$ <span class=\"token function\">curl</span> http://localhost:8001/profiler</code></pre></div>\n<p>在另一个终端进行 ab 压测触发 CPU 密集计算</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ab -c 20 -n 2000 <span class=\"token string\">'http://localhost:8001/newUser'</span></code></pre></div>\n<p>最后生成的 <code class=\"language-text\">profile.cpuprofile</code> 文件中记录了函数调用栈、路径、时间戳和一些其他信息</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ll\n400K -rw-rw-r--   1 chao chao 399K Aug 10 18:20 profile.cpuprofile</code></pre></div>\n<h4>使用 Chrome DevTools 可视化数据</h4>\n<p>Chrome 自带了分析 CPU profile 日志的工具</p>\n<p>打开 Chrome 开发工具，选择 Javascript Profiler 面板，点击 Load 加载</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/10/eOTV3j.png\"></p>\n<p>选择 profile.cpuprofile 文件加载</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/10/eOLxgg.png\"></p>\n<p>2019-08-11 更新</p>\n<hr>\n<p>在左上角的菜单中可以选择三种查看模式</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/11/ev1JqU.md.png\"></p>\n<ul>\n<li>Chart 显示按时间顺序排列的火焰图</li>\n<li>Heavy(Botton Up) 按照函数对性能的影响排列，同时可以查看函数的调用路径</li>\n<li>Tree(Top Down) 显示调用结构的总体状况，从调用堆栈的顶端开始</li>\n</ul>\n<p>选择 Tree(Top Down) 模式，可以看的有下面三列</p>\n<ul>\n<li>Self Time 函数调用所耗费的时间，仅包含函数本身的声明，不包括任何子函数的执行时间</li>\n<li>Total Time 函数调用所耗费的总时间，包含本身的函数声明及所以子函数的执行时间</li>\n<li>Function 函数名及路径，可展开查看子函数</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/08/11/evdQTx.png\">\n从图中可以看到 parserOnHeadersComplete 函数占据了绝大部分的 CPU 时间</p>\n<p>逐级展开后定位到最终 crypto 的 pbkdf2Sync 方法</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/11/ev0lRO.png\"></p>\n<h4>使用火焰图来展示 cpuprofile 数据</h4>\n<p>全局安装 flamegraph</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g flamegraph</code></pre></div>\n<p>将 cpuprofile 文件生成 svg 文件</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ flamegraph -t cpuprofile -f profile.cpuprofile -o profile.svg</code></pre></div>\n<p><img src=\"https://s2.ax1x.com/2019/08/11/evDkDJ.png\"></p>\n<p>同样能够定位到 pbkdf2 占据了绝大部分的 CPU 时间</p>\n<h4>使用 v8-analytics 分析 CPU 使用</h4>\n<p>v8-analytics 是 Node.js 社区开源的一个解析 v8-profiler 和 heapdump 等模块生成的 CPU 和 heap-memory日志工具，具有以下功能：</p>\n<ul>\n<li>将 V8 引擎逆优化或者优化失败的函数标红展示，并显示优化失败的结果</li>\n<li>在函数执行时长超过预期时标红展示</li>\n<li>展示当前项目中可疑的内存泄露点</li>\n</ul>\n<p>安装 v8-analytics</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g v8-analytics</code></pre></div>\n<p>使用 v8-analytics 查看执行时间大于 50 ms的函数</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ va <span class=\"token function\">timeout</span> profile.cpuprofile 50 --only\nFunction Execute Time <span class=\"token operator\">></span> 50ms List:\n1. <span class=\"token punctuation\">(</span>idle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>416.7ms 1.39%<span class=\"token punctuation\">)</span> \n2. <span class=\"token punctuation\">(</span>idle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>855.3ms 2.85%<span class=\"token punctuation\">)</span> \n3. parserOnHeadersComplete <span class=\"token punctuation\">(</span>61.4ms 0.20%<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>_http_common.js 71<span class=\"token punctuation\">)</span>\n4. parserOnIncoming <span class=\"token punctuation\">(</span>61.4ms 100.00%<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>_http_server.js 644<span class=\"token punctuation\">)</span>\n5. emit <span class=\"token punctuation\">(</span>61.4ms 100.00%<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>events.js 149<span class=\"token punctuation\">)</span>\n6. app <span class=\"token punctuation\">(</span>61.4ms 100.00%<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/perf-demo/node_modules/express/lib/express.js 38<span class=\"token punctuation\">)</span>\n7. handle <span class=\"token punctuation\">(</span>61.4ms 100.00%<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/perf-demo/node_modules/express/lib/application.js 158<span class=\"token punctuation\">)</span>\n8. handle <span class=\"token punctuation\">(</span>61.4ms 100.00%<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/perf-demo/node_modules/express/lib/router/index.js 136<span class=\"token punctuation\">)</span>\n9. next <span class=\"token punctuation\">(</span>61.4ms 100.00%<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/perf-demo/node_modules/express/lib/router/index.js 176<span class=\"token punctuation\">)</span>\n10. process_params <span class=\"token punctuation\">(</span>61.4ms 100.00%<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/perf-demo/node_modules/express/lib/router/index.js 327<span class=\"token punctuation\">)</span>\n11. anonymous <span class=\"token punctuation\">(</span>61.4ms 100.00%<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/perf-demo/node_modules/express/lib/router/index.js 275<span class=\"token punctuation\">)</span>\n12. trim_prefix <span class=\"token punctuation\">(</span>61.4ms 100.00%<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/perf-demo/node_modules/express/lib/router/index.js 288<span class=\"token punctuation\">)</span>\n13. handle <span class=\"token punctuation\">(</span>61.4ms 100.00%<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/perf-demo/node_modules/express/lib/router/layer.js 86<span class=\"token punctuation\">)</span>\n14. query <span class=\"token punctuation\">(</span>61.4ms 100.00%<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/perf-demo/node_modules/express/lib/middleware/query.js 39<span class=\"token punctuation\">)</span>\n15. expressInit <span class=\"token punctuation\">(</span>61.4ms 100.00%<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/perf-demo/node_modules/express/lib/middleware/init.js 29<span class=\"token punctuation\">)</span>\n16. dispatch <span class=\"token punctuation\">(</span>61.4ms 100.00%<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/perf-demo/node_modules/express/lib/router/route.js 98<span class=\"token punctuation\">)</span>\n17. next <span class=\"token punctuation\">(</span>61.4ms 100.00%<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/perf-demo/node_modules/express/lib/router/route.js 114<span class=\"token punctuation\">)</span>\n18. anonymous <span class=\"token punctuation\">(</span>61.4ms 100.00%<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>/Users/chao/workspace/node/node-demo/perf-demo/v8-pf.js 10<span class=\"token punctuation\">)</span>\n19. pbkdf2Sync <span class=\"token punctuation\">(</span>61.4ms 100.00%<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>internal/crypto/pbkdf2.js 44<span class=\"token punctuation\">)</span>\n20. handleError <span class=\"token punctuation\">(</span>61.4ms 100.00%<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>internal/crypto/pbkdf2.js 74<span class=\"token punctuation\">)</span>\n21. pbkdf2 <span class=\"token punctuation\">(</span>61.4ms 100.00%<span class=\"token punctuation\">)</span> </code></pre></div>\n<p>依然可以定位到 pbkdf2 函数</p>","frontmatter":{"title":"使用 v8-profiler 分析 CPU 使用情况","date":"August 10, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/debug/v8-profiler/","previous":{"fields":{"slug":"/debug/perf-flame-graph/"},"frontmatter":{"title":"理解 perf 与 火焰图（FlameGraph）"}},"next":{"fields":{"slug":"/debug/gcore_llnode/"},"frontmatter":{"title":"Node.js 内存调试之 gcore 与 llnode"}}}}}