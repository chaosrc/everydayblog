{"componentChunkName":"component---src-templates-blog-post-js","path":"/go-rpc/go-rpc-6/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"207042ee-660d-5e1c-8c6f-ba847c3cec12","excerpt":"Go RPC (六)gRPC 流RPC 是远程函数调用，每次调用的函数参数不能太大，否则会严重影响性能。因此传统的 RPC 方法调用并不适用于数据量大的场景。gRPC 框架针对服务端和客户端提供了流的特性。在 HelloService 中增加一个支持双向流的方法 Channel上面的代码中使用 stream…","html":"<h2>Go RPC (六)</h2>\n<h4>gRPC 流</h4>\n<p>RPC 是远程函数调用，每次调用的函数参数不能太大，否则会严重影响性能。因此传统的 RPC 方法调用并不适用于数据量大的场景。gRPC 框架针对服务端和客户端提供了流的特性。</p>\n<p>在 HelloService 中增加一个支持双向流的方法 Channel</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">service HelloService {\n    rpc Hello (String) returns (String);\n    rpc Channel (stream String) returns (stream String);\n}</code></pre></div>\n<p>上面的代码中使用 stream 关键字启动流特性。</p>\n<p>重新生成代码后，服务端和客服端都增加了 Channel 方法</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> HelloServiceServer <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>String<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">Channel</span><span class=\"token punctuation\">(</span>HelloService_ChannelServer<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> HelloServiceClient <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> in <span class=\"token operator\">*</span>String<span class=\"token punctuation\">,</span> opts <span class=\"token operator\">...</span>grpc<span class=\"token punctuation\">.</span>CallOption<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>String<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">Channel</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> opts <span class=\"token operator\">...</span>grpc<span class=\"token punctuation\">.</span>CallOption<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>HelloService_ChannelClient<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>HelloService<em>ChannelClient 和 HelloService</em>ChannelServer 接口用于流数据的双向通信</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> HelloService_ChannelClient <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">Send</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>String<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\t<span class=\"token function\">Recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>String<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\tgrpc<span class=\"token punctuation\">.</span>ClientStream\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> HelloService_ChannelServer <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">Send</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>String<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\t<span class=\"token function\">Recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>String<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\tgrpc<span class=\"token punctuation\">.</span>ServerStream\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>服务端实现 Channel 方法</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>service <span class=\"token operator\">*</span>HelloServiceImp<span class=\"token punctuation\">)</span> <span class=\"token function\">Channel</span><span class=\"token punctuation\">(</span>stream hello<span class=\"token punctuation\">.</span>HelloService_ChannelServer<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\treq<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">Recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> io<span class=\"token punctuation\">.</span>EOF <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span> err\n\t\t<span class=\"token punctuation\">}</span>\n        err <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hello<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">{</span>Value<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>客户端首先调用 Channel 方法获取流</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">channelClient<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Channel</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>接收和发生操作分别在对立的 goroutine 里面进行</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 发送操作</span>\n<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    err <span class=\"token operator\">:=</span> channelClient<span class=\"token punctuation\">.</span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hello<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">{</span>Value<span class=\"token punctuation\">:</span> <span class=\"token string\">\"channel\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 接收操作</span>\n<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> channelClient<span class=\"token punctuation\">.</span><span class=\"token function\">Recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Go RPC (六)","date":"December 25, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go-rpc/go-rpc-6/","previous":{"fields":{"slug":"/go-rpc/go-rpc-4/"},"frontmatter":{"title":"Go RPC (四)"}},"next":{"fields":{"slug":"/go-rpc/go-rpc-7/"},"frontmatter":{"title":"Go RCP (七)"}}}}}