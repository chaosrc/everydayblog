{"componentChunkName":"component---src-templates-blog-post-js","path":"/go-rpc/go-rpc-4/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"c15ddfac-5514-5835-b7c1-15466d3f34c3","excerpt":"Go RPC (四)反向 RPC通常的 RPC 是基于 C/S 结构的，RPC 服务端对应网络的服务器，RPC 客户端对应网络客户端。但是在一些特殊场景下，比如内网提供的 RPC 服务无法在外网访问，这时我们可以使用类似反向代理的技术，从内网主动连接到外网 RPC 服务器，然后基于 TCP 向外网提供 RPC…","html":"<h2>Go RPC (四)</h2>\n<h4>反向 RPC</h4>\n<p>通常的 RPC 是基于 C/S 结构的，RPC 服务端对应网络的服务器，RPC 客户端对应网络客户端。但是在一些特殊场景下，比如内网提供的 RPC 服务无法在外网访问，这时我们可以使用类似反向代理的技术，从内网主动连接到外网 RPC 服务器，然后基于 TCP 向外网提供 RPC 服务。</p>\n<p>反向 RPC 服务代码</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> HelloService <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>servicev <span class=\"token operator\">*</span>HelloService<span class=\"token punctuation\">)</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span>request <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> response <span class=\"token operator\">*</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">*</span>response <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello: \"</span> <span class=\"token operator\">+</span> request\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\terr <span class=\"token operator\">:=</span> rpc<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>HelloService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\tconn<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">Dial</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tcp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"localhost:8002\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> conn <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">continue</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\trpc<span class=\"token punctuation\">.</span><span class=\"token function\">ServeConn</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>提供反向 RPC 的服务不再主动监听 TCP 服务，而是主动连接到对方的 TCP 服务器，提供反向 RPC 服务。</p>\n<p>客户端代码</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tlistener<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">Listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tcp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\":8002\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tclientChan <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token operator\">*</span>rpc<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t\tconn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> listener<span class=\"token punctuation\">.</span><span class=\"token function\">Accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tclientChan <span class=\"token operator\">&lt;-</span> rpc<span class=\"token punctuation\">.</span><span class=\"token function\">NewClient</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token function\">doClientWork</span><span class=\"token punctuation\">(</span>clientChan<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">doClientWork</span><span class=\"token punctuation\">(</span>clientChan <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token operator\">*</span>rpc<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tclient <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>clientChan\n\n\t<span class=\"token keyword\">var</span> response <span class=\"token builtin\">string</span>\n\terr <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloService.Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>response<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>客户端监听 TCP 服务，建立请求后构造 RPC 客户端对象，然后执行正常的 RPC 调用</p>","frontmatter":{"title":"Go RPC (四)","date":"December 23, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/go-rpc/go-rpc-4/","previous":{"fields":{"slug":"/go-rpc/go-rpc-3/"},"frontmatter":{"title":"Go RPC (三)"}},"next":{"fields":{"slug":"/go-rpc/go-rpc-6/"},"frontmatter":{"title":"Go RPC (六)"}}}}}