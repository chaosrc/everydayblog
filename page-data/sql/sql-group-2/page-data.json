{"componentChunkName":"component---src-templates-blog-post-js","path":"/sql/sql-group-2/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"4ddb2b3a-12dd-51fd-9e01-fd2c7e5bbf92","excerpt":"分组数据（二）分组过滤GROUP BY 除了能对数据进行分组外，还可以对分组进行过滤，指定包含哪些分组，排除哪些分组与 WHERE 子句的不同是 WHERE 子句过滤的是行而不是分组。SQL 中提供了对分组进行过滤的子句 HAVING。HAVING 非常类似与 WHERE，且支持所有的 WHERE…","html":"<h2>分组数据（二）</h2>\n<h4>分组过滤</h4>\n<p>GROUP BY 除了能对数据进行分组外，还可以对分组进行过滤，指定包含哪些分组，排除哪些分组</p>\n<p>与 WHERE 子句的不同是 WHERE 子句过滤的是行而不是分组。SQL 中提供了对分组进行过滤的子句 HAVING。HAVING 非常类似与 WHERE，且支持所有的 WHERE 子句操作符。</p>\n<p>输入</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> cust_id<span class=\"token punctuation\">,</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> num\n<span class=\"token keyword\">FROM</span> orders\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> cust_id\n<span class=\"token keyword\">HAVING</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>输出</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token number\">1000000001</span><span class=\"token operator\">|</span><span class=\"token number\">2</span></code></pre></div>\n<p>上面的 SQL 语句使用 HAVING COUNT(*) >= 2 过滤订单数量大于等于 2 的订单</p>\n<blockquote>\n<p>HAVING 和 WHERE 的区别：\nWHERE 是在分组前进行过滤，而 HAVING 是在分组后进行过滤</p>\n</blockquote>\n<p>同时使用 WHERE 和 HAVING 子句</p>\n<p>输入</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> vend_id<span class=\"token punctuation\">,</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> num\n<span class=\"token keyword\">FROM</span> products\n<span class=\"token keyword\">WHERE</span> prod_price <span class=\"token operator\">>=</span> <span class=\"token number\">4</span>\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> vend_id\n<span class=\"token keyword\">HAVING</span> num <span class=\"token operator\">>=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>输出</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">BRS01<span class=\"token operator\">|</span><span class=\"token number\">3</span>\nFNG01<span class=\"token operator\">|</span><span class=\"token number\">2</span></code></pre></div>\n<p>上面的 SQL 语句先使用 WHERE 子句过滤 prod_price大于等于 4 的产品，然后对分组数量大于等于 2 的分组进行过滤</p>\n<h4>分组排序</h4>\n<p>GROUP BY 和 ORDER BY 经常完成相同的工作，但是它们之间有如下区别</p>\n<table>\n<thead>\n<tr>\n<th>ORDER BY</th>\n<th>GROUP BY</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>对产生的输出排序</td>\n<td>对行分组，但输出可能不是分组的顺序</td>\n</tr>\n<tr>\n<td>对任意列都可使用</td>\n<td>只能使用选择列或者表达式</td>\n</tr>\n<tr>\n<td>不一定需要</td>\n<td>如果与聚集函数一起使用列，则必须使用</td>\n</tr>\n</tbody>\n</table>\n<p>检索包含三个及以上物品的订单号和订购物品的数目，并通过订单号进行分组</p>\n<p>输入</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> order_num<span class=\"token punctuation\">,</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> items\n<span class=\"token keyword\">FROM</span> order_items\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> order_num\n<span class=\"token keyword\">HAVING</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>输出</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token number\">20006</span><span class=\"token operator\">|</span><span class=\"token number\">3</span>\n<span class=\"token number\">20007</span><span class=\"token operator\">|</span><span class=\"token number\">5</span>\n<span class=\"token number\">20008</span><span class=\"token operator\">|</span><span class=\"token number\">5</span>\n<span class=\"token number\">20009</span><span class=\"token operator\">|</span><span class=\"token number\">3</span></code></pre></div>\n<p>添加 ORDER BY 子句对物品的数量进行排序</p>\n<p>输入</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> order_num<span class=\"token punctuation\">,</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> items\n<span class=\"token keyword\">FROM</span> order_items\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> order_num\n<span class=\"token keyword\">HAVING</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> items<span class=\"token punctuation\">;</span></code></pre></div>\n<p>输出</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token number\">20006</span><span class=\"token operator\">|</span><span class=\"token number\">3</span>\n<span class=\"token number\">20009</span><span class=\"token operator\">|</span><span class=\"token number\">3</span>\n<span class=\"token number\">20007</span><span class=\"token operator\">|</span><span class=\"token number\">5</span>\n<span class=\"token number\">20008</span><span class=\"token operator\">|</span><span class=\"token number\">5</span></code></pre></div>\n<h4>SELECT 子句的顺序</h4>\n<p>SELECT 语句中使用时必须遵循的次序</p>\n<table>\n<thead>\n<tr>\n<th>子句</th>\n<th>说明</th>\n<th>是否必须使用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SELECT</td>\n<td>要返回的列或表达式</td>\n<td>是</td>\n</tr>\n<tr>\n<td>FROM</td>\n<td>检索数据的表</td>\n<td>是</td>\n</tr>\n<tr>\n<td>WHERE</td>\n<td>行级过滤</td>\n<td>否</td>\n</tr>\n<tr>\n<td>GROUP BY</td>\n<td>分组</td>\n<td>仅在按组计算集聚数据时使用</td>\n</tr>\n<tr>\n<td>HAVING</td>\n<td>组级过滤</td>\n<td>否</td>\n</tr>\n<tr>\n<td>ORDER BY</td>\n<td>对输出排序</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"title":"分组数据（二）","date":"September 12, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/sql/sql-group-2/","previous":{"fields":{"slug":"/sql/sql-group-1/"},"frontmatter":{"title":"分组数据（一）"}},"next":{"fields":{"slug":"/sql/sql-child-query/"},"frontmatter":{"title":"使用子查询"}}}}}