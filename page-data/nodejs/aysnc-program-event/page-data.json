{"componentChunkName":"component---src-templates-blog-post-js","path":"/nodejs/aysnc-program-event/","webpackCompilationHash":"eb9b7fa042d48e7c3b06","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"56094d84-67a5-50c7-ae46-71cd12a6ab1a","excerpt":"Node.js 异步编程之事件监听在 Node.js 中通过在事件发射器(EventEmitter)中绑定事件监听函数来处理重复性事件。一些 Node.js 中的重要组件比如 HTTP、TCP 以及流模块都被做成了事件发射器。也可以定义自己的事件发射器。使用 net 模块来创建一个基于 TCP socket…","html":"<h3>Node.js 异步编程之事件监听</h3>\n<p>在 Node.js 中通过在事件发射器(EventEmitter)中绑定事件监听函数来处理重复性事件。一些 Node.js 中的重要组件比如 HTTP、TCP 以及流模块都被做成了事件发射器。也可以定义自己的事件发射器。</p>\n<h4>使用 net 模块来创建一个基于 TCP socket 的 echo 服务器</h4>\n<p>引人 net 模块并监听 data 事件</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 文件index.js</span>\n\n<span class=\"token comment\">// 引入net模块</span>\n<span class=\"token keyword\">const</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"net\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//监听data事件</span>\n  socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> handleDataReceive<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">//处理data事件的方法</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleDataReceive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`server: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8801</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>socket 是一个事件发射器，当用户发送数据时会触发<code class=\"language-text\">socket</code>的<code class=\"language-text\">data</code>事件，在data事件中注册了函数<code class=\"language-text\">handleDataReceive</code>来处理<code class=\"language-text\">data</code>事件</p>\n<p>运行</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node index.js</code></pre></div>\n<p>使用telnet连接</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ telnet localhost 8801\nTrying ::1<span class=\"token punctuation\">..</span>.\nConnected to localhost.\nEscape character is <span class=\"token string\">'^]'</span><span class=\"token keyword\">.</span>\nhello\nserver: hello\n<span class=\"token function\">who</span> are you\nserver: <span class=\"token function\">who</span> are you</code></pre></div>\n<p>telnet将数据发送给服务器，服务器处理后传回给telnet</p>\n<h4>自定义一个事件发射器</h4>\n<p>实现一个简单的聊天服务器具有以下功能：</p>\n<ul>\n<li>加入功能，当用户连接服务器时加入聊天频道</li>\n<li>广播功能，用户发送信息时会广播给所有已加入的用户</li>\n<li>用户离开时从频道中移除</li>\n</ul>\n<p>自定义事件发射器channel，注册<code class=\"language-text\">join</code>、<code class=\"language-text\">broadcast</code>以及<code class=\"language-text\">close</code>事件，clients用来保存每次连接的socket，subscription用来保存<code class=\"language-text\">broadcast</code>的监听方法以便于<code class=\"language-text\">close</code>时移除监听</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'net'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> Emitter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'events'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>EventEmitter\n\n<span class=\"token keyword\">const</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Emitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nchannel<span class=\"token punctuation\">.</span>clients <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nchannel<span class=\"token punctuation\">.</span>subscription <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 添加join事件</span>\nchannel<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'join'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> socket</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> socket\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscription<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">sendId<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sendId <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            socket<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 添加广播事件</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'broadcast'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscription<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 添加关闭事件</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'close'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'broadcast'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscription<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>建立TCP socket连接给<code class=\"language-text\">channel</code>发送事件</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>socket<span class=\"token punctuation\">.</span>remoteAddress<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>socket<span class=\"token punctuation\">.</span>remotePort<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n    channel<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'join'</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">)</span>\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        channel<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'broadcast'</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'close'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        channel<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'close'</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8802</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>运行，并使用多个窗口通过telnet连接服务器\n<img src=\"https://s2.ax1x.com/2019/06/28/ZuLPF1.png\"></p>\n<p>gif\n<img src=\"https://s2.ax1x.com/2019/06/28/ZuqjQU.gif\" alt=\"gif\"></p>","frontmatter":{"title":"Node.js异步编程之事件监听","date":"June 27, 2019","description":"在 Node.js 中通过在事件发射器(EventEmitter)中绑定事件监听函数来处理重复性事件。一些 Node.js 中的重要组件比如 HTTP、TCP 以及流模块都被做成了事件发射器。也可以定义自己的事件发射器。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/nodejs/aysnc-program-event/","previous":{"fields":{"slug":"/nodejs/async-program/"},"frontmatter":{"title":"Node.js中的异步编程以及回调的使用"}},"next":{"fields":{"slug":"/nodejs/async-flow/"},"frontmatter":{"title":"Node.js的异步流程控制以及串行流程的实现"}}}}}