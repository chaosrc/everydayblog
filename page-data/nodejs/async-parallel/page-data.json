{"componentChunkName":"component---src-templates-blog-post-js","path":"/nodejs/async-parallel/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"e0cef31f-40a1-5f81-8954-294c1280743e","excerpt":"Node.js…","html":"<h2>Node.js 的并行流程控制</h2>\n<p>并行流程任务不需要一个接着一个安顺序执行，任务之间的开始时间和结束时间不会相互影响，但是必须等所有任务执行完成后才能执行后面的逻辑。比如同时下载多个文件，全部下载完成后再打包成一个文件，那么必须等所有文件下载完成后才能打包，但每个文件下载完成的时间可能都不一样</p>\n<h4>并行流程的实现</h4>\n<p>通过一个简单的例子来看并行流程的实现：</p>\n<ul>\n<li>异步读取某个文件夹下面所有文件</li>\n<li>统计每个文件中的字数</li>\n<li>计算总字数</li>\n</ul>\n<p>定义全局变量记录任务状态</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 总的任务数</span>\n<span class=\"token keyword\">let</span> totalTasks <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token comment\">// 已完成任务数</span>\n<span class=\"token keyword\">let</span> compeleteTasks <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token comment\">// 总的字数</span>\n<span class=\"token keyword\">let</span> totalWordCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span></code></pre></div>\n<p>检查是否所有任务已经完成</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isCompelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> compeleteTask <span class=\"token operator\">===</span> totalTask\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>读取文件夹下的所有文件</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">readDir</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dir<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> files</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> err\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span> <span class=\"token operator\">=></span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>异步读取单个文件，统计字数，判断是否所有任务已经完成</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">countFile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">filePath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> err\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> data\n      <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\s+/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span>\n\n    totalCount <span class=\"token operator\">+=</span> count\n    compeleteTask<span class=\"token operator\">++</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isCompelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"total\"</span><span class=\"token punctuation\">,</span> totalCount<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>并行计算逻辑：读取 count 文件夹下的所有文件，<code class=\"language-text\">forEach</code>循环，并行计算文件中字数</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dir</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">readDir</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> <span class=\"token parameter\">fileList</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    totalTask <span class=\"token operator\">=</span> fileList<span class=\"token punctuation\">.</span>length\n    fileList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>countFile<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./count\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>执行结果</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node index.js\ncount/channel.js 85\ncount/index.js 23\ntotal 108</code></pre></div>\n<p>使用回调实现并行流程不容易理解而且比较复杂，Node.js 社区一直在探索更好的方式，从 Promise、Generator 到 Async 函数。<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<p><img src=\"https://static.cnodejs.org/FowNmdNw00ghB3PxKtMz9ajo2i5c\"></p>\n<p>当前 Async 函数已经成为主流，但是底层还回调实现，所以回调也是 Node.js 中必须掌握的技巧之一</p>\n<p>以下是同样的功能 async 函数的实现方式</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>promises\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">readDir</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dir</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> fileList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> file <span class=\"token keyword\">of</span> files<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> stat <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">stat</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stat<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> subFileList <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">readDir</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span>\n      fileList <span class=\"token operator\">=</span> fileList<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>subFileList<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      fileList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> fileList\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">countFile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">filePath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> data\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\s+/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    filePath<span class=\"token punctuation\">,</span>\n    count<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dir</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fileList <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">readDir</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> counts <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>fileList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span> <span class=\"token operator\">=></span> <span class=\"token function\">countFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> totalCount <span class=\"token operator\">=</span> counts<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sum<span class=\"token punctuation\">,</span> val</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">+=</span> val<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    counts<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token punctuation\">.</span>filePath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`total: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>totalCount<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./count\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://cnodejs.org/topic/5ab3166be7b166bb7b9eccf7\">https://cnodejs.org/topic/5ab3166be7b166bb7b9eccf7</a></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"Node.js异步控制流程之并行流程","date":"June 29, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/nodejs/async-parallel/","previous":{"fields":{"slug":"/nodejs/async-flow/"},"frontmatter":{"title":"Node.js的异步流程控制以及串行流程的实现"}},"next":{"fields":{"slug":"/nodejs/what-is-node-web/"},"frontmatter":{"title":"Node.js Web程序之搭建 RESTful Web 服务"}}}}}