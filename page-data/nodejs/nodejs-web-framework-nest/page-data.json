{"componentChunkName":"component---src-templates-blog-post-js","path":"/nodejs/nodejs-web-framework-nest/","webpackCompilationHash":"244ee56c36e36966767c","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"c5e7b0fc-2ecf-5c47-a099-72424ebfd7a7","excerpt":"Node.js Web 框架 NestNest 是一个用来构建高效、可扩展的 Node.js Web 服务的框架，使用 Typescript 编写并结合了OOP (面向对象), FP (函数式), and FRP (响应式编程)等编程范式Nest 设计上的灵感很多来源于 Angular，而 Angular…","html":"<h2>Node.js Web 框架 Nest</h2>\n<p>Nest 是一个用来构建高效、可扩展的 Node.js Web 服务的框架，使用 Typescript 编写并结合了OOP (面向对象), FP (函数式), and FRP (响应式编程)等编程范式</p>\n<p>Nest 设计上的灵感很多来源于 Angular，而 Angular 的设计模式又来源于 Java 中的 Spring 框架，比如依赖注入、控制反转、面向切面等，所以很多人认为 Nest 是 Node.js 版的Spring <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<h4>安装 &#x26; 创建项目</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> i -g @nestjs/cli\n\n$ nest new nest-demo\n⚡  We will scaffold your app <span class=\"token keyword\">in</span> a few seconds<span class=\"token punctuation\">..</span>\n\nCREATE /nest-demo/.prettierrc <span class=\"token punctuation\">(</span>51 bytes<span class=\"token punctuation\">)</span>\nCREATE /nest-demo/README.md <span class=\"token punctuation\">(</span>3370 bytes<span class=\"token punctuation\">)</span>\nCREATE /nest-demo/nest-cli.json <span class=\"token punctuation\">(</span>84 bytes<span class=\"token punctuation\">)</span>\nCREATE /nest-demo/nodemon-debug.json <span class=\"token punctuation\">(</span>163 bytes<span class=\"token punctuation\">)</span>\nCREATE /nest-demo/nodemon.json <span class=\"token punctuation\">(</span>67 bytes<span class=\"token punctuation\">)</span>\nCREATE /nest-demo/package.json <span class=\"token punctuation\">(</span>1805 bytes<span class=\"token punctuation\">)</span>\nCREATE /nest-demo/tsconfig.build.json <span class=\"token punctuation\">(</span>97 bytes<span class=\"token punctuation\">)</span>\nCREATE /nest-demo/tsconfig.json <span class=\"token punctuation\">(</span>325 bytes<span class=\"token punctuation\">)</span>\nCREATE /nest-demo/tslint.json <span class=\"token punctuation\">(</span>426 bytes<span class=\"token punctuation\">)</span>\nCREATE /nest-demo/src/app.controller.spec.ts <span class=\"token punctuation\">(</span>617 bytes<span class=\"token punctuation\">)</span>\nCREATE /nest-demo/src/app.controller.ts <span class=\"token punctuation\">(</span>274 bytes<span class=\"token punctuation\">)</span>\nCREATE /nest-demo/src/app.module.ts <span class=\"token punctuation\">(</span>249 bytes<span class=\"token punctuation\">)</span>\nCREATE /nest-demo/src/app.service.ts <span class=\"token punctuation\">(</span>142 bytes<span class=\"token punctuation\">)</span>\nCREATE /nest-demo/src/main.ts <span class=\"token punctuation\">(</span>208 bytes<span class=\"token punctuation\">)</span>\nCREATE /nest-demo/test/app.e2e-spec.ts <span class=\"token punctuation\">(</span>561 bytes<span class=\"token punctuation\">)</span>\nCREATE /nest-demo/test/jest-e2e.json <span class=\"token punctuation\">(</span>183 bytes<span class=\"token punctuation\">)</span>\n\n? Which package manager would you ❤️  to use? <span class=\"token function\">npm</span>\n▹▹▸▹▹ Installation <span class=\"token keyword\">in</span> progress<span class=\"token punctuation\">..</span>. ☕</code></pre></div>\n<h4>项目结构</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">src/\n├── app.controller.spec.ts\n├── app.controller.ts\n├── app.module.ts\n├── app.service.ts\n└── main.ts</code></pre></div>\n<ul>\n<li>app.controller.ts   路由控制器</li>\n<li>app.module.ts       项目的根模块</li>\n<li>main.ts             加载模块，项目的启动的入口</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// main.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NestFactory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.module'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> NestFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>AppModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>使用 <code class=\"language-text\">NestFactory.create</code> 来创建服务</p>\n<h4>基本概念</h4>\n<ol>\n<li>Controllers (控制器)<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></li>\n</ol>\n<p>Controller 负责处理请求，以及返回响应给客户端</p>\n<p><img src=\"https://docs.nestjs.com/assets/Controllers_1.png\"></p>\n<p>一个 Controller 可以定义多个路由。Nest 中通过使用 Typescript 中的装饰器（<a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\">decorators</a>）来添加路由的信息（metadata）</p>\n<p>使用 Nest CLI 工具 生成一个 Controller</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ nest g controller todo\nCREATE /src/todo/todo.controller.spec.ts <span class=\"token punctuation\">(</span>479 bytes<span class=\"token punctuation\">)</span>\nCREATE /src/todo/todo.controller.ts <span class=\"token punctuation\">(</span>97 bytes<span class=\"token punctuation\">)</span>\nUPDATE /src/app.module.ts <span class=\"token punctuation\">(</span>322 bytes<span class=\"token punctuation\">)</span></code></pre></div>\n<p>生成了todo.controller.ts 文件</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 文件 todo.controller.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Controller <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoController</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>同时在 app.module.ts 添加了 TodoController 依赖</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 文件 app.module.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppController <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.controller'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.service'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TodoController <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./todo/todo.controller'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  controllers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>AppController<span class=\"token punctuation\">,</span> TodoController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>AppService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>通过<strong>装饰器</strong>来添加路由，Nest 提供了标准的 HTTP 请求方法的的装饰器 @Post(), @Get(), @Put(), @Delete(), @Head(), @All()等</p>\n<p>添加一个 <code class=\"language-text\">item</code> 路由</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">@<span class=\"token function\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoController</span> <span class=\"token punctuation\">{</span>\n    @<span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/item'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">item</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'Watch movie'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>访问 localhost:3000/todo/item</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ curl localhost:3000/todo/item\nWatch movie</code></pre></div>\n<p>通过<strong>装饰器</strong>模式可以很方便的获取请求数据</p>\n<ul>\n<li>@Res()    获取 Request 对象</li>\n<li>@Req()    获取 Response 对象</li>\n<li>@Param(key?: string)    获取请求参数</li>\n<li>@Body(key?: string)     获取请求 Body</li>\n<li>@Query(key?: string)    获取URL的 query 参数</li>\n<li>@Headers(name?: string) 获取请求 Header</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  @<span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/item'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">item</span><span class=\"token punctuation\">(</span>@<span class=\"token function\">Req</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> req<span class=\"token punctuation\">:</span> Request<span class=\"token punctuation\">,</span> @<span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      query<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      url<span class=\"token punctuation\">:</span> req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>访问</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> localhost:3000/todo/item?id<span class=\"token operator\">=</span>22\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"query\"</span>:<span class=\"token punctuation\">{</span><span class=\"token string\">\"id\"</span><span class=\"token keyword\">:</span><span class=\"token string\">\"22\"</span><span class=\"token punctuation\">}</span>,<span class=\"token string\">\"url\"</span><span class=\"token keyword\">:</span><span class=\"token string\">\"/todo/item?id=22\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>2019-07-08 更新</p>\n<ol start=\"2\">\n<li>Providers (提供者)</li>\n</ol>\n<p>Providers 是 Nest 中非常重要的概念，许多基本的类比如services、repositories、factories、helpers 等都被视为 Providers。Provider 使用依赖注入的方式来委托给 Nest 运行时。</p>\n<p>Provider 可以通过 <code class=\"language-text\">@Injectable()</code> 类装饰器创建</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Todo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'dist/todo/todo.dto'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> list<span class=\"token punctuation\">:</span> Todo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">:</span> <span class=\"token string\">'To sleep'</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">:</span> <span class=\"token string\">'To sleep at night'</span><span class=\"token punctuation\">,</span> isDone<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">getTodoLit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getTodoItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一般用 Controller 来处理 HTTP 请求，而将复杂的任务交给 Provider</p>\n<p>在 Controller 中使用 service</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TodoService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./todo.service'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoController</span> <span class=\"token punctuation\">{</span>\n  \n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> todoService<span class=\"token punctuation\">:</span> TodoService</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  @<span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/item'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">item</span><span class=\"token punctuation\">(</span>@<span class=\"token function\">Req</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> req<span class=\"token punctuation\">:</span> Request<span class=\"token punctuation\">,</span> @<span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todoService<span class=\"token punctuation\">.</span><span class=\"token function\">getTodoItem</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>TodoService 通过 TodoController 的构造器注入后，可以在 TodoController 中使用 TodoService 实例</p>\n<p>注册 Provider</p>\n<p>在 Contorller 能够使用 Provider 之前需要在模块中注册 Provider</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TodoService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./todo/todo.service'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  controllers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>AppController<span class=\"token punctuation\">,</span> TodoController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>AppService<span class=\"token punctuation\">,</span> TodoService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>再访问 localhost:3000/todo/item</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> localhost:3000/todo/item?id<span class=\"token operator\">=</span>0\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"title\"</span><span class=\"token keyword\">:</span><span class=\"token string\">\"To sleep\"</span>,<span class=\"token string\">\"content\"</span><span class=\"token keyword\">:</span><span class=\"token string\">\"To sleep at night\"</span>,<span class=\"token string\">\"isDone\"</span>:false<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当前项目结构如下</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">src/\n├── app.controller.spec.ts\n├── app.controller.ts\n├── app.module.ts\n├── app.service.ts\n├── main.ts\n└── todo\n    ├── todo.controller.spec.ts\n    ├── todo.controller.ts\n    ├── todo.dto.ts\n    └── todo.service.ts</code></pre></div>\n<ol start=\"3\">\n<li>Modules (模块)</li>\n</ol>\n<p>模块是通过 <code class=\"language-text\">@Module()</code> 装饰器申明，在模块中申明元数据用来组织项目结构<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>，每个项目至少有一个模块\n<img src=\"https://docs.nestjs.com/assets/Modules_1.png\"></p>\n<p><code class=\"language-text\">@Module()</code>接受一下几个参数</p>\n<ul>\n<li>providers    提供者，初始化后可以在多个模块中共享</li>\n<li>controllers  控制器，引人模块中需要使用到的控制器</li>\n<li>imports      从模块中引入需要暴露给 Provider 的类</li>\n<li>exports      当前模块提供需要暴露给外部模块的类</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TodoService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./todo/todo.service'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  controllers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>AppController<span class=\"token punctuation\">,</span> TodoController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>AppService<span class=\"token punctuation\">,</span> TodoService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的例子中引人了两个 Controller：AppController、TodoController，两个 Contoller 中都可以注入AppService、TodoService</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://keelii.com/2019/07/03/nestjs-framework-tutorial-1/\">https://keelii.com/2019/07/03/nestjs-framework-tutorial-1/</a></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p><a href=\"https://docs.nestjs.com/controllers\">https://docs.nestjs.com/controllers</a></p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p><a href=\"https://docs.nestjs.com/modules\">https://docs.nestjs.com/modules</a></p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"Node.js Web 框架 Nest","date":"July 07, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/nodejs/nodejs-web-framework-nest/","previous":{"fields":{"slug":"/nodejs/nodejs-web-framework-sails/"},"frontmatter":{"title":"Node.js Web 框架之 Sails"}},"next":{"fields":{"slug":"/nodejs/nodejs-understand-connect/"},"frontmatter":{"title":"Node.js Web 之深入了解 Connect 中间件（一）"}}}}}