{"componentChunkName":"component---src-templates-blog-post-js","path":"/nodejs/nodejs-understand-connect/","webpackCompilationHash":"eb9b7fa042d48e7c3b06","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"57eaa50a-b9f8-5c9a-a4d2-8ea7f4043d59","excerpt":"Node.js Web 之深入了解 Connect 中间件（一）connect 是一个基于 HTTP 服务器的工具集，它提供了一种新的组织代码的方式来与请求和响应对象进行交互，称为中间件（书上原话）。通俗的来说，http…","html":"<h2>Node.js Web 之深入了解 Connect 中间件（一）</h2>\n<blockquote>\n<p>connect 是一个基于 HTTP 服务器的工具集，它提供了一种新的组织代码的方式来与请求和响应对象进行交互，称为中间件（书上原话）。通俗的来说，http 创建服务器接收请求时，所有的响应都要写在一个回调函数里面，对于不同的请求路径，所返回的响应信息都是通过 if 和 else 来区分，所有的逻辑都是在一个函数中，当逻辑复杂起来会有各种回调，极容易出现问题，故有了让问题简单起来的 connect 中间件的产生，connect 把所有的请求信息都拆分开，形成多个中间件，http 请求就相当于是水流一样流过中间件，当路径相同时，就会响应该请求，否则就继续往下流，直到结束。中间件就是函数组成的。<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n</blockquote>\n<h4>安装</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> connect</code></pre></div>\n<h4>创建 Connect Web 程序</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Connect <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello connect\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8806</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>传给 <code class=\"language-text\">app.use()</code> 的为中间件函数，处理 HTTP 响应。一个 Connect Web 程序就是由很多个中间件函数组成。</p>\n<p>根据中间件在整个http处理流程的位置，可将中间件大致分为三类<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>：</p>\n<ul>\n<li>Pre-Request 通常用来改写request的原始数据</li>\n<li>Request/Response 大部分中间件都在这里，功能各异</li>\n<li>Post-Response 全局异常处理，改写response数据等</li>\n</ul>\n<p><img src=\"https://files.cnblogs.com/luics/connect-middleware.zip\"></p>\n<h4>了解 Connect 中间件的机制</h4>\n<p>Connect 中间件就是一个 Javascript 函数，它接受请求对象（Request）、响应对象（Response）以及 回调函数 next，一个中间件执行完成后如果要继续往下执行后续的中间件，就可以调用 next 函数<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>。</p>\n<p>在中间件执行之前，Connect 中的分派器（Dispatcher）会接管请求，然后开始执行第一个中间件，再依次执行后续的中间件。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello connect\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>执行流程</p>\n<p><img src=\"https://s2.ax1x.com/2019/07/10/Z6dP4e.png\"></p>\n<ul>\n<li>Dispatcher 接受到请求，将请求传给第一个中间件</li>\n<li>调用 logger 中间件打印日志，logger 中调用 next()，将请求传给下一个中间件</li>\n<li>bodyParser 中间件解析请求的 body，调用 next() 将请求继续传给下一个中间</li>\n<li>最后一个中间件处理响应，结束请求，不在调用 next()</li>\n</ul>\n<p>Connect 通过中间件组合具有非常大的可扩展性，能够轻松实现复杂的逻辑</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://www.cnblogs.com/aicanxxx/p/7132427.html\">https://www.cnblogs.com/aicanxxx/p/7132427.html</a></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p><a href=\"https://www.cnblogs.com/luics/archive/2012/11/28/2775206.html\">https://www.cnblogs.com/luics/archive/2012/11/28/2775206.html</a></p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>《Node.js实战第二版》第六章 深入了解 Connect 和 Express</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"Node.js Web 之深入了解 Connect 中间件（一）","date":"July 09, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/nodejs/nodejs-understand-connect/","previous":{"fields":{"slug":"/nodejs/nodejs-web-framework-nest/"},"frontmatter":{"title":"Node.js Web 框架 Nest"}},"next":{"fields":{"slug":"/nodejs/nodejs-understand-connect-2/"},"frontmatter":{"title":"Node.js Web 之深入了解 Connect 中间件（二）"}}}}}