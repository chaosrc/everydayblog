{"componentChunkName":"component---src-templates-blog-post-js","path":"/nodejs/nodejs-understand-connect-2/","webpackCompilationHash":"ec0913081d1c10987813","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"206dbaca-c682-5bb6-926b-64cbf159f203","excerpt":"Node.js Web 之深入了解 Connect 中间件（二）上一篇中介绍了 Connect 中间件的工作机制，本篇继续介绍如何组合中间件、中间件的顺序以及创建可配置的中间件组合中间件Connect 中使用 use 方法来组合中间件。首先定义两个中间件  和  中没有  是因为它在里面完成了 HTTP…","html":"<h2>Node.js Web 之深入了解 Connect 中间件（二）</h2>\n<p>上一篇中介绍了 Connect 中间件的工作机制，本篇继续介绍如何组合中间件、中间件的顺序以及创建可配置的中间件</p>\n<h4>组合中间件</h4>\n<p>Connect 中使用 use 方法来组合中间件。首先定义两个中间件 <code class=\"language-text\">logger</code> 和 <code class=\"language-text\">helloConnect</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>statusCode<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">helloConnect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello connect'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">helloConnect</code> 中没有 <code class=\"language-text\">next</code> 是因为它在里面完成了 HTTP 响应，不需要再往下调用中间件</p>\n<p>组合 <code class=\"language-text\">logger</code> 和 <code class=\"language-text\">helloConnect</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>helloConnect<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8806</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">use</code> 函数返回 Connect 实例，支持链式调用</p>\n<h4>中间件的顺序</h4>\n<p>中间件的调用会对程序的行为产生很大的影响，如果漏掉 <code class=\"language-text\">next</code> 的调用后面的中间件不会调用，会使本次响应无法正常返回</p>\n<p>比如改变上面的中间件调用顺序，先调用 <code class=\"language-text\">helloConnect</code> 再调用 <code class=\"language-text\">logger</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>helloConnect<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8806</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>访问 localhost:8806 能正常返回‘hello connect’。以下两次中间件的执行顺序，左边是第一次，右边是第二次</p>\n<p><img src=\"https://s2.ax1x.com/2019/07/11/Zg5Fnx.png\"></p>\n<h3>创建可配置的中间件</h3>\n<p>为了达到中间件的可复用性、通用性，需要创建可配置的中间件</p>\n<p>可配置的中间件的原则是定义一个函数返回另一个函数，返回的这个函数是一个中间件，基本结构如下</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">setupLogger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">option</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 处理配置逻辑</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 处理中间件逻辑</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用可配置的中间件</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">setupLogger</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>接下来会使用一个例子来演示如何构建一个可配置的中间件</p>\n<p>创建一个静态文件服务的中间件</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token keyword\">static</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> staticDir <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'/public'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> staticURLPath <span class=\"token operator\">=</span> <span class=\"token string\">'/static'</span>\n    <span class=\"token keyword\">const</span> urlPath <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>urlPath<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>staticURLPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> filepath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>staticDir<span class=\"token punctuation\">,</span> urlPath<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>staticURLPath<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">)</span>\n\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>在项目目录下建立 public 文件夹添加 index.html 文件</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- index.html --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>hello static<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>访问 localhost:8806/static/index.html</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> localhost:8806/static/index.html\n<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>hello static<span class=\"token operator\">&lt;</span>/p<span class=\"token operator\">></span></code></pre></div>\n<p>当前 <code class=\"language-text\">static</code> 中间件请求 url 和本地文件路径都是固定的，无法在其他项目中复用</p>\n<p>创建一个静态文件服务的中间件，使得请求 url 和本地文件路径可配置</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">setupStatic</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">staticURLPath<span class=\"token punctuation\">,</span> staticDir</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token keyword\">static</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// const staticDir = path.join(__dirname, '/public')</span>\n        <span class=\"token comment\">// const staticURLPath = '/static'</span>\n        <span class=\"token keyword\">const</span> urlPath <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>urlPath<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>staticURLPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n    \n        <span class=\"token keyword\">const</span> filepath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>staticDir<span class=\"token punctuation\">,</span> urlPath<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>staticURLPath<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'filepath'</span><span class=\"token punctuation\">,</span>filepath<span class=\"token punctuation\">,</span> staticDir<span class=\"token punctuation\">,</span> urlPath<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">)</span>\n    \n        stream<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">setupStatic</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/static'</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'/public'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">setupStatic</code> 成为了可配置中间件，通过传人不同的路径参数来映射不同的文件夹，可以在其他地方复用这段代码</p>\n<p>整个 Connect 社区都在使用可配置中间件的概念，Connect 的核心中间件都是可配置的<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<h4>Connect 的错误处理中间件</h4>\n<p>Connect 中错误处理中间件比常规的中间件多了一个错误对象，Connect 的两种错误处理模式：默认错误处理器和自行处理</p>\n<p>默认错误处理器</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">foo</code> 方法没有定义, Connect 默认会返回500状态码</p>\n<p>自行处理错误</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'server error'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>handleError<span class=\"token punctuation\">)</span></code></pre></div>\n<p>错误处理中间件必须有4个参数err, req, res, next，程序发生错误时，Coonect 会跳过其他中间件，直接调用错误处理中间件</p>\n<p>访问 localhost:8806</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> localhost:8806\nserver error</code></pre></div>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>《Node.js实战第二版》第六章 深入了解 Connect 和 Express</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"Node.js Web 之深入了解 Connect 中间件（二）","date":"July 10, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/nodejs/nodejs-understand-connect-2/","previous":{"fields":{"slug":"/nodejs/nodejs-understand-connect/"},"frontmatter":{"title":"Node.js Web 之深入了解 Connect 中间件（一）"}},"next":{"fields":{"slug":"/nodejs/nodejs-understand-express/"},"frontmatter":{"title":"Node.js Web 之深入了解 express 框架"}}}}}