{"componentChunkName":"component---src-templates-blog-post-js","path":"/nodejs/express-view-render/","webpackCompilationHash":"ec0913081d1c10987813","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"0747dce5-50c3-51d9-bd48-c5d612fefba8","excerpt":"express 环境配置与模版渲染上一篇中我们创建了 express web 程序并定义了路由，本篇我们继续配置 express 环境以及使用模版渲染环境配置express 自带了一个极简的环境配置系统，由以下几个方法组成：app.set()app.get()app.disable()app.disabled()app…","html":"<h2>express 环境配置与模版渲染</h2>\n<p>上一篇中我们创建了 express web 程序并定义了路由，本篇我们继续配置 express 环境以及使用模版渲染</p>\n<h4>环境配置</h4>\n<p>express 自带了一个极简的环境配置系统，由以下几个方法组成：</p>\n<ul>\n<li>app.set()</li>\n<li>app.get()</li>\n<li>app.disable()</li>\n<li>app.disabled()</li>\n<li>app.enable()</li>\n<li>app.enabled()</li>\n</ul>\n<p><code class=\"language-text\">app.set()</code> 和 <code class=\"language-text\">app.get()</code> 用来设置和获取环境配置的值，比如通过 <code class=\"language-text\">app.get(&#39;env&#39;)</code> 可以获取到 <code class=\"language-text\">NODE_ENV</code>:</p>\n<p>设置 NODE_ENV 环境变量</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ NODE_ENV=production npm start</code></pre></div>\n<p>获取环境变量</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'env'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => production</span></code></pre></div>\n<p><code class=\"language-text\">app.enable()</code> 和 <code class=\"language-text\">app.disable()</code> 用来设置布尔类型的环境变量，等同于 <code class=\"language-text\">app.set(&#39;foo&#39;, ture)</code>，一般用来设置是否启用某个功能</p>\n<h4>模版渲染</h4>\n<p>模版渲染的概念很简单，就是将<strong>数据</strong>传递给<strong>视图</strong>(view)层，然后将<strong>视图</strong>层再渲染成HTML</p>\n<ol>\n<li>设置模版的查找路径</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'views'</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'views'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在调用 <code class=\"language-text\">app.render()</code> 函数渲染时会从项目的 <code class=\"language-text\">views</code> 文件夹查找渲染模版</p>\n<ol start=\"2\">\n<li>设置默认的渲染引擎</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'view engine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ejs'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>调用 <code class=\"language-text\">app.render(&#39;index&#39;)</code>会去寻找 <code class=\"language-text\">index.ejs</code> 渲染文件。express 可以同时支持多个渲染引擎，非默认的引擎模版需要加上后缀名，比如 pug <code class=\"language-text\">app.render(&#39;user.pug&#39;)</code></p>\n<ol start=\"3\">\n<li>设置渲染缓存</li>\n</ol>\n<p>在开发环境下 <code class=\"language-text\">render()</code> 每次调用都会重硬盘读取，所以每次修改模版文件无需重启就能使修改生效，但是对于生产环境来说非常影响性能，所以在生成环境下默认会开启模版缓存来提高性能，每次修改模版后需要重启服务器</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 开启模版缓存</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span><span class=\"token string\">'view cache'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ol start=\"4\">\n<li>数据传递</li>\n</ol>\n<p>express 中有两种方式将数据传递给模版引擎，最常用的是通过 <code class=\"language-text\">render()</code> 函数的第二个参数传递，也可以通过 <code class=\"language-text\">res.locals</code>或者 <code class=\"language-text\">app.locals</code> 传递。下面是在模版中获取变量的顺序：</p>\n<p><img src=\"https://s2.ax1x.com/2019/07/13/Z4bV2t.png\"></p>\n<p>express 还会默认传人一个 <code class=\"language-text\">settings</code> 变量包含 <code class=\"language-text\">app.set()</code> 中所以设定的值，比如 <code class=\"language-text\">app.set(&#39;appName&#39;, &#39;foo&#39;)</code>，在模版中可以听过 <code class=\"language-text\">settings</code> 变量引用</p>\n<div class=\"gatsby-highlight\" data-language=\"ejs\"><pre class=\"language-ejs\"><code class=\"language-ejs\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token ejs language-ejs\"><span class=\"token delimiter punctuation\">&lt;%=</span><span class=\"token language-javascript\"> settings<span class=\"token punctuation\">.</span>appName </span><span class=\"token delimiter punctuation\">%></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>输出</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;p&gt;foo&lt;/p&gt;</code></pre></div>\n<p>学会环境配置和模版渲染后，接下来就可以创建数据库来做数据持久化了</p>","frontmatter":{"title":"Express 环境配置与模版渲染","date":"July 13, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/nodejs/express-view-render/","previous":{"fields":{"slug":"/nodejs/nodejs-understand-express/"},"frontmatter":{"title":"Node.js Web 之深入了解 express 框架"}},"next":{"fields":{"slug":"/nodejs/express-redis/"},"frontmatter":{"title":"Express Web 之使用中间件校验表单"}}}}}