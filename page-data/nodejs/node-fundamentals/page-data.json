{"componentChunkName":"component---src-templates-blog-post-js","path":"/nodejs/node-fundamentals/","webpackCompilationHash":"692ee2b79c26dd6d5a8a","result":{"data":{"site":{"siteMetadata":{"title":"温故而知新","author":"chao"}},"markdownRemark":{"id":"b8ac2cf7-90ff-5135-a9a2-3f457482cd02","excerpt":"Node.js编程基础Node.js核心模块对Javascript有一点了解的都知道，Javascript没有与操作系统互交的能力，比如文件I/O、TCP/IP网络等，Node.js中的核心模块为Javascript添加了这些功能，使它可以用来编写服务端程序文件系统模块：fs、pathTCP…","html":"<h2>Node.js编程基础</h2>\n<h4>Node.js核心模块</h4>\n<p>对Javascript有一点了解的都知道，Javascript没有与操作系统互交的能力，比如文件I/O、TCP/IP网络等，Node.js中的核心模块为Javascript添加了这些功能，使它可以用来编写服务端程序</p>\n<ul>\n<li>文件系统模块：fs、path</li>\n<li>TCP客户端和服务端：net</li>\n<li>http库： http、https</li>\n<li>域名解析： dns</li>\n<li>操作系统库： os</li>\n<li>断言库： assert</li>\n</ul>\n<p>读取一个文件并且在终端输出</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./package.json'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>创建一个简单的http服务器</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello node'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>运行并访问8080端口</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node index.js\n\n$ <span class=\"token function\">curl</span> http://localhost:8080\nhello node</code></pre></div>\n<h4>Node.js中的代码组织方式</h4>\n<p>Node.js采用 CommonJS 模块规范，每个文件就是一个模块，有自己的作用域，在模块里面定义的变量、函数等都是私有的，对于其他文件不可见<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 文件 demo.js</span>\n<span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inside module'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果想定义全局变量可以定义在<code class=\"language-text\">global</code>对象</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">global<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> bar</code></pre></div>\n<p><code class=\"language-text\">bar</code>变量可以在任何文件中获取，一般不推荐这种写法，因为设置全局变量失去了模块化的意义</p>\n<p>Node.js每个模块内部有两个变量module、exports，exports同时也是module上的一个属性，通过exports可以导出模块中的变量</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 文件 demo.js</span>\n<span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inside module'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nexports<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> bar\nexports<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> foo</code></pre></div>\n<p>在index.js中通过<code class=\"language-text\">require</code>函数引人demo.js模块</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 文件index.js</span>\n<span class=\"token keyword\">const</span> demo <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./demo'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">demo</code>只包含了demo.js中exports的变量</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node index.js\n<span class=\"token punctuation\">{</span> bar: 100, foo: <span class=\"token punctuation\">[</span>Function: foo<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n100\n<span class=\"token punctuation\">[</span>Function: foo<span class=\"token punctuation\">]</span></code></pre></div>\n<p>总结：</p>\n<ul>\n<li>在一个模块内部通过exports对象导出变量</li>\n<li>在另一个文件中使用<code class=\"language-text\">require</code>函数引用模块并使用</li>\n</ul>\n<p>Node.js模块的特点</p>\n<ul>\n<li>模块作用域不会影响全局</li>\n<li>多次引入只会在第一次时运行是实例化模块，以后运行读取缓存</li>\n<li>模块安照引用顺序同步加载</li>\n</ul>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://javascript.ruanyifeng.com/nodejs/module.html\">https://javascript.ruanyifeng.com/nodejs/module.html</a></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"Node.js编程基础","date":"June 25, 2019","description":"Node.js的核心模块简介，Node.js中的代码组织方式"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/nodejs/node-fundamentals/","previous":{"fields":{"slug":"/nodejs/install-project/"},"frontmatter":{"title":"Node.js的安装以及npm包管理工具的使用"}},"next":{"fields":{"slug":"/nodejs/async-program/"},"frontmatter":{"title":"Node.js中的异步编程以及回调的使用"}}}}}